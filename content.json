{"meta":{"title":"devpools blog","subtitle":"개발 바보들의 놀이터","description":"개발 바보들 모여라","author":"devpools","url":"http://www.devpools.kr"},"pages":[{"title":"devpools","date":"2017-12-11T02:19:03.000Z","updated":"2018-01-08T05:05:15.211Z","comments":false,"path":"about/index.html","permalink":"http://www.devpools.kr/about/index.html","excerpt":"","text":"devpools는 개발 바보들이 모여서 서로의 이야기를 나누는 공간입니다. fools. 가 바보인 것도 나중에 알았다는 것은 안 비밀."},{"title":"tags","date":"2017-12-11T02:19:53.000Z","updated":"2017-12-11T02:20:42.670Z","comments":false,"path":"tags/index.html","permalink":"http://www.devpools.kr/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2017-12-11T02:19:03.000Z","updated":"2017-12-11T02:19:40.912Z","comments":false,"path":"categories/index.html","permalink":"http://www.devpools.kr/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"[2018-05-22]2018년 4~5월 깃헙 트렌드 - 당신만의 프로젝트를 스스로 만들어보기","slug":"2018-05-22-2018년-4-5월-깃헙-트렌드-당신만의-프로젝트를-스스로-만들어보기","date":"2018-05-26T22:51:17.000Z","updated":"2018-05-28T11:02:05.903Z","comments":true,"path":"2018/05/27/2018-05-22-2018년-4-5월-깃헙-트렌드-당신만의-프로젝트를-스스로-만들어보기/","link":"","permalink":"http://www.devpools.kr/2018/05/27/2018-05-22-2018년-4-5월-깃헙-트렌드-당신만의-프로젝트를-스스로-만들어보기/","excerpt":"","text":"우리가 편하게 개발하고 있는 토대가 되는 여러가지 도구들, 혹은 기술들 중에 ‘이건 도대체 어떻게 만들었을까?’ 라는 의문을 가지게 될때가 종종 있다.나중에 한번 알아봐야지 하고 그냥 지나칠 경우가 굉장히 많은데 세상은 나처럼 게으른 자를 위해 나보다 조금 더 부지런한 사람이 작업을 해 두었다. ‘Build your own X’ 라는 프로젝트가 오늘의 주인공이다. X 대신에 내가 만들고 싶은 무엇을 대입하면 된다라는 뜻의 이 프로젝트는 프로젝트 Readme 파일에 리차드 파인만의 명언이 적혀있다. ‘What I cannot create, I do not understand’대체적으로 동감한다. (대체적이라고 쓴 것은 리처드 파인만이 천재중의 천재이기 때문에 여지를 남겨 둔 것이다.) HTML의 한 부분을 파싱할려고 해도 jQuery를 import 해서 쓰던 옛 습관들을 되돌아 보면 가끔은 내가 라이브러리 덕후인지 개발자인지를 헷갈릴 때도 있다. 개인적으로 궁금해 했었던 프로젝트들Web Framework가장 최근에 궁금해 했었던 프로젝트는 아마도 React 가 아니었나 싶다. GIS(Geographic Information System) 프로젝트를 하면서 Zero Dependency Map Framework를 만들던 추억을 되짚어 보면서 언젠가 비슷한 프레임워크를 만들어야지 했었던 다짐(?)들이 솔솔 떠오르는 주제중의 하나가 웹 프레임워크인데 Virtual DOM이 어떻게 작동할지가 가장 궁금한 영역이었다.아래의 리스트들을 살펴보자. JavaScript: WTF is JSX (Let’s Build a JSX Renderer) JavaScript: A DIY guide to build your own React JavaScript: Reverse Engineering React(중략) JavaScript: Build your own Vuejs JavaScript: Build Your own Simplified AngularJS in 200 Lines of JavaScript JavaScript: How to write your own Virtual DOM Welcome To Facebook 의 약자라 믿으며(응?) 읽어볼 수 있는 “WTF is JSX”는 어떻게 JSX를 파싱해서 렌더링 트리를 만드는지에 대한 내용이 주로 있다. 이 글에서 가장 중요한 부부은 h() 함수. hyperscript 부분이다. 1234function h(nodeName, attributes, ...args) &#123; let children = args.length ? [].concat(...args) : null; return &#123; nodeName, attributes, children &#125;;&#125; hypertext를 JavaScript 객체로 바꿔 주는 부분이라고 볼 수 있다.이 내용은 마지막 링크인 “How to write your own Virtual DOM” 과 굉장히 자연스레 이어지기 때문에 독자들에게는 좋은 인사이트를 줄 수 있을 것 같다.위의 hyperscript가 JSX 를 파싱해서 아래와 같은 형태의 DOM 트리를 만들고나면 브라우저에 DOM으로 표현을 하게 되면 이른바 우리가 알고 있는 브라우저에 렌더링 하는 형태로 드러나지게 되는 것이다.1234h(‘ul’, &#123; ‘class’: ‘list’ &#125;, h(‘li’, &#123;&#125;, ‘item 1’), h(‘li’, &#123;&#125;, ‘item 2’),); 이후, Hanlding Changes 부분이 바로 Tree의 변화를 감지해서 바로 그려주게 되는 내용을 기술하고 있다고 보면 된다. props와 state등의 더 깊은 부분은 이 포스팅에서는 찾아볼 수 없지만, 이루어지는 메커니즘을 이해하는데에는 훌륭한 글이라 보여진다. 물리엔진물리 엔진(영어: physics engine) 또는 물리 연산 엔진은 강체동역학(충돌 감지 포함), 연체동역학, 유동역학과 같은 단순한 특정 물리 시스템을 최대한 시뮬레이션하려고 하는 컴퓨터 소프트웨어이다. 참고: 위키백과물리엔진의 존재를 처음 생각하게 된 것은 Doom 이라는 게임을 접하면서 였던 거 같다. 물론 그 당시 수준이란게 물리엔진이라는 수준 보다는 3D 엔진의 도화선이 된 것이었지만 움직이면서 오브젝트가 작동하는 방식들이 일종의 물리엔진을 가지기는 한다.유명한 물리엔진은 하복(havok) 과 크로노 프로젝트(project chrono)가 있다.하복을 사용하는 게임으로는 철권 태그 토너먼트, 디아블로3, 엘더스크롤5: 스카이림, 헤일로2~4, 하프라이프2, 스타크래프트2 등의 명작 게임이 즐비하다. 이 물리 엔진을 위해서 아래의 내용들을 제공하고 있다. C: Video Game Physics Tutorial C++: Game physics series by Allen Chou C++: How to Create a Custom Physics Engine(중략) JavaScript: Build your own basic physics engine in JavaScript JavaScript: How Physics Engines Work 이 중에서 “Build your own basic physics engine in JavaScript”에는 브라우저에서 어떻게 캔버스에 물리 오브젝트를 그리고 값을 변화시기는지 간단하게 나와 있다. 이 중에서 가장 초보자들이 가장 눈여겨 봐야할 부분은 다음의 소스 코드에서 requestAnimationFrame 이 들어간 부분이다. 이 부분은 브라우저 캔버스에서 60프레임을 확보하기 위해서 사용되는 내장 브라우저 함수이다.1234567Loop = function() &#123; //재귀호출을 실행한다. requestAnimationFrame(Loop); //실제 프레임 안에서 작동하는 내용을 기술해서 작동하도록 한다. frameRender();&#125; requestAnimation에 대한 자세한 내용은 다음을 통해 숙지하자.모질라 개발자 사이트 - requestAnimationFrame “How Physics Engines Work” 글에서는 조금 더 나아가서 실제로 오브젝트에 물리식들을 조금씩 적용해 보는 예제들을 확인할 수 있다. 뉴턴의 제2법칙 -물체의 운동량의 시간에 따른 변화율은 그 물체에 작용하는 힘과 (크기와 방향에 있어서) 같다. -인 F=ma 를 찾아볼 수 있다. 즉 질량 * 가속도 = 힘으로 우리가 알고 있는 내용이다.실제 중력 가속도 인 0.98을 이용해서 공이 자유낙하 하는 예제를 포함하고 있다.jsfiddle 예제jsfiddle 예제를 통해서도 볼 수 있다. 더 관심이 있는 사람은 다른 아티클들을 가지고 더 들여다 볼수도 있다. 이 외에도 블럭체인, OS, Database, 검색엔진 같은 흥미로운 주제들을 생각해 볼 수 있을 것으로 보인다. 맺으며조금 더 좋은 개발자가 된다는 일은 어떤 느낌일까? 개인적으로는 조금 더 깊은 본질에 가까워지는 노력을 게을리 하지 않고, 흘러가는 트렌드를 놓치지 않기 위해 노력하지만 천둥 벌거숭이 같은 남자 아이 셋을 키우는 입장에서는 언제나 시간이 부족하다. 하지만 언제나 이런 좋은 리소스들이 넘쳐나는 세상에서 배울것이 무궁무진하다는 것은 고무적인 일이다.","categories":[],"tags":[]},{"title":"[2018-04-27]Responsive Web을 위해 개발자가 꼭 알아야 하는 기술들","slug":"2018-04-27-Responsive-Web을-위해-개발자가-꼭-알아야-하는-기술들","date":"2018-04-27T01:38:11.000Z","updated":"2018-05-28T11:01:45.911Z","comments":true,"path":"2018/04/27/2018-04-27-Responsive-Web을-위해-개발자가-꼭-알아야-하는-기술들/","link":"","permalink":"http://www.devpools.kr/2018/04/27/2018-04-27-Responsive-Web을-위해-개발자가-꼭-알아야-하는-기술들/","excerpt":"","text":"반응형 웹(Responsive Web) 개발은 이미 일상이 되어버린 2018년 봄에 이런 글을 쓰게될 줄은 몰랐는데, 최근에 몇가지 프로젝트를 진행을 하다가 대부분의 개발자들이 반응형 웹에 대한 개념은 있지만 어떻게 개발해야 하는지를 모른다는 사실과 직면하게 되었다. 왜 이런 일이 발생했을까?친구들과 이야기들을 하면서 찾아가다보니 대부분 부트스트랩과 같은 CSS 웹 프레임워크를 쓰거나, 퍼블리셔의 영역이라고 생각하고 있다는 것을 알게 되었다. 영역에 대한 갑론을박은 나중에 하자. 이 포스팅에서는 다루지 않을 생각이다. 그런데, 왜 지금에서야 이 문제가 되었을까?최신 개발을 진행을 하게 되면 대부분 리액트(React), 뷰(Vue), 앵귤러(Angular) 같은 웹 컴포넌트를 쓰게 된다. 그런데 개발자들이 이런 프레임워크들을 쓰게 되면서 제이쿼리(jQuery)에 대해서 반감(?)을 갖게 되었고 부트스트랩은 기본적으로 제이쿼리 기반으로 갖춰진 터라 배재하고 쓰기 시작하는데 반응형이라는 숙제 앞에서 대략난감(?)한 상황이 된 것이었다. 게다가 퍼블리셔가 회사에서 점점 사라져가는 개발 프로세스들(스케치와 제플린 콤보)이 정립되고 나니 개발자들이 반응형 웹의 영역을 떠 받게 되는 상황이 되었다. 지금 포스팅은 이런 상황에 직면한 개발자들을 위해 쓰여졌다. 하지만 유용할 것이라고 생각한다. 아래와 같은 순서로 포스팅은 진행된다.12345678910111213- 반응형 웹의 정의- 반응형 웹의 기술들 1. 픽셀의 정의와 viewport metatag 2. 반응형 레이아웃 2.1. 미디어 쿼리 2.2. 레이아웃 패턴과 중단점 2.3. flexbox 3. 반응형 리소스 3.1. 이미지 3.2. 텍스트 3.3. 폰트(em,rem) 3.3. 반응형 CSS 로딩 4.개발자 도구 툴 활용 반응형 웹이란반응형 웹(Responsive Web)을 정의할때면 언제난 적응형 웹(Adaptive Web)에 대한 이야기가 같이 나온다.모바일 환경이 시작되면서 장치도 같이 다양해 지기 시작했다. 해상도의 크기도 다르고 비율이 달라지는 일들이 벌어졌다. 그 전에는 모니터에 맞춰서 1024x768, 1280x960 등의 동일 비율의 크기에 대한 대응만 하면 되던 일들이 아예 비율도 달라지고 해상도는 굉장히 높은데, 모바일 디바이스의 경우는 픽셀의 크기자체가 모니터의 크기랑 비교가 안되게 작아지는 일들이 생겨서 페이지를 설계하는데에 고려할 사항들이 많이 늘어 났다. 이런 상황에 적응할 수 있도록 반응형 웹 기술과 적응형 웹 기술이 탄생했다. 적응형 웹은 기본적으로 서버사이드에서 미리 클라이언트의 정보를 받아서 클라이언트가 모바일인지 웹인지를 파악해서 리소스를 선택해서 내려주는 형태를 이야기한다. 예를 들어 모바일 폰으로 네이버에 접속할 때를 생각해보면 쉽게 이해가 될 것이다. www.naver.com을 쳤지만 모바일 브라우저로 접근하면 m.naver.com로 리다이렉트 하고 렌더링하는 리소스들도 전혀 다르다. www.naver.com 의 크기를 늘였다 줄여도 레이아웃이 전혀 변경되지 않는다.하지만 반응형 웹은 같은 페이지 리소스를 가지고 오지만 해당 페이지의 크기에 따라서 다르게 보이는 것을 이야기 한다. 하지만 삼성 SDS 사이트의 경우는 브라우저의 사이즈를 줄일 수록 레이아웃 자체가 바뀌는 것을 볼 수 있다. 어떤 것이 더 좋은지는 웹 페이지의 지향점에 따라 다르기 때문에 무엇이 더 좋다고 할 수는 없지만, 모바일 환경에서 반응형 웹 페이지를 고려해야 하는 것은 요즘에는 너무나 당연한 것으로 이야기 되어진다. 왜 그런지 알아보도록 하자.( 심지어 m.naver.com 으로 일단 진입하고 나면 레이아웃이 바뀌는 모습도 발견할 수 있다.) 반응형 웹 페이지를 만들기 위해 알아야할 개념들그렇다면 이 반응형 웹 페이지를 만들기 위해서는 어떤 기술들을 알아야 할까요? 어떤 기술들이 있으면 반응형 웹 페이지를 만들 수 있는지, 모바일과 웹에서 같은 사용자의 경험을 가져갈 수 있는지 알아봅시다. 1. 픽셀의 정의와 viewport metatag픽셀먼저 픽셀에 대해서 알아보자.웹페이지를 제작할 때에 대부분의 사이트가 width:600px 같은 형태로 픽셀을 기준으로 페이지를 그리고 있다. 픽셀은 화면을 구성하는 가장 기본이 되는 단위로 보통 Picture Element 혹은 화소라고도 불린다. 이른바 15인치 모니터에 1024x768이라고 하면 모니터의 수평으로 1024개의 픽셀이 수직으로 768개의 픽셀이 배치되어 있다고 보면 된다. 즉 786432개의 픽셀로 이루어진 셈이다. 하지만 모바일 환경에서는 이 픽셀을 그대로 사용하지는 않는다. 왜냐하면 손 안에 들어오는 작은 디스플레이에 같은 픽셀을 기준으로 적용을 할 수 없기 때문이다. 아이폰 3GS 시절만 해도 320x480 같은 저해상도의 디스플레이였기 때문에 대부분의 페이지가 화면을 넘어가는 문제로 해상도를 그대로 사용할 수 없었다면, 현재 갤러시 S9은 1440x2960 과 같은 해상도의 화면이기 때문에 깨알 같이 보이는 어려움이 있다. 이 문제를 처음 깨닫고 해결하려고 덤벼든 것은 당연히 가장 먼저 스마트 폰에서 제대로 된 웹 환경을 제공한 애플이다. 당시에는 지금처럼 사이트를 모바일 사이트로 만들지 않았고 웹 페이지가 기준이었으니까 가상 viewport 개념을 도입했다. 실제로는 320px의 디스플레이를 980px의 viewport를 그린 것이다. 아래 그림을 보면 이해가 더 편할 것으로 보인다. 아래 그림은 애플 개발자 사이트에서 viewport 부분을 캡처한 화면이다. 320px 에서는 다 보이지 않는 페이지들이 980px의 viewport 안에 보이게 브라우저가 작동을 하는 것을 볼 수 있을 것이다.출처 : 애플 개발자 사이트 - Configuring the Viewport 이 때부터 대부분의 모바일 브라우저의 virtual viewport는 980px로 고정이 되었다. ( virtual viewport는 진짜 해상도가 320px,1440px,1080px등 다양한 장비들이 width는 보시다시피 같은 너비 기준으로 렌더링한다. 모바일 웹페이지의 width height 들을 작성을 할때는 참고하자. )현재도 그런지 시뮬레이터에서 다음의 소스로 확인해 보자. 123var w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);var h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);alert(w); 보기와 같은 소스코드로 확인해 보면 최신의 장비도 아래와 같이 980px를 안드로이드와 iOS모두 고수하고 있음을 알 수 있다.즉 우리가 보는 픽셀은 실제로 장비의 픽셀 너비는 980/(실제 장비의 pixel width) 임을 알수 있다. 그런데, 실제로 모바일 장비의 해상도는 더 커지고 다양해 지는데, 모든 장비에서 사람들에게 편안한 크기의 이미지를 제작하고 폰트를 제공하려면 어떻게 해야 될까? ( 그에 관련된 내용도 출처를 밝힌 위의 링크에서 확인해 볼수 있다. ) viewport meta tag일단 데스크 탑 용 네이버 사이트를 980px에서 확인해 보자.도저히 한눈에 들어오는 가독성은 아니다. 결국 사람이 익숙한 폰트도 12~16px의 폰트가 적당하다고 봤을때, 각각 장비별로 적정한 device-width를 정의하기 시작했고, 아이폰은 처음 시작은 320px를 device-width로 주고 meta 태그에 viewport라는 아래와 같은 옵션을 주면 장비의 가독성이 가장 좋은 viewport를 가지기 시작했다. 1&lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\"&gt; 최신의 아이폰들은 375px를, Pixel XL은 412px를 viewport로 가지고 있다. 이제 viewport 라는 개념이 헷갈리기 시작할텐데 다음과 같은 원칙으로 정의해 보자. meta tag에 viewport에 대한 별 내용이 없으면 기본적으로 980px를 기준으로 웹 페이지는 렌더링한다. 하지만 글자의 가독성이 떨어지므로 각 장비별로 가독성이 가장 좋은 device-width를 viewport에 셋팅할 수 있는 옵션이 있다. 그 옵션을 정의하고 나면 각 장비별 device-width로 페이지는 렌더링 된다. 이해를 돕기 위해 가로 640px 세로 640px의 이미지를 렌더링 하는 코드를 여러 장비에서 한번 확인해 보자. 사용된 시뮬레이터는 왼쪽으로 부터 iPhone X 와 iPhone 6, 그리고 Pixel2 XL과 저해상도 안드로이드 장비다. (저해상도 안드로이드 장비는 아이폰 3GS 시절의 320x400이 동작하는 방식을 재현하기 위해서다. ) 일반적인 이미지보기를 할 때img 태그만 적용해서 확인을 해 보면 640px의 이미지가 출력이 되는데, viewport가 980px 이므로 저해상도 안드로이드 장비말고는 모두 오른쪽에 여백이 남는다. 각 이미지별로 사각무늬의 크기도 제각각이다. viewport 옵션을 적용한 이미지보기를 할 때각 장비별로 이미지가 보이는 부분은 다르지만 사각무늬의 크기는 동일하게 나온다. 이것을 이용하면 어떤 장비든지 보기 좋고 동일한 UX를 만들 수 있을 것 같은 확신이 든다. viewport의 옵션을 더 알아보자.먼저 페이지에 들어가서 핀치투 줌 같은 사용자의 행동을 막기 위한 옵션을 줄 수 있다. 네이버나 다음 사이트에 들어갔을때 두 손가락으로 줌인 줌아웃이 안되는 것을 볼 수 있을 것이다. viewport를 마음대로 변경하면 서비스 사업자가 원하는 데로 서비스가 제공되지 않을 때 사용한다.가장 좋은 예는 지도 앱의 경우는 두손으로 확대를 하면 지도가 확대가 되어야 하는데 웹 페이지가 확대되는 걸 본적이 있을 것이다. 이런 경우를 위해서 사용이 된다. 1&lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no\"&gt; 여기서 device-width이외에 추가된 부분들이 그 역할을 하는데, 최초의 scale을 기준으로 사용자가 임의로 스케일을 변경할 수 없음을 이야기 한다. scale은 각 장비의 가장 가독성이 높은 device-width의 배율로 정의하면 이해하기 편하다. 즉 0.5로 scale을 바꾸면 Pixel XL2의 경우는 824 픽셀이 나온다.(414/0.5) 이상의 내용을 잘 이해하면 앞으로 나올 반응형 레이아웃과 미디어쿼리등의 상황을 잘 적응할 수 있을 것으로 보인다.참고로 landscape(핸드폰을 옆으로 뉘였을때)일 때도 980px가 기본 viewport width 이다. meta-tag 설정을 하면 어떻게 되는지는 각자 확인을 해보자. 안드로이드 에뮬레이터에서 데스크 탑의 localhost 를 접속하려면 10.0.2.2를 사용하는 것도 이번 포스팅을 알면서 알게된 좋은 성과다. 이번 포스팅을 통해서 기하급수적으로 늘어나는 모바일 디바이스에서 화면을 어떻게 적응 시키기 위한 노력들을 했는지 알아보았고 그에대한 대답으로 가상 뷰포트라는 것이 존재한다는 것과 실제 여러 디비이스에서 동일하게 폰트와 이미지 크기를 나오게 하기 위해서 viewport와 scale=1.0 옵션을 가지고 있다는 것을 알게 되었다. 이후에는 반응형 웹을 어떻게 만들 것인지에 대한 실체에 조금더 접근해 보자. 이어지는 포스팅에는 반응형 레이아웃에 대해서 알아보도록 하겠다.","categories":[],"tags":[{"name":"Front-End","slug":"Front-End","permalink":"http://www.devpools.kr/tags/Front-End/"}]},{"title":"Happy Workers","slug":"2018-03-16-Happy_Workers","date":"2018-03-16T00:00:00.000Z","updated":"2018-05-28T10:57:37.918Z","comments":true,"path":"2018/03/16/2018-03-16-Happy_Workers/","link":"","permalink":"http://www.devpools.kr/2018/03/16/2018-03-16-Happy_Workers/","excerpt":"","text":"높은 급여와 인센티브가 생산성을 높일 수 있을까?‘상식 밖의 경제학’의 저자이며, 행동경제학의 석학으로 알려진 듀크대의 댄 애리얼리 교수의 연구팀이 아주 재미있는 실험[^1]을 했습니다. * 애리얼리 교수는 효율성보다는 의미가 중요하다고 주장한다 레고를 조립하는 두 개의 그룹으로 피실험자들을 나눈 후에, 첫번째 실험 참가자들은 하나의 로봇 레고를 조립하고 나면, 다른 종류의 로봇을 제공받게 했습니다. 그리고, 그들은 계속 로봇을 만들게 했는데요. 완성된 로봇 레고는 피실험자들 앞에 진열하도록 했습니다. 두번째 참가자들은 첫번째 그룹과 달리 동일한 종류의 로봇을 계속 제공받았습니다. 그리고, 그들이 하나를 완성하면 그들이 보는 앞에서 완성된 로봇은 분해되도록 했습니다. 두 실험그룹은 완성된 로봇 숫자만큼 똑같이 금전적 보상을 받도록 했죠. 그리고, 참가자들은 본인 의사에 따라 로봇을 만드는 것을 언제든 그만 둘 수 있었습니다. 일반적으로 생각해보면 두번째 실험군은 동일한 로봇만 계속 만들기 때문에, 만드는 속도도 빨라지고 더 많은 보상을 받을 수 있을 거라고 예상할 수 있죠. 그렇지만, 정반대의 결과가 나왔습니다. 첫번째 그룹은 평균 10.6대를 완성하고 14.4달러의 보상을 받은 반면, 두번째 그룹은 7.2대를 완성하고, 11.5달러 밖에 받지 못했습니다. 애리얼리 교수는 인간의 노동에 대한 금전적 보상만으로는 동기를 부여할 수 없고, 무언가를 성취하는 과정에서 의미를 찾는게 인간이라고 이유를 들었습니다. 두번째 실험그룹은 끝없이 돌을 옮겨야만 했던 시지프스와 같은 굴레에 갖혀버리게 되었고, 낮은 생산성을 보일 수 밖에 없었던 것이라고 말입니다. 결국, 높은 금전적 보상은 생산성과는 관련이 없다고 봐도 될 거에요. 그렇다면, 인간을 몰입하게 하고, 생산성을 높이기 위한 가장 효과적인 방법은 무엇일까요? 이미 애리얼리 교수가 언급했지만, 인간은 성취감을 얻고, 존재의 의미를 찾을 수 있을 때 그 순간에 집중하게 됩니다.심지어, 인간은 무언가를 먹을 때도 왜 이것을 메뉴를 선택했고, 어떤 속도로 먹어야 하는가에도 의미를 부여합니다. 등산을 가서 등반 코스를 정할 때에도, 마트에서 라면 하나를 고르면서도 전부 의미없는 선택이란 없다는 걸 떠올려 보세요. 어떤 선택이 내 몸에 도움을 주는가, 어떤 메뉴를 선택해야 같이 식사하는 이 사람과 대화의 물꼬를 틀 수 있을까하는 고민들을 하거든요. 결국 사람은 자신의 무언가 선택을 하고, 실행을 해서 성취해내는 과정 속에서 존재의 의미를 찾습니다. (물론, 다른 방법을 통해 존재의 의미를 찾지 못한다는 것은 아닙니다.) 그 과정의 결과가 바로 몰입이며 생산성의 향상일 뿐이죠. 인류 역사를 통털어 가장 불행한 세대가 일하고 있는 곳, 회사 모든 회사들이 근래에 겪고 있는 가장 심각한 문제는 지속적으로 떨어지고 있는 직원들의 업무 몰입도입니다. 특정 부서의 문제가 아니라 전세계적으로 형편없는 수준으로 떨어졌다는 연구가 계속 보고되고 있죠. 이미 미국 직장인의 2/3는 업무에 집중하지 못하고, 다른 동료들의 업무에 방해가 되거나 동료들과의 관계도 좋지 않은 만성 피로상태에 있다고 합니다. 이런 현상은 미국의 정치/경제의 변화의 속도가 너무 빨라졌고, 높아진 불확실성이 개인들을 위축시키며 최악의 스트레스에 시달리게 만든 것이 원인이라고 미국 심리학회[^2]는 분석했습니다. 우리나라의 경우도 다르지 않습니다. 실업자 200만, 정리해고, 떨어지는 경제 성장률, 50년간 이어져 온 북한의 안보위협까지 만성화된 스트레스에 살고 있으니까요. 거기에 더해서 저성장 시대의 기업들은 더 높은 매출과 성장, 시장의 확대가 직원들의 성장과 따로 생각할 수 없는 것이라고 주장합니다. (회사는 또 하나의 가족이라는 개념은 심각한 오류다.) 어떤 기업은 ‘회사의 비전과 개인의 비전이 일치해야만 높은 성과를 이뤄낸다’며, 개인들의 앞으로의 업무 비전을 적어서 제출하라고 하기까지 합니다. 앞에서도 언급한 것처럼 개인에게 의미없는 목표를 강제로 주입한다고 해서, 그것이 달성되는 것도 아니며 생산성이 높아지지도 않습니다. 더군다나 분기/반기별로 이어지는 성과 평가는 개인을 생산성 측정의 대상으로 밖에 보지 않고, 직원의 겪고 있는 스트레스에 대해서는 외면하고 개인의 책임으로 돌리는 경우가 많습니다. 이러다보니 직원들은 ‘회사’라는 장소가 불행의 근원이며, 무언가 성취하기 위해 일하는 것이 아니라 의무감으로 ‘해야 할 일만’ 하게 되는 악순환을 겪게 됩니다. 그럼, 이 불행한 공간인 ‘회사’를 행복한 공간으로 바꾸는 방법은 없을까요? Happy Workers, 행복한 직장을 꿈꾸는 IT회사들시스코(Cisco)는 전세계의 네트워크를 책임지고 있다고 해도 과언이 아닌 회사죠. 그런데, 시스코의 제품과 기술력보다 더 주목할 부분은 엄청난 횟수의 M&amp;A를 통해 성장해 왔다는 겁니다. (한 해 동안 23건의 인수합병을 했던 적도 있다.) 대부분의 회사들이 M&amp;A후에 인수 업체의 인력이 회사를 떠나거나, 조직간 불화로 인해 실패하는 경우가 많습니다. 그렇지만, 시스코는 M&amp;A 사례는 대부분 성공적이었고, 놀라운 것은 실리콘밸리의 평균 이직률이 30%이고, 인수합병된 회사들은 33%의 직원이 1년 이내 회사를 떠나는데 비해, 시스코의 평균 이직률은 가장 높았던 경우에도 10%를 넘지 않았고, 인수합병된 기업의 종업원의 평균 이직률은 2% 정도에 불과했던 것이죠. [^3] 이것은 시스코가 떠나고 싶지 않은 직장이라는 것, 인수합병된 회사의 인력들이 지속적으로 존재 가치를 찾을 수 있는 일을 사내에서 수행할 수 있었다는 걸 의미합니다. 실제로 시스코의 인수합병 과정은 상당히 신속하게 이뤄지는데, 이는 인수대상 기업 직원들의 불안감을 없애고, 이들에게 주어진 새로운 비전을 재빨리 인식시키기 위한 것이기도 합니다. 시스코의 교육 프로그램, 복지와 관련된 이야기는 따로 드리지 않아도 될 겁니다. 시스코의 모든 전략의 핵심에는 ‘사람’이 있다고들 하니까요. IT업계에서 낮은 이직률을 보이는게 쉽지 않은 일인 만큼, 지인 추천 입사율이 90%에 달하는 회사가 있다는 것도 말이 안되는데요. ‘카카오’가 그 어려운 걸 해냈습니다. 카카오 임직원들의 근무만족도는 대기업 평균보다도 월등히 높고, 업계 평균의 2배에 가깝습니다. 카카오의 개발자들이 언급하는 카카오의 장점은 ‘수평적인 커뮤니케이션’과 ‘성장가능성’ 등 여러가지가 있지만, 가장 중요한 점은 회사에 출근하는 것이 ‘재미’있다는 것, 무언가 새로운 일이 일어날 것을 ‘기대’하게 되는 것일 겁니다. /* 재밌게 일한다니, 그런 회사가 존재한다면 게임 회사 밖에 없다고 생각했다. (출처:카카오) IT기업이 가진 가장 큰 장점은 조직이 상대적으로 젊다는 겁니다. 시장과 기술이 변하는 속도에 맞추려면, 기업문화 또한 유연하게 움직이지 않을 수 없죠. 그래서, 카카오는 다음과 합병 이후에 TF를 구성해 10개의 일하는 원칙을 만들었습니다. /* 카카오의 ‘일하는 방식’을 보면, 신뢰를 기반으로 충돌해도 된다고 말한다.(출처:카카오) 여기에는 직급과 직책을 떠나 수평적인 관계, 협업하는 방법, 그리고, 서로의 성장을 독려하기 위한 카카오의 핵심가치가 녹아있습니다. 물론, 어떤 면에서 수평적인 조직은 의사결정이 느려지고, 문제 해결에 오랜 시간이 걸릴 수도 있습니다. 그렇지만, 카카오는 서로의 다름을 인정하고, 뜨겁게 토론하는 문화 속에서 직원 개인이 단순한 부품이 아니라 ‘존재 가치’가 있는 구성원인 것을 인식하도록 하고 있습니다. IT회사에서 누군가 내가 작성한 코드에 대해 비평하는 것을 들었을 때, ‘분노’가 1차적인 감정으로 느껴지는 회사가 있고, ‘감사’의 마음이 먼저드는 회사가 있습니다. 당연히 카카오에서는 서로를 성장시켜주는 ‘감사’가 바탕에 있다고 생각이 들어요. 매일매일 출근하면 내가 만든 것을 누군가에게 보여주고 싶다면, 얼마나 출근이 즐거운 일일까요? 그리고, 내가 만든 SW가 조립된 레고 로봇들처럼 고객들의 눈 앞에 있다는 것만큼 행복한 일이 없을 겁니다. 그리고, 최악의 IT회사는 내가 작성한 코드에 대해 어느 누구도 관심도 없는 곳이죠. 이런 곳에서는 형식적인 검토 과정만 존재할 뿐, 결함은 없지만 부족한 기능의 코드는 어느새 완성된 SW의 일부가 되어있게 되겠죠. 카카오처럼 다양한 시도를 통해 행복한 개발자들을 만들어 나가는 IT회사가 많아지길 바래봅니다. 다시 한 번 말씀드리지만, IT기업의 핵심은 ‘사람’입니다. [^1]: 댄 애리얼리 교수 테드 강연 [^2]: 미국 심리학회는 미국인들의 스트레스는 불확실한 국가의 미래 때문일 거라고도 분석한다. [^3]: How to Think Like the World’s Greatest Masters of M&amp;A,McGraw-Hill Inc, NY, 2001","categories":[],"tags":[{"name":"happy","slug":"happy","permalink":"http://www.devpools.kr/tags/happy/"},{"name":"developer","slug":"developer","permalink":"http://www.devpools.kr/tags/developer/"},{"name":"worker","slug":"worker","permalink":"http://www.devpools.kr/tags/worker/"},{"name":"devpools","slug":"devpools","permalink":"http://www.devpools.kr/tags/devpools/"}]},{"title":"IT기업에서 HR은 왜 중요한가?","slug":"2019-02-01-it_hr_important","date":"2018-02-01T00:00:00.000Z","updated":"2018-05-28T10:55:15.937Z","comments":true,"path":"2018/02/01/2019-02-01-it_hr_important/","link":"","permalink":"http://www.devpools.kr/2018/02/01/2019-02-01-it_hr_important/","excerpt":"","text":"IT기업에서 HR은 왜 중요한가?Facebook이나 Google과 같은 글로벌 IT기업 뿐만 아니라 작은 규모의 스타트업일지라도 자신만의 특색을 갖춘 기업문화를 갖고 있습니다. 예를 들면 출퇴근이 자유롭거나, 재택근무를 선택할 수도 있고, 자신이 원하는 프로젝트팀을 지원해서 업무를 선택할 수 있기도 합니다. 물론 기업의 제품이나 서비스, 혹은 사회기여(CSR)가 기업문화의 일부를 보여줄 수도 있습니다. 그렇지만, 기업문화의 본체는 채용되는 과정부터 업무 배정, 근무 환경과 협업, 역량개발, 평과, 승진, 퇴직에 이르는 이 모든 LifeCycle에서 드러나게 됩니다. 특히, IT기업에서 HR이 기업문화의 대변자로 가장 중요하게 여겨지는 이유는 ‘설비’와 ‘자재’, ‘품질’ 등이 중요시되는 제조업과 달리 ‘사람’이 차별화되는 기술역량의 실체이고, 제품과 서비스를 만들어내는 살아있는 설비이기 때문입니다. 이것에 대한 근거는 대기업들이 M&amp;A를 통해 스타트업을 인수했다가, 핵심 인력들이 이탈한 이후에 관련 사업을 포기했던 사례들을 통해 알 수 있습니다. 서로 다른 문화를 가진 조직이 합쳐지는 것은 쉬운 일이 아니죠. , 개성이 강한 개발자들을 이해하지 못하는 채용담당자, 글로벌 협업체계와 Agile이 중요시 되는 개발 프로세스를 모르는 근무환경 담당자, 상대평가와 금전적인 인센티브만으로 동기를 부여하겠다는 평가담당자까지… HR이 제대로 동작하지 않는 IT기업은 사업 규모와 역량을 키워나갈 기회를 알아서 포기하는 것과 다름 없다는 얘기가 여기서 나오는 겁니다. HR이 회사의 미래의 발목을 잡는 것은 이제 IT기업만의 일은 아닌 시대가 되긴 했지만 말입니다. 왜냐구요? 이제 금융회사도 자기들은 IT회사이고, 의료기기제조회사도 자신들은 Tech 기업이고, 커피만드는 회사도 지식기반회사라고 이야기하고 있으니 말입니다. HR이 Agile한 혁신의 발목을 잡는다.글로벌 금융그룹인 ING는 ‘ING’s Agile Transformation’ 의 매킨지 리포트를 통해서 볼 수 있는 것처럼, 2015년 본사 직원 3,500명을 중심으로 조직을 Agile하게 변화시키기 위한 혁신활동을 추진했습니다. ING는 ‘금융 기반의 IT기술회사’가 자신들이 가야 할 방향임을 알았고, 이어 Google이나 Netfilx, Spotify와 같은 IT기업을 방문/벤치마킹하고 나서 큰 충격을 받았습니다. Google의 같이 일할 사람을 직접 선택하고 거부할 수 있는 Peer-to-Peer 채용방식부터 부서간의 커뮤니케이션 단절이 없이 협업할 수 있는 문화, 2~3주만에 측정되고 변경되는 목표관리방법을 보면서, IT조직을 시작으로 전사적인 변화가 필요하다는 걸 실감했죠. 그래서, ING는 전체 직원을 대상으로 Agile한 변화에 대해 알리고, Tribe와 Squad로 구성된 조직으로 변화했습니다. 실제 이 변화과정에서 모든 직원들에게 새로운 직무를 선택할 수 있도록 했고, 40%의 인력이 새로운 업무를 담당하게 되었습니다. 그리고, 물론 변화의 속도를 따라오지 못한 직원들은 회사를 떠나기도 했을 겁니다. 이런 변화를 통해서 ING는 새로운 상품 출시의 시기를 획기적으로 단축했고, 분기 단위로 회사의 전략방향을 신속하게 바꿀 수 있는 체계를 만들었습니다. 우리가 여기서 주목할 점은 왜 전통적인 기업이 Agile을 적용할까 하는 점이 아니라, 왜 조직의 구성부터 바꾸었는가 하는 점입니다. Agile의 핵심은 지속적인 개선과 측정을 위한 프로세스가 아니라, Agile의 철학과 가치관을 이해하는데서 시작합니다. 새로운 시도와 실패가 장려되고, 문제 해결을 위한 협업이 일상화되어야 합니다. 그러기 위해서는 결국 ‘조직’이 바뀌어야 할 수 밖엔 없습니다. 그런데, 문제는 조직을 바꾼다 해도 ‘조직문화’가 이것을 뒷받침해주지 못하면 ‘자리바꿈’ 밖에는 될 수 없죠. 그래서, ING는 Agile 문화를 이해하지 못하는 본사 직원들을 내보낼 수 밖에 없었던 겁니다. 결정적인 이유 중의 하나는 Agile한 프로세스는 1~2주 안에도 새로운 의사결정과 실패 공유, 신규 투자 등이 빈번히 일어나고, 비즈니스상 중요한 의사결정도 반 년 이상 걸리던 것이 1달도 안되어 진행될 수 있습니다. 그런데, HR은 기본적으로 채용제도 변화는 3년 단위로, 새로운 인센티브 제도는 2년 단위로 변경되고 가장 짧은 프로세스 혁신활동도 1년 미만의 활동은 찾아보기 어렵죠. 조직의 Agile한 변화를 HR은 전혀 따라오지 못하는 겁니다. 그래서, HR이 ‘조직문화’를 대변하고, HR이 IT기업의 핵심경쟁력이 되어야함에도 불구하고, HR은 결국 조직 전체의 혁신의 발목을 잡게 되는 겁니다.","categories":[],"tags":[{"name":"devpools","slug":"devpools","permalink":"http://www.devpools.kr/tags/devpools/"},{"name":"Agile","slug":"Agile","permalink":"http://www.devpools.kr/tags/Agile/"},{"name":"HR","slug":"HR","permalink":"http://www.devpools.kr/tags/HR/"}]},{"title":"기업의 CSR vs CSV","slug":"2019-01-09-CSV","date":"2018-01-09T00:00:20.000Z","updated":"2018-05-28T10:57:44.206Z","comments":true,"path":"2018/01/09/2019-01-09-CSV/","link":"","permalink":"http://www.devpools.kr/2018/01/09/2019-01-09-CSV/","excerpt":"","text":"CJ는왜 중소기업과의 동반성장에 집중했을까?누구나 한 번은 들어봄직한 중소기업 브랜드가 있죠. 내용물이 새어나오지 않는 밀폐용기 브랜드인 락앤락, 내구성 강한 다이아몬드 코팅으로 유명한 주방기구 브랜드 해피콜 말입니다. 최근 홈쇼핑 채널을 보면, 이 제품들이 해외 주방기구 전시회의 메인 부스를 차지하고 있는 장면들도 심심찮게 볼 수 있습니다. 이와 같이 훌륭한 제품 기술력을 보유하고 있는 국내 중소기업들이 글로벌 시장에서도 성공할 수 있었던 이면에는 CJ오쇼핑의 상생 전략이 숨어있던 것 알고 계신가요? * CJ 오쇼핑이 해외 Hit 상품으로성공시킨 중소 브랜드 (출처 : CJ오쇼핑) CJ오쇼핑은 자사 홈쇼핑 플랫폼이 진출해 있는 지역에 글로벌 상품 소싱 자회사인 CJ IMC를 설립, 2004년부터 우수 중소기업 상품의 해외 진출(중국, 베트남, 일본 등 11개국)을 지원해 왔습니다. 협력사의 상품이 해외진출을 하고자 하는 경우 수출, 통관들의 무역실무를 지원하는 방식이죠. 이를 위해 CJ오쇼핑 본사에서는 동반성장사무국을 통해 우수 중소브랜드를 지속 발굴하고 있습니다. 심지어 우수 농가와 중소기업을 대상으로는 수수료를 받지 않고, TV방송을 진행하여 국내 판로를 개척해 주기도 합니다. 이런 활동은 일반적으로 재능 기부나 임직원들의 불우이웃 돕기와 같은 기업의 사회적 책임(CSR, Corporate Social Responsibility) 활동과는 성격이 다소 다릅니다. CSR은 기업이 벌어들인 이익을 사회에 환원한다는 의미로 ‘자선활동’으로 인식되는 경향이 있죠. 그런 반면, CJ오쇼핑의 중소기업과의 동반 성장/상생 프로그램은 우수한 상품을 발굴하여 판매를 촉진, 매출 증가와 브랜드를 글로벌 쇼핑 플랫폼으로 성장시키는 투입대비 사회/경제적 가치를 동시에 높여주는 경영전략이라고 볼 수 있습니다. 기업의 미래 성장과 사회적 책임을 같이하는CSV는 무엇일까?CJ오쇼핑의 이런 경영전략을 설명해주는 경제용어가 있습니다. 공유가치창출(CSV, Creating Shared Value)는 경제/사회적 조건을 개선시키면서 동시에 비즈니스 핵심 경쟁력을 강화하는 일견의 기업 정책/경영활동을 말합니다. (출처 :Wiki), 2006년 하버드 비즈니스 리뷰를 통해 마이클 포터가 발표하면서 등장한 이 개념은 이미 많은 기업들이 적극적으로 실행하고 있는 전략이기도 합니다. 기업의 사회적 책임만을 다루는 CSR과 CSV는 ‘비즈니스와의 관련성’이 있느냐 없느냐가 가장 큰 차이점입니다. CSR은 사회적 공감대를 기반으로 하는 자선활동과 캠페인 등으로, 확장된 개념으로는 기업이 진출하고 있는 시장에서 발생하는 사회문제와 이슈를 해결하는데 초점을 맞추고 있습니다. 더구나, CSR은 기부/후원을 위한 한정적인 예산 내에서 이뤄지고, 때로는 여론과 사회 정서의 문제로 기업활동을 오히려 위축시키는 등 제약이 많았습니다. 그러나, CSV는 기업의 경쟁력을 강화시키고, 사회적 가치를 더 높이는 활동을 결합하는 방법입니다. 마이클 포터는 논문에서 공정무역의 사례를 들어 이 차이를 설명하죠. 가난한 농부가 재배한 농작물을 제 값을 받도록 해주는 공정무역은 CSR 관점에서 빈곤문제를 도와주는 선행이지만, 이것은 제한된 자원을 재분배하는 것일 뿐 파이 자체를 키워주지는 못한다고 이야기 합니다. 반면, CSV는 농법을 개선하고, 농부를 위한 지역단체 협력/지원 체계를 구축하여 줌으로써 지속 가능한 성장과 소득 증가를 담보해주는 것이라고 설명하죠. * 20년간 780만명의학생을 170개국에서 교육, 엔지니어로 성장시킨 Cisco (출처 : Cisco 홈페이지) 이렇게 기업의 사회적 책임을 다하면서, 전략적인 핵심자원을 확보하는 미래가치를 높인 대표적인 사례로는 Cisco가 있습니다. Cisco의 핵심사업은 네트워크 장비를 다루는 하드웨어부터 가상화/클라우드까지 다양하지만, 글로벌 시장에서 지속적인 성장을 유지하기 위해서 넘어야 할 중요한 문제가 하나 있었습니다. Cisco의 네트워크 장비와 제품/서비스들은 고객이 직접 설치/관리하기에는 전문지식이 필요한 경우가 대부분이었죠. 새로운 시장을 개척하더라도 제품을 판매/관리하는 네트워크 전문가와 엔지니어가 반드시 필요하다는 뜻이었습니다. 이러한 문제의 해답으로 Cisco는 Cisco Networking Academy라는 프로그램을 만듭니다. NGO와 UN산하 기관들과 파트너십을 맺고, 클라우드 서비스 형태로 제공되는 교육 서비스는 전문인력 부족과 신규시장 진출의 두 마리 토끼를 잡는데 최적의 방법이었습니다. 아카데미가 설립되는 지역을 Cisco가 진출하지 못한 곳을 우선적으로 선정하고, 빈곤층 청소년에게 교육을 제공함으로써 잠재시장에 부족한 전문가 양성과 제품 판매/점유율을 높였던 것이죠. 1997년부터 20년간 16개 언어로, 2만명에 달하는 Cisco의 훈련된 강사들이 투입된 이 프로그램은 780만명이 거쳐갔고, 빈곤한 지역사회에 IT전문가로서 안정적인 수입을 가지도록 했습니다. CSV는 오래된 개념, 그렇지만 IT기업에겐 새로운 기회Cisco의 사례에서 알 수 있는 것처럼, IT기업에게 ‘지식 기반의 역량을 확대하는 CSV’는 주목할 만한 기회가 아닐 수 없습니다. 왜냐하면, 모든 IT서비스와 솔루션의 지상 목표는 기업과 개인에게 없어서는 안되는 필수재로서 비즈니스와 삶의 영역에 자리잡는 것입니다. 그리고, 이 CSV는 자사의 서비스가 개인에겐 중요한 소득의 수단이 되고, 그 역량은 기업과 개인에게 의미있는 자산이 된다는 점에서 IT기업에 딱 들어맞는 것이니까요.이 모델은 어떤 측면에서는 ‘다단계’와 ‘피라미드’ 마케팅과 다르지 않아 보입니다. 그렇지만, Amway가 뛰어난 품질의 제품을 공급하고, 삶의 수준을 향상시키는 브랜드로 평가받는 것과 같이, 결국 서비스가 제공하는 가치가 평가 결과로 나타나겠죠. 실제로 모든 IT기업에게 이런 CSV에 대한 기회는 열려있습니다. Adobe가 운영하는 디자인 학교, Google Map이 제공하는 지역전문가 교육 같은 다양한 아이디어가 현실이 된다면 어떨까요? 미래의 직업은 IT플랫폼을 이용하지 않을 수 없을 거란 전망이 많습니다. 심지어 예술가들조차 종이 위가 아닌 화면을 캔버스로 이용하는 것을 거북해 하지 않고 있거든요. IT서비스와 솔루션을 개발하는 단계에서부터 ‘어떻게 하면 우리 서비스가 고객들의 지식 기반 역량을 향상시키고, 필수요소로 자리 잡도록 하는 가치’를 제공할 수 있을지 고민해 보시길 권합니다.","categories":[],"tags":[{"name":"devpools","slug":"devpools","permalink":"http://www.devpools.kr/tags/devpools/"},{"name":"CSR","slug":"CSR","permalink":"http://www.devpools.kr/tags/CSR/"},{"name":"CSV","slug":"CSV","permalink":"http://www.devpools.kr/tags/CSV/"},{"name":"Cisco","slug":"Cisco","permalink":"http://www.devpools.kr/tags/Cisco/"},{"name":"CNA","slug":"CNA","permalink":"http://www.devpools.kr/tags/CNA/"}]},{"title":"[2018-01-08] 2018년 1월 깃헙 트렌드 - Rust와 웹 어셈블리의 혁신적인 도발","slug":"2018-01-08-2018년-1월-깃헙-트렌드","date":"2018-01-08T08:47:43.000Z","updated":"2018-01-10T11:30:04.457Z","comments":true,"path":"2018/01/08/2018-01-08-2018년-1월-깃헙-트렌드/","link":"","permalink":"http://www.devpools.kr/2018/01/08/2018-01-08-2018년-1월-깃헙-트렌드/","excerpt":"","text":"2018년 새해가 밝았다. 올해는 어떤 포스팅을 더 할 수 있을지 고민해 보았다. 물론 언제나 나의 계획과 이룰 수 있는데에는 한계가 있다. 올 한해 하고 싶은 포스팅 가방끈 짧은 개발자의 딥러닝 시리즈 프론트엔드 개발자가 배워야 하는 기반 기술 총망라. ( HTTP1.0 부터 ES2018까지. 아 이건 위키가 더 좋을까. 총망라 라니.. 이런 아재 감각.) 머리속에 그리는 리액트 심화 가즈아~ 깃헙 트렌드 격주 발행 ( 가능할 것인가?!! ) 1월의 깃헙 트렌드1월 한달간 깃헙에 올라온 프로젝트 중 많은 호응을 얻었던 프로젝트들을 정리해 보았다. 특이하게 디버깅에 관련된 프로젝트들이 많이 올라 왔다. 30 seconds of code 는 매우 유용한 자바스크립트 코드를 확인해 볼 수 있다. x64dbg github-profile-summary 30-seconds-of-code wechat_jump_game parcel jadx coding-interview-university bytecode-viewer tensorflow boardgame.io 이 중에서 yew라는 rust 기반의 프로젝트를 살펴보자. yewyew는 rust 기반의 웹 프레임 워크를 표방하고 있다. rustrust 라고 하면 기본적으로 어려운 언어. 파이어폭스의 다음버전 퀀텀의 기반. 혁신적인 속도 등의 키워드로 개발자들에게 알려져 있다. 물론 비슷한 시기에 나와서 더 성공적으로 론칭된 go의 경우는 구글의 버프를 받고 무럭 무럭 개발자 커뮤니티가 성장하고 있다. 그에 비해 rust 는 많이 외면 받아 왔는데 그 이유로는 어려운 문맥과 더불어 타게팅된 어플리케이션을 찾기가 힘들었다. 그 와중에 우리가 들어 봤던 가장 좋은 소식중에 하나는 아마도 servo 일 것이고 그 servo가 차기 파이어 폭스 퀀텀의 핵심이 될 것이다.(아니 이미 서브 프로젝트들은 퀀텀에 장착되기 시작했다.) 그런데 퀀텀은 이미 개발자들 사이에 굉장히 화제가 되었고 속도가 많이 개선되었다는 이야기들이 오가기 시작했다. 다만 이전 플러그인들 호환 문제 때문에 파이어 폭스의 미래는 여전히 밝지 않지만 모두에게 rust === ‘고성능이였지’ 공식의 향수를 일으키기에 충분했다. 그러던 와중에 1월의 프로젝트중에 yew가 눈에 띄었다. 그래서 한 번 살펴 보았는데, 프론트엔트 개발자들에게는 개발에 대한 패러다임을 바꿀 수 있는 어떤 무언가가 보여서 한 번 나눠볼까 한다. React like Virtural DOMRust 내부에 DOM 코드를 작성하는 형식은 리액트의 Virtual DOM을 따라 했는데, 컴파일을 하고 서비스가 로딩이 된 후 사이트에 접속을 하면 react 처럼 virtual dom을 만들고 렌더링을 한다.네트워크를 통해 전송되는 html은 다음과 같다. 소스코드 - To Do MVC HTML 코드1234567891011&lt;!doctype html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;Yew • TodoMVC&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt; &lt;/head&gt; &lt;body&gt; &lt;script src=\"js/app.js\"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 하지만 DOM의 경우는 다음 그림처럼 렌더링이 되어 있다. Web Assembly자바 스크립트는 웹 어셈블리(혹은 Asm.js)로 작성되어서 떨어진다. Asm.js는 브라우저가 이해하기 쉬운 기계어 포맷에 가까운 자바스크립트이고, 웹 어셈블리는 이전에 블로그에서 언급한 적이 있다.링크 : WebAssembly - hello world 어셈블리를 브라우저에 올려보자말 그대로 브라우저에서 돌아가는 기계어다.아무래도 ???! 이게 뭐지? 하는 느낌으로 지금쯤 읽고 있는 독자들이 많으리라.코드를 보고 이야기 하자. 백타가 불여일견먼저 TO DO MVC 코드는 다음과 같다. 맞다 . 여러분이 아는 그 To Do MVC 말이다. ToDoMVC 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105// 중략 // 모델을 정의한다.#[derive(Serialize, Deserialize)]struct Model &#123; entries: Vec&lt;Entry&gt;, filter: Filter, value: String, edit_value: String,&#125;#[derive(Serialize, Deserialize)]struct Entry &#123; description: String, completed: bool, editing: bool,&#125;//중략 // update 함수는 Add,Edit 등등의 명령어를 받으면 모델을 변경한다.fn update(context: &amp;mut Context, model: &amp;mut Model, msg: Msg) &#123; match msg &#123; Msg::Add =&gt; &#123; let entry = Entry &#123; description: model.value.clone(), completed: false, editing: false, &#125;; model.entries.push(entry); model.value = \"\".to_string(); &#125; Msg::Edit(idx) =&gt; &#123; let edit_value = model.edit_value.clone(); model.complete_edit(idx, edit_value); model.edit_value = \"\".to_string(); &#125; Msg::Update(val) =&gt; &#123; println!(\"Input: &#123;&#125;\", val); model.value = val; &#125; Msg::UpdateEdit(val) =&gt; &#123; println!(\"Input: &#123;&#125;\", val); model.edit_value = val; &#125; Msg::Remove(idx) =&gt; &#123; model.remove(idx); &#125; Msg::SetFilter(filter) =&gt; &#123; model.filter = filter; &#125; Msg::ToggleEdit(idx) =&gt; &#123; model.toggle_edit(idx); &#125; Msg::ToggleAll =&gt; &#123; let status = !model.is_all_completed(); model.toggle_all(status); &#125; Msg::Toggle(idx) =&gt; &#123; model.toggle(idx); &#125; Msg::ClearCompleted =&gt; &#123; model.clear_completed(); &#125; Msg::Nope =&gt; &#123;&#125; &#125; context.storage.store(KEY, Json(&amp;model));&#125;//중략// view 는 브라우저에 렌더링한다. 변경에 따른 바인딩과 이벤트의 바인등을 정의한다.fn view(model: &amp;Model) -&gt; Html&lt;Msg&gt; &#123; html! &#123; &lt;div class=\"todomvc-wrapper\",&gt; &lt;section class=\"todoapp\",&gt; &lt;header class=\"header\",&gt; &lt;h1&gt;&#123; \"todos\" &#125;&lt;/h1&gt; &#123; view_input(&amp;model) &#125; &lt;/header&gt; &lt;section class=\"main\",&gt; &lt;input class=\"toggle-all\", type=\"checkbox\", checked=model.is_all_completed(), onclick=|_| Msg::ToggleAll, /&gt; &lt;ul class=\"todo-list\",&gt; &#123; for model.entries.iter().filter(|e| model.filter.fit(e)).enumerate().map(view_entry) &#125; &lt;/ul&gt; &lt;/section&gt; &lt;footer class=\"footer\",&gt; &lt;span class=\"todo-count\",&gt; &lt;strong&gt;&#123; model.total() &#125;&lt;/strong&gt; &#123; \" item(s) left\" &#125; &lt;/span&gt; &lt;ul class=\"filters\",&gt; &#123; for Filter::iter().map(|flt| view_filter(&amp;model, flt)) &#125; &lt;/ul&gt; &lt;button class=\"clear-completed\", onclick=|_| Msg::ClearCompleted,&gt; &#123; format!(\"Clear completed (&#123;&#125;)\", model.total_completed()) &#125; &lt;/button&gt; &lt;/footer&gt; &lt;/section&gt; &lt;footer class=\"info\",&gt; &lt;p&gt;&#123; \"Double-click to edit a todo\" &#125;&lt;/p&gt; &lt;p&gt;&#123; \"Written by \" &#125;&lt;a href=\"https://github.com/DenisKolodin/\", target=\"_blank\",&gt;&#123; \"Denis Kolodin\" &#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&#123; \"Part of \" &#125;&lt;a href=\"http://todomvc.com/\", target=\"_blank\",&gt;&#123; \"TodoMVC\" &#125;&lt;/a&gt;&lt;/p&gt; &lt;/footer&gt; &lt;/div&gt; &#125;&#125; 코드는 생각보다 어렵지 않다. Gorilla 같은 Go의 웹 프레임워크를 처음 볼때와 흡사하다. 다만 다른 부분은 view안에 JSX 처럼 코드 스니펫을 사용한다는 것이다. JSX 처럼 컴포넌트화 하지는 않는 것 같다.struct는 모델을 정의하고 이벤트를 처리할 함수를 update로 정의한 후에 view 에서 렌더링을 하고 있다. 이렇게 코드를 작성하고 실행을 시키고 나면, 다음과 같이 ToDoMVC 앱이 뜨는 것이다. 이것이 정확히 어떻게 작동하게 되는지 app.js를 알아보자. toggleEdit이라는 이벤트의 아래 코드는 다음과 같이 바뀐다. cargo-web이런 극적인 코드가 가능해 지는데에는 cargo-web 이라는 프로젝트가 뒤에 있다.링크 : cargo web cargo는 rust 에서 사용되는 패키지 매니저인데 subcommand라는 개념으로 패키지들을 관리한다.그 중에 이 cargo web이라는 프로젝트가 rust 코드를 asm.js 록은 웹어셈블리로 변환해 주는 역할을 하고 있다. 설치스크립트Mac OS 기준으로 아래와 같은 명령어를 사용해서 설치를 했다. emscripten 설치 1234567891011$curl -O https://s3.amazonaws.com/mozilla-games/emscripten/releases/emsdk-portable.tar.gz$tar -xzf emsdk-portable.tar.gz$source ./emsdk_portable/emsdk_env.sh$emsdk install sdk-incoming-64bit$emsdk activate sdk-incoming-64bit``` 설치하다 openssl 관련해서 에러가 날 수가 있는데, 그럴 경우에는 OPENSSL_DIR을 제대로 지정해 주면 에러가 사라진다. 2. rust 설치```cmd$curl https://sh.rustup.rs -sSf | sh cargo 설치 1$curl -sSf https://static.rust-lang.org/rustup.sh | sh cargo web 설치 1$cargo install cargo-web yew 설치 12$ cargo install cargo-web$ rustup target add asmjs-unknown-emscripten 실행프로젝트에 데모가 존재한다.깃으로 클론을 받자1$ git clone https://github.com/DenisKolodin/yew 프로젝트에 들어가서 해당 샘플폴더(Cargo.toml이 있는 곳)에서 cargo web start를 실행하면 프로젝트가 시작이 된다. 기본포트는 8000번을 사용한다.1$cargo web start 링크 모음관련 링크는 다음과 같다. rust servo cargo-web yew asm-dom","categories":[],"tags":[{"name":"github, github-trend, tech-trend","slug":"github-github-trend-tech-trend","permalink":"http://www.devpools.kr/tags/github-github-trend-tech-trend/"}]},{"title":"[2017-11-27] 11월 깃헙 트렌드","slug":"2017-11-27-11월-깃헙-트렌드","date":"2017-11-27T03:42:39.000Z","updated":"2017-12-13T09:22:32.357Z","comments":true,"path":"2017/11/27/2017-11-27-11월-깃헙-트렌드/","link":"","permalink":"http://www.devpools.kr/2017/11/27/2017-11-27-11월-깃헙-트렌드/","excerpt":"","text":"11월 한달간 깃헙에 올라온 프로젝트 중 많은 호응을 얻었던 프로젝트들을 정리해 보았다.여전히 자바스크립트와 딥러닝 쪽 트렌드가 초 강세를 보이고 있다. awesome 시리즈 같은 curation 프로젝트도 여전히 최상위권에 존재하는 중.(curation 프로젝트라 함은 좋은 팁과 사이트들을 집합해 놓을 것을 의미함) 11월 한달(27일 기준) 가장 핫한 프로젝트 10선 git-flight-rules nodebestpractices charts Front-End-Checklist tensorflow* state-of-the-art-result-for-machine-learning-problems awesome ant-design-pro luxon* vue git-flight-rules링크 : git-flight-rules 이 프로젝트는 작명도 훌륭하지만 더 훌륭한 것은 내용이다.예를 들어서 “특정한 리비전으로 파일을 리버트 하고 싶을때에는 어떻게 하지?” 라는 질문 형태의 목록들을 가지고 있다.(우리가 궁금해 하는 바로 그것! 느낌!)예를 들어 질문 목록을 확인해 보면 아래 그림과 같다. 해석해 보면 방금 내가 한 커밋은 뭐였지? 커밋 메세지를 잘못 입력했을 때 커밋할 때 이메일과 이름을 잘못 썼다.* 커밋에서 파일 하나를 제외하고 싶을 때 등등으로 실제로 필요한 일상의 개발 노하우가 잘 나타나 있다물론 한글이 아니라 좀 답답하기는 한데 누군가가 한글로 금방 번역해서 올려 줄 것으로 예상된다. Node.js Best Practices최근 팀에서 코드리뷰를 하다가 자바스크립트에서 세미콜론(;)을 붙이는것을 표준으로 할 것인지 아니면 붙이지 않는 것을 표준으로 할 것인지에 대한 논쟁이 일어났다.당연히 최근에 나온것이 세미콜론이 없어도 해석할 수 있다이므로 없애는 것에 한표를 던졌는데, 지지를 철회해야 할 지도 모르겠다. 링크 : Node.js Best Practice 이 프로젝트는 Node.js 의 BP들을 잘 모아둔 curation 사이트다.많은 사람들이 Node.js에서 신경써야할 아키텍처와 패턴을 잘 몰라하는데 이 프로젝트는 꽤나 많은 해답을 줄 수 있을 것으로 보인다. 예를 들어 1.3의 “공용(common) 으로 사용하는 자바스크립트는 npm package로 만들어라” 부분 같은 것은 Node 패키지의 기본 컨셉을 담고 있고 2.1의 “에러 핸들링은 Async와 Await을 사용해라” 같은 부분도 최근 코드리뷰를 하면서 팀원들 끼리 옥신 각신 했던 부분인데 왜 그렇게 해야하는지도 잘 설명하고 있는것이 포인트. (콜백 에러 핸들링이 콜백지옥으로 빠지는 것을 Async와 Await을 사용하면 잘 해결 되는 것을 이야기 하고 있음.) 프라페 chartschartJS 가 아님. 다른 프로젝트에 디펜던시가 없는 간단한 차트 프로젝트.프로젝트를 찬찬히 들여다 보면 깃헙의 히트맵과 프로그레스 바를 만들어 둔 것이 인상적이다. 관련 블로그에도 해당 내용이 적혀 있을 정도. 프로젝트 링크 : charts 깃헙블로그 링크 : so we decided to create our own charts 블로그를 읽다가 보면 c3.js를 사용하다가 스타을 새로 준다던지, 새로운 고객들의 요구에 응하려다가 자체적으로 개발하기로 한 과정들이 나와 있고 DOM을 조작하는데 SnapSVG 나 jquery 없이 만들기 위해 어떤 고려들을 했는지, CSS3 대신에 고려할 것드을 어떻게 확인했는지 등의 이야기가 재미있게 기술되어 있다.( 블로그가 훨씬 흥미로운 내용이 많은 듯 .) jquery를 바닐라도 대체할 때 참조할 수 있는 You might not need jQuery라는 사이트도 참조할 만하다. ( 하지만 사이트를 보다보면 jquery 없이 어떻게 개발하지? 라는 생각이 들지도…) luxon타임스탬프 혹은 Date 라이브러리는 언제나 어렵다. 특히 MSA 같은 이기종간의 데이터를 주고 받는 요즘에 점점 중요해 지지만 매번 어렵기는 마찬가지.이 문제를 해결하기 위한 가장 스마트한 방법은 그동안 모멘트 프로젝트 였는데, 오픈 소스 내부 컨트리뷰터 중에서 모멘트의 구조를 바꾸려고 하다가 프로젝트를 새로 만들었는데 사람들의 주목을 많이 받았습니다. 링크1: 모멘트 프로젝트 링크2: luxon 프로젝트 몇가지 눈에 띄는 다른 점을 코드를 통해 살펴보자. 가장 눈에 띄는 변화는 immutable 의 적용이다.(immutable 이란 객체의 값이 변경되지 않는 것을 의미 하는 것으로 map 같은 객체가 변경이 되는 코드가 들어가면 리턴 값으로 새로운 객체를 반환해 주는 특징을 가지고 있다.)immutable.js 가 가장 대표적인 라이브러리이다. 일단 모멘트의 코드부터 살펴보자 123var m1 = moment();var m2 = m1.add(1, ‘hours’);m1.valueOf() === m2.valueOf(); //=&gt; true 1시간을 더 했지만 m1 과 m2의 값이 같다니.immutable 을 적용한 luxon의 코드는 다음과 같다. 123var d1 = DateTime.local();var d2 = d1.plus(&#123; hours: 1 &#125;);d1.valueOf() === d2.valueOf(); //=&gt; false d2의 값이 변경되었다. 이렇게 함으로 의도적으로 다른 값을 할당하기 위한 객체의 deep copy를 수행할 필요가 없어진다. 그 외의 주요 변화는 다음과 같다. 월(Month)의 인덱스가 1부터 시작을 한다.(Moment 와 네이티브 자바스크립트 Date 는 0부터) 로칼라이제이션과 타임존이 네이티브 API로 변경된다. (그 전에는 라이브러리에 포함되어 있었음.) Duration과 Interval 타입을 전부 가진다. 참고 : 모멘트 개발자가 알아둬야할 부분. 맺으며이번에 커버 되지는 않았지만 딥러닝쪽 tensorflow 와 state of art 시리즈를 볼 때 지속적으로 딥러닝 프레임워크 쪽은 들여다 볼 필요가 있을 것으로 생각이 들고 여전히 프론트 엔드쪽은 강세인데 vue.js 가 깃헙 프로젝트의 순위도 점점 평정해 가는 느낌이 강하다. 추세선으로는 react 를 조만간 뛰어넘을 기세로 보인다. 그리고 현장에서는 이미 vue가 통일을 하는 분위기로 보인다. 아직은 중요한 프로젝트들은 react로 의사 결정이 나지만 내년 하반기에는 바뀌지 않을까?","categories":[],"tags":[]},{"title":"[tip] -도커로 깃랩을 설치했을때 젠킨스 연결은 어떻게 할 것인가","slug":"tip-도커로-깃랩을-설치했을때-젠킨스-연결은-어떻게-할-것인가","date":"2017-09-14T04:31:23.000Z","updated":"2017-12-13T10:33:37.045Z","comments":true,"path":"2017/09/14/tip-도커로-깃랩을-설치했을때-젠킨스-연결은-어떻게-할-것인가/","link":"","permalink":"http://www.devpools.kr/2017/09/14/tip-도커로-깃랩을-설치했을때-젠킨스-연결은-어떻게-할-것인가/","excerpt":"","text":"깃랩같은 좋은 툴은 언제나 파워풀하지만, 설치가 쉽지않다. 그래서 깃랩을 설정하기가 어려운 부분은 도커가 최근에는 대신하고 있다.그런데, 도커로 설치를 하다보면 CI, CD 환경을 꾸미는 것은 어떻게 해야할지 감이 오지 않을 때가 많다. 도커로 깃랩을 설치하는 것과 관련된 글은 검색을 하면 수십개가 나오고, 젠킨스와 깃랩을 연동하는 부분도 굉장히 많이 나오지만 도커로 설치된 깃랩과 젠킨스 연동을 위한 중요한 링크가 빠져 있다. 중요한 두가지 설정 포인트가 필요하다. ssh 포트 변경된 경우 git 연결~/.ssh/config 파일을 만든다.ServerName, UserName, Port 은 프로젝트에 맞춰 준다.123Host &#123;ServerName&#125; User &#123;UserName&#125; Port &#123;Port&#125; 이후 git 명령어로 프로젝트를 잘 가져오는지 확인하자. 12$git clone ssh://git@server:[port]/url ` git 연결 주소 설정참고로, 퍼블릭키와 프라이빗 키는 이미 잘 설정되어 있을 거라는 전제하에 얘기한다. 링크 : gitlab과 Jenkins연동 위 링크에 대해서 URL을 설정하는 부분만 아래와 같이 바꾸면 잘 해결되는 것을 확인할 수 있다. 이렇게 되고 나면 깃에 자유자재로 업데이트하고 긁어올 수 있음을 알 수 있다. 나머지 CI, CD 옵션은 원하는데로 구성하면 된다.","categories":[{"name":"tip, docker, devops, git","slug":"tip-docker-devops-git","permalink":"http://www.devpools.kr/categories/tip-docker-devops-git/"}],"tags":[]},{"title":"[github]Node.js 기반 헤드리스 브라우저 컨트롤 API - puppeteer","slug":"githubnode-js-기반-헤드리스-브라우저-컨트롤-api-puppeteer","date":"2017-09-14T04:09:55.000Z","updated":"2017-12-13T10:30:31.014Z","comments":true,"path":"2017/09/14/githubnode-js-기반-헤드리스-브라우저-컨트롤-api-puppeteer/","link":"","permalink":"http://www.devpools.kr/2017/09/14/githubnode-js-기반-헤드리스-브라우저-컨트롤-api-puppeteer/","excerpt":"","text":"프로젝트 링크 : https://github.com/GoogleChrome/puppeteer/첫번째 프로젝트는 구글 크롬 프로젝트에서 Headless Chrome Node API 로 내 놓은 퍼펫티어다. 퍼펫이라고 하면 번역하면 인형술사이고 꼭두각시 인형을 다루는 사람을 이야기 한다. 이 프로젝트의 배경부터 이야기 하자면 올해(2017년) 4월 경 구글프로젝트에서는 크롬에 Headless 모드를 추가했다.Headless 브라우저라고 하면 일반적으로 CLI환경에서 브라우저가 시각적으로 보여지지 않고 백그라운드에서 작동할 수 있는 것을 이야기 하는데, 이 전까지 가장 유명한 것은 PhantomJS라는 프로젝트였다. 크롤링을 하고 스크린 샷을 찍어서 다운로드하고 등의 일들을 할 수 있었다. 그래서 데스크탑이 아닌 서버에서 DOM을 읽어야 하는 경우 등에서 많이 사용되고는 했었다. 필자의 경우는 테스트 환경을 꾸밀 수 있지 않을까 하는 기대에 관련된 작업들을 진행해 보았고 관련되어 링크를 남기기도 했다.링크 : 헤드리스 크롬과 selenium2의 조합을 사용해 보자 with node (http://keen.devpools.kr/2017/06/07/about-test/ ) 그런데, 8월 한달 가장 주목받은 프로젝트가 된 이 puppeteer는 Node.js에서 헤드리스 크롬을 사용할 수 있는 API들을 제공하는 것이다. Headless 모드를 발표하자마자 Phantom.JS는 더 이상 개발 안하기로 선언을 한 것과 마찬가지로 Node.js 진영에 새로운 무기가 생겨버린 셈이 되었다 1. 설치를 해보자먼저 프로젝트를 한번 만들어 보자. 12$mkdir puppeteer-project &amp;&amp; cd puppeteer-project$yarn add puppeteer 이렇게 설치를 하고 나면 프로젝트에 index.js 파일을 만든다.. &lt;코드&gt;index.js 12345678910const puppeteer = require(‘puppeteer’);(async () =&gt; &#123; const browser = await puppeteer.launch(); const page = await browser.newPage(); await page.goto(‘http://devpools.kr‘); await page.screenshot(&#123;path: ‘devpools.png’&#125;); browser.close();&#125;)(); 스크린샷을 가져 오는 코드가 작성되었다. 개발바보들 첫 페이지의 스크린 샷을 가져오는 소스 코드를 작성한 이후에 node index.js 명령어를 입력하면 다음과 같은 이미지를 가지고 오는 것을 볼 수 있다. 기본적으로 지정된 이미지 크기는 800*600으로 지정된 듯 하다. 보통 phantomJS 같은 경우는 스크롤을 다 잡아 가던 초반 모습에 비해 메모리 관리를 위한 것인지 이미지 해상도도 그렇게 좋은 거 같지는 않아 보인다. PDF로 Export 하는 기능도 API를 통해 구현이 가능하다. 2. 크롤링을 해 보자.이번엔 find.js 라는 파일을 아래와 같이 만들어 본다. 실제로 이미지와 지금 아래 크롤링 소스는 해당 프로젝트와 내용이 거의 유사하다. 123456789101112131415161718192021222324252627‘use strict’;const puppeteer = require(‘puppeteer’);(async() =&gt; &#123;//브라우저 객체와 페이지 객체를 만들고const browser = await puppeteer.launch();const page = await browser.newPage();// 구글 검색창 방문await page.goto(‘https://google.com‘, &#123;waitUntil: ‘networkidle’&#125;);//개발 바보들에 대한 검색어를 입력하고await page.type(‘devpools’);// 검색버튼을 누르고await page.click(‘input[type=”submit”]’);//검색한 결과의 타이틀을 가져와서// Wait for the results to show upawait page.waitForSelector(‘h3 a’);const links = await page.evaluate(() =&gt; &#123; const anchors = Array.from(document.querySelectorAll(‘h3 a’)); return anchors.map(anchor =&gt; anchor.textContent);&#125;);//콘솔에 출력한다.console.log(links.join(‘\\n’));browser.close();&#125;)(); 소스 코드에 대한 설명은 주석에 달아 둔데로 브라우저 객체와 페이지 객체를 만들고 구글 검색창을 방문해서 개발 바보들에 대한 검색어를 입력하고 검색버튼을 누른 뒤 검색된 결과의 타이틀을 가져와서 콘솔에 출력한다. 그 결과는 다음과 같다. 이 과정 중에 어떤 브라우저의 인터렉션도 필요 없었고 (내부적으로는 크롬 헤드리스 브라우저가 작동을 했지만) 사용자의 경우는 결과만 가져올 수 있다. 맺음말왜 구글은 이런 제품을 내놓고 있는 걸까? 워낙 혁신적인 기업이라 속내를 다 살펴볼 수는 없지만 지속적으로 API를 내놓고 있는 것은 웹의 많은 부분이 자동화로 돌아설 것이고 그 중심에 인공지능이 있지 않을까 하는 생각이 들어 잠시 한번 고민을 해 보았다. 아마도 텐서플로가 조만간 DOM 기반의 러닝 모델을 공개하는 날이 오지 않을까?","categories":[{"name":"github-trend, github","slug":"github-trend-github","permalink":"http://www.devpools.kr/categories/github-trend-github/"}],"tags":[]},{"title":"딥러닝 무식하게 정리해 보기 01","slug":"deeplearning-basic01","date":"2017-09-08T02:44:06.000Z","updated":"2017-12-13T09:32:36.914Z","comments":true,"path":"2017/09/08/deeplearning-basic01/","link":"","permalink":"http://www.devpools.kr/2017/09/08/deeplearning-basic01/","excerpt":"","text":"딥러닝, 인공지능 이야기를 하면 CNN, RNN 같은 알고리즘에 관한 글만 굉장히 많아서 조금 탑뷰에서 바라볼 수 있는 관점에서 전체 기술과 활용처를 분류하고 딥러닝 프레임워크에 대해서 알아 보았다. 딥러닝 프레임워크는 같이 프로젝트를 하고 있는 팀 로자미아 가 같이 정리를 해 주었다. Mabel, Jin, Alex 에게 감사를 드린다. AI 기술의 응용 분야딥러닝은 여러가지 알고리즘을 가지고 있지만 결국 하고자 하는 대부분의 일들이 군집(clustering)과 분류(classification) 라는 관점으로 귀결된다.그에 따라 AI 기술 스택을 분류하는 방법은 여러가지가 있고 활용되는 분야도 다양하지만 아래와 같이 분류를 해보았다.먼저 챗봇과 번역등에 사용되는 NLU등을 사용하는 Conversational AI.두번째는 개와 고양이 구분하기 등에 많이 사용되는 Visual AI 분야.마지막으로는 전통적으로 진행하던 데이타 분석을 하는 Analytic AI. Conversational AI Conversational AI 에는 기본적으로 NLU(Naturla Language Understanding)을 그 근간으로 한다. 오픈 소스중에선 Rasa.ai 같은 프레임워크가 존재하고 오픈 서비스로는 wit.ai 와 api.ai 가 있고 제품으로 유명한 것은 IBM의 conversational 엔진이 유명하다. 일반적인 개발자들이 가장 많이 만나는 것은 페이스북을 가지고 챗봇을 한번 만들어보다가 만나게 되는 것이 NLU 와의 처음 만남이 된다고 볼 수 있다. 이 NLU 엔진은 여러가지 기능을 가지는데 기본적으로 전체의 맥락을 판단하고 키워드를 뽑아내는 게 으뜸된 기능인데 이것을 인텐트와 엔터티라는 업계 용어로 지칭한다.맥락 혹은 화행에는 기본적으로 의도가 들어가 있고 감정이 들어가 있어서 이런 감성을 파악해 내는 데 word2vec doc2vec 같은 툴들이 사용된다. 한글의 경우는 영어와 다른 구조를 가지고 있기 때문에 형태소를 분석해야 하고 mecab-ko 나 은전한잎 같은 툴들이 이용된다. 여기까지는 일반적인 NLU에 대한 이야기만 한 것이고, 챗봇을 위해서는 다이알로그의 룰이 존재하기 마련이라 룰 매니저 혹은 다이알로그 매니저들이 존재한다. 얘룰 들면 페이스북 챗봇을 만들 때 이런 말이 들어오면 이렇게 대답해야지.. 라고 만드는 대화 구성이 그런 역할을 하는 것이다. 이런 다이알로그 개념이 들어가면 한 문장의 문맥이 아닌 전체 문맥을 파악해야하는 기능과 랭킹 시스템을 구축해야 한다. 조금 더 나아가면 보통 STT(Speech To Text), TTS(Text To Speech) 로 알고 있는 음성자동 시스템이랑 연결해서 사용자의 음성을 듣고 텍스트로 변환해 준 뒤에 그것을 구축해 놓은 챗봇 시스템과 연결해 구축하는 작업들이 생겨나고 있다. AI for media 얼굴 인식, 피플 카운팅 등에 사용되는 Face Recognition 과 딥러닝 기반의 Object Recognition 은 미디어들을 통해 사람을 인식하거나 장면등을 파악해서 시스템과 연결하는 일들을 할 때 많이 사용된다. 딥러닝 기반 객체 인식은 보통 CNN 알고리즘으로 유명한데 최근에는 여러가지 알고리즘이 더 들어간 경우가 많고 YOLO Darknet 같은 경우는 인식률과 속도에서 다른 범용 툴을 압도한다.피플 카운팅을 응용하면 히트맵 히트존 등의 기술등으로 확장이 가능하다.OCR 프로그램은 기존에도 존재했던 것들인 많은데, 딥러닝 기반으로 프로젝트들이 변경되고 있다. 구글 tesseract 도 LSTM 알고리즘의 4.0 버전을 테스트 중이다. Analytics기존의 데이터들을 분석하는 툴 기반이라 딥러닝 보다는 기존 스파크와 하둡 기반의 빅데이터 툴들이 더 많은 일들을 해 주는 부분들이다. AI 기반 기술 스택 별로 알아보자 (1)인공지능을 위한 프로세서의 발전 딥러닝은 기본적으로 다층 레이어의 많은 학습을 요구하기 때문에 단순한 계산이 순식간에 많이 일어나는 것을 특징으로 한다. 그렇기에 병렬처리 컴퓨팅이 가장 중요한 핵심기능이 되어서 기존 CPU이외의 다른 대안들이 필요하다.그런 의미에서 프로세서 유니트(코어) 각각의 성능은 떨어지지만 프로세서 유니트 수가 압도적으로 많은 GPU 가 각광을 받았다. 특히 엔비디아 CUDA (병렬컴퓨팅 플랫폼의 API모델) 의 등장은 프로세서 경쟁에 불을 붙였다.참조 : http://www.epnc.co.kr/news/articleView.html?idxno=75603 GPGPU - General Purpose GPU범용 GPU를 이야기 하는 것으로 AI 용으로만 사용될 때는 TPU라는 이름을 쓰기도 한다.(Tensor Processing Unit) NVIDIA의 GPGPU를 극대화 하기 위한 CUDA 기술을 공개했고 동시에 범용 GPU 기능이 주목 받기 시작했다 GPGPU를 넘어서구글의 딥러닝의 학습속도를 향상시키기 위해 자체 디자인한 반도체 칩셋(ASIC)를 적용되면서 더 각광 받기 시작함. 구글의 ASIC를 TPU(Tensor Processing Unit) 이라 부르고 GPGPU의 범주에 놓기도 한다.MS는 같은 목적으로 FPGA 칩을 클라우드 데이타 센터에 탑재해 Azure 서비스에도 이용하고 있는데, FPGA는 저전력의 강점도 가지고 있다. Neuromorphic Processor신경구조와 유사한 프로세서가 차후 프로세서로 각광을 받고 있고 IBM 같은 회사들이 준비하고 있다.링크 : http://www.research.ibm.com/cognitive-computing/neurosynaptic-chips.shtml#fbid=rXQq5aX-WkP 딥러닝 서비스를 위한 인프라 크게 딥러닝 전용 인프라는 클라우드와 판매형 인프라로 나뉘어서 볼 수 있을 것 같은데 기존의 아마존 AWS, 마이크로소프트의 Azure, 구글 클라우드 같은 빅3는 이미 클라우드 인프라를 가지고 있다.AWS의 경우는 클라우드 AMI(Amazon Machin Image)도 제공하고 있어서 굉장히 편리하게 쓸 수 있다. AMI라는 것은 미리 만들어진 이미지 같은 개념으로 볼 수 있다. NVidia 의 경우는 자사의 GPU를 이용한 클라우드 서비스를 하고 있는 것이 흥미롭다.판매형 인프라는 기존의 서버 벤더들과 비슷한 형태를 취하고 있는데 웨이브 컴퓨팅은 하나의 모델을 제안하는 데 텐서플로 같은 소프트웨어에 특화되어 만들어져 있다.이에 비해 Penguin computing 은 몇가지 옵션들을 더 제공하고 있다. 맺으며딥러닝, 인공지능 등을 바라볼때 탑뷰로 어떤 기술이 있는지를 알아보는 과정을 거치고 있다. 다음 번엔 개발자에게는 가장 중요한 딥러닝 프레임워크들을 다뤄보도록 하겠다.","categories":[{"name":"deep learning","slug":"deep-learning","permalink":"http://www.devpools.kr/categories/deep-learning/"}],"tags":[]},{"title":"헤드리스 크롬과 selenium2의 조합을 사용해 보자 with node","slug":"헤드리스-크롬과-selenium2의-조합을-사용해-보자-with-node","date":"2017-06-07T04:31:34.000Z","updated":"2017-12-13T09:51:30.298Z","comments":true,"path":"2017/06/07/헤드리스-크롬과-selenium2의-조합을-사용해-보자-with-node/","link":"","permalink":"http://www.devpools.kr/2017/06/07/헤드리스-크롬과-selenium2의-조합을-사용해-보자-with-node/","excerpt":"","text":"최근에 headless chrome 이 나름 화제가 되어서 돌았는데 이 headless 라는 의미가 어떻게 쓰이는지 잘 모르는 사람들을 위해 이야기를 하고 넘어갈까 한다. headless browserheadless browser는 기본적으로 GUI 없는 웹 브라우저를 의미한다. “A headless browser is a web browser without a graphical user interface.”출처 : What is a headless browser? 즉 CLI(Command Line interface)에서만 다루는 브라우저를 이야기 한다.유명한 헤드리스 브라우저로는 phantomJS 가 있다. 헤드리스 브라우저가 사용되는 예는 여러가지가 있는데 좋은 예로는 테스트 자동화를 할 수 있고 데이타를 긁어오기(scraping) 하는 데 사용되고 스크린샷을 뜨는데에도 손쉽게 사용된다. 웹페이지 반응을 자동으로 스크립팅할 수 있는 부분도 존재한다.나쁜 예로는 DDOS 공격을 하는데 사용되기도 하고, 자동화를 좋지 않은데에 쓰이기도 한다는 것이다. selenium은 어떻게 다른가셀레니엄은 태생 자체가 다르다고 보면 된다. 헤드리스 브라우저는 범용적인 목적에 따라 CLI환경에서 브라우저 환경을 에뮬레이션 하는 것이라고 하면 selenium은 브라우저 플러그인을 넣고 테스트를 실행시킨다. 서버 사이드에서 테스트에 관련된 실행을 시킬 수 있는 리모트 컨트롤러가 존재하고 다양한 브라우저를 지원하기 위해 드라이버들을 제공하는데 webdriver 라고 불려진다. 이후 버전이 업데이트 되었다. 클라이언트 서버 구조로 서버 사이드와 RC(Remote Control)로 구성되어 있던 것을 webdriver와 결합하면서 현재의 selenium2가 된 것이다. 즉 CLI 툴로 사용할 수 있는 헤드리스 크롬의 경우는 다양한 브라우저를 테스트의 목적으로 사용해야 하는 범용 테스트 목적 보다는 다른 용도로 많이 사용될 것으로 보인다. DDOS machine? 자 그러면 node 환경에서 selenium2를 사용해 보자.nightwatch 혹은 webdriverio는 node 환경에서 selenium2를 사용할 수 있게 해 준다. 옵션과 홈페이지, 구글 트렌드를 생각하면 nightwatch를 이용해야겠지만 일단 간단하게 사용하기 위해 webdriver로 실행을 해 보자.(robotframework도 같이 고려) 전역 옵션으로 webdriverio를 아래와 같이 설치한다.(nightwatch의 경우도 같이 진행할 수 있음.) 1&gt;npm install -g webdriverio selenium2는 다음과 같은 명령으로 내려받을 수 있다. 1&gt;curl -O http://selenium-release.storage.googleapis.com/3.0/selenium-server-standalone-3.4.0.jar 크롬용 웹드라이버 -chromedriver를 받아서 압축을 풀고 PATH에 적용 시켜 준다. 1&gt;curl -O https://chromedriver.storage.googleapis.com/index.html?path=2.29/chromedriver_mac64.zip headless chrome 을 설치 한다.이 경우는 며칠전만 해도 canary를 쓴다고 했지만 지금은 크롬 최신버전이면 다음의 옵션만으로 실행할 수 있다.(MacOS 의 경우) 1&gt; chrome –headless –disable-gpu –screenshot &quot;http://devpools.kr&amp;quot; 테스트 코드 작성아래와 같이 테스트 코드를 작성하고 나면 일단은 selenium2 기반의 테스트 프레임워크의 시작을 했다고 보면 된다. 123456789101112131415161718192021//test.jsvar webdriverio = require(‘webdriverio’);var options = &#123; desiredCapabilities: &#123; browserName: ‘chrome’, chromeOptions: &#123; args: [ ‘headless’, ‘disable-gpu’, ], &#125; &#125;&#125;;webdriverio .remote(options) .init() .url(‘http://www.devpools.kr‘) .getTitle().then(function(title) &#123; console.log(‘Title was: ‘ + title); &#125;) .end(); 결과는 다음과 같다. 해당 소스는 깃헙의 다음 링크에서 받아볼 수 있다.https://github.com/ehrudxo/headlesssample .","categories":[{"name":"web test, test suite, headless chrome, selenium","slug":"web-test-test-suite-headless-chrome-selenium","permalink":"http://www.devpools.kr/categories/web-test-test-suite-headless-chrome-selenium/"}],"tags":[]},{"title":"챗봇 프로젝트를 진행하면서 알게 된 사실들","slug":"챗봇-프로젝트를-진행하면서-알게-된-사실들","date":"2017-05-30T14:19:43.000Z","updated":"2017-12-13T09:48:27.368Z","comments":true,"path":"2017/05/30/챗봇-프로젝트를-진행하면서-알게-된-사실들/","link":"","permalink":"http://www.devpools.kr/2017/05/30/챗봇-프로젝트를-진행하면서-알게-된-사실들/","excerpt":"","text":"챗봇 프로젝트를 진행하면서 알게 된 사실들 AI vs Human Brain최근 급하게 프로젝트에 두달간 투입이 되면서 블로그 포스팅을 할 여유가 전혀 없었다.좀 반성하는 차에 진행한 프로젝트에서 얻은 인사이트를 공유하고자 한다. 챗봇을 위한 디자인 원칙들이 속속 나오고 있다.어떤 절대적인 가이드라인은 사실 없기 때문에 마음대로 만들 수는 있고 마음대로 기획할 수는 있지만 많은 경우에 지금 활용할 수 있는 가이드라인들은 존재한다. 이른바 먼저 가본 사람들이 적어 놓은 가이드 라인들이 있다. 여기 가장 유명한 두개의 가이드라인만 소개를 할까 한다. 궁극가이드 — 9가지 원칙이라고 국내에는 알려져 있는… 사용자에게 거짓말하지 않는다 (봇이라고 알려라!) 대화를 유도하라 사용자의 감성을 고려해 디자인한다 대화에 제한을 두지 않는다(지속적으로 개선하라!) 경계를 만든다 (사람들이 몰입할 수 있는 경계를 쳐 주라) 사람들을 실망시킬 때는 조심하라 모든 인터랙션은 의미가 있다.(사용자가 이탈하는 부분을 정확히 트래킹하라) 사용자를 잘 도와줘야 시스템이 도움을 받는다. 사용자의 감정을 확인하고 감정을 목표점으로 한다. 디자인 8원칙 인간인 척 하지 말기 단순함을 극도로 유지하기 채팅이라는 표현수단 이해하기 최종 사용자에게 맞추기 간단하게 응답하기 봇으로 안될 경우를 대비할 것 가능하면 구조적인 입력을 만들것 모두가 같은 것을 볼 것 (응답이 제각각이지 않을 것) 이 중에서 가장 첫번째 원칙인 인간인척 하지 않는 것. 즉 사용자에게 사람인척 하지 않는 것이 중요한데 사람은 챗봇이라고 생각할 때와 사람이라고 생각할 때에 다르게 행동(입력)하고 기대하는 바도 매우 다르기 때문이다. 그래서 사람이 아닌 챗봇이라 버튼을 활용한다던지 다른 인터페이스에 대한 디자인을 하는 것은 무척이나 중요하다. 인공지능에 대한 이해 보다 중요한 게 있다. 사람디자인 원칙에서 보았듯이 가장 중요한 원칙은 사람에 대한 이해다.사용자가 어떻게 챗봇을 활용할 지를 이해하지 못하면 서비스가 제대로 쓸모 없는 서비스를 하게 마련이다. 그런 의미에서 아직은 인공지능과 사람의 인터페이스는 투박하다.사용자가 어떻게 챗봇을 쓸 것인지를 정의하려면 내가 하려는 서비스가 어떤 것인지를 명확하게 정의해야 하고 어떤 기능을 대체를 하려는지를 기획자 혹은 개발자 스스로가 알고 있어야 한다. 챗봇에 대한 기대는 굉장히 천차 만별이다.사용자들과 인터뷰를 하다보면 정작 사용할 사용자들은 챗봇에게 큰 기대를 하지 않는다. 마치 우리가 시리와 빅스비에게 심드렁한 것 처럼. 하지만 기획단계에서의 기획자와 발안자들은 굉장히 많은 기대를 가지고 프로젝트에 접근한다. 심지어 챗봇을 위한 디자인 원칙들을 읽어 보지도 않고 말이다. 챗봇들이 무엇인가 세상을 바꿀 것 처럼 굉장히 멋진 장표들과 아키텍처들을 보고 있지만 정작 이것이 어떤 문제를 해결할 지 알고 있는 사람은 없다. 개발을 진행하면서 이 프로젝트들이 꽤나 많은 분야의 인력에 대한 감축을 전제로 하고 그런 미래가 바로 닥쳐 있다는 사실을 부정할 수는 없지만 굉장한 청사진 또한 동의할 수 없다. 그래서 현실적이지 않은 요구사항들을 사용자 인터뷰와 가이드라인을 기준으로 다 잘라내고 있지만 의사 결정자들 마저도 굉장한 기대감을 가지고 있다는 사실은 어떻게 보면 슬픈 일이다. 하지만 심지어 페이스북과 같이 작업을 했던 항공 티케팅 분야의 챗봇 담당자는 이렇게 이야기 한다“아무도 챗봇으로 티켓을 사려고 하지는 않아요.” 개발의 대부분은 인공지능과 관련이 없다.우리는 구글이 아니다. 이걸 인정하면 마음은 굉장히 편해지지만 대부분의 어른들(?)은 그걸 인정하기가 아들 딸 성적표보다 어려운 모양이다. 하지만 우리에게도 희망은 있다. 챗봇의 아키텍처에서 인공지능이 차지하는 부분은 우리가 기대하는 부분보다 굉장히 작다. 오히려 룰을 어떻게 만들고 어떻게 처리할 것인가 하는 부분이 훨씬 중요한 문제로 다가오게 된다. 개발자는 그래서 또 너무나 중요하다.위의 주제의 연속이다. 챗봇의 대부분은 소프트웨어 엔지니어의 영역이다. 그래서 챗봇 엔진을 잘 만들기 위해서는 좋은 엔지니어와 좋은 아키텍트가 당연히 필요하다. 물론 NLU라던지 딥러닝을 잘 하면 할 수록 더욱 좋다. 하지만 좋은 개발만큼 중요한 부분은 없다. 좋은 개발자는 여러가지 복잡하게 얽혀있는 챗봇의 어려움들을 풀어줄 시작과 마지막이다. 점점 인공지능의 세상이 오면 올 수록 사용자의 입장에서 이해하는 개발자가 더 중요해 질 것이다. 우리는 기존의 레거시를 대체해야 한다. 이렇게 죽어있는 레거시는 곤란하다 상담이라던지, 견적이라던지 모든 챗봇이 풀고자 하는 문제들은 기존의 시스템이 자리잡고 있다. 그럼 이 레거시들을 어떻게 유기적으로 풀고 어떻게 서비스를 대체할 수 있을까? 마이크로 서비스 아키텍처는 그 중의 좋은 대답이 될 수 있다. 하지만 이것은 만병통치약은 아니다. 가장 중요한 것은 기존 레거시 함수를 묶어주는 표준을 만들어 주는 것이고 그 레거시를 어떻게 접근할지에 대한 해답은 챗봇이 가지고 있어야 한다. 그렇다면 사용자의 자연어와 레거시간의 연계는 어떻게 이루어 질 것인가. 여기에는 기존에 없던 인공지능 분야의 기술이 필요하다. 과소 평가해서도 곤란하다. stay tuned이 쪽은 지속적으로 계속 발전할 것이다. 그렇다는 것은 지금 발을 들이기에 무척이나 좋은 시기라는 것이다.아무래도 발전에 대한 틀은 대부분이 갖춰지는 것 같다.누군가가 기가막힌 사용자 인터페이스를 제시할 것이고 그 때 쯤이면 아직까지는 기대할 것 없는 챗봇 분야의 인공지능도 수준이 많이 올라갈 것이다.언제나 관심을 기울이고 있어야 한다는 이야기다. Originally published at 개발바보들. By Keen Dev on May 30, 2017. Exported from Medium on May 31, 2017.","categories":[{"name":"github, github-trend, tech-trend","slug":"github-github-trend-tech-trend","permalink":"http://www.devpools.kr/categories/github-github-trend-tech-trend/"}],"tags":[]},{"title":"엑셀의 분석도구를 이용한 간단한 선형 회귀분석 실습","slug":"엑셀의-분석도구를-이용한-간단한-선형-회귀분석-실","date":"2017-05-16T10:41:37.000Z","updated":"2017-12-13T09:42:46.833Z","comments":true,"path":"2017/05/16/엑셀의-분석도구를-이용한-간단한-선형-회귀분석-실/","link":"","permalink":"http://www.devpools.kr/2017/05/16/엑셀의-분석도구를-이용한-간단한-선형-회귀분석-실/","excerpt":"","text":"선형 회귀분석(Linear Regression)은 머신러닝을 공부할때 가장 첫번째 배우는 예측분석 모델입니다. 머신러닝 또는 딥러닝을 배우는 입장에서는 처음에 Python, Tensorflow, Keras, R, Matlab 등의 낯선 학습환경을 본인의 PC에 구성해서 하게 되지만 간단한 선형 회귀분석 정도는 마이크로소프트의 밥줄(….), Office의 Excel에서도 아주 손쉽게 구현하여 결과를 확인하고 분석을 진행할 수 있습니다. 분석도구 활성화기본적으로 Excel내의 분석도구는 비활성화 되어 있습니다. 이 분석도구를 활성화 시키기 위해서는 Excel의 버전에 따라 다른 방법으로 분석모델을 활성화시켜줘야 합니다. 과거의 Office버전에서는 기본적으로 파일메뉴 - 옵션 - (좌측)추가기능메뉴 - 분석도구 - 확인클릭순으로 분석도구를 활성화할 수 있습니다. 하지만 저는 최신의 Mac용 Office를 사용하기 때문에 다른 경로로 분석도구를 활성화 시켜줘야 합니다. (상단)도구 - 추가기능 - 분석기능 체크 - 확인 이렇게 하면 데이터탭 우측 상단에 데이터 분석도구가 있음을 확인할 수 있습니다. 데이터 분석분석도구를 설치했으니, 이제 선형 회귀분석을 위한 데이터를 로드를 합니다. 우리가 작업할 데이터는 중고차의 가격과 킬로수가 함께 나온 데이터로써, 주행거리(Odometer)와 중고차 가격(Price)간 상관관계를 구하고 이를 예측하기 위해 분석을 진행할 것입니다. 상단의 데이터 - 데이터분석으로 시작합니다. 팝업에 나오는 메뉴중에 Regression(회귀분석)을 선택합니다. 독립변수 X값과 종속변수 Y값에 대해 해당 셀을 Block지정합니다. 그리고 라벨을 체크합니다. 데이터의 분석결과가 별도의 시트로 추가가 되며, 우리가 분석한 주행거리별 중고차 가격에 대한 분석은 아래와 같습니다. 중요하게 체크해야할 항목에 녹색표시를 해두었습니다. R Square(설명력)의 값은 입력한 X값(주행거리)가 Y값(중고값)을 결정하는데 65%의 영향력을 끼친다는 것을 의미합니다. 또한 하단의 Intercept(Y절편) 와 Price항목은 선형 회귀분석 모델의 수식인 Y = aX + b를 완성하는데 쓰입니다. 이는 차트를 통해 확인을 하도록 합니다. 차트 추가차트를 추가하려면 차트버튼을 클릭하면 간단하게 차트를 추가할 수 있습니다. 차트의 데이터를 하나 클릭하여 우클릭을 하면 추세선을 추가할 수 있고, 추세선 서식 옵션의 수식을 차트에 표시를 체크함으로써 분석한 데이터의 선형 회귀분석 모델의 수식을 쉽게 구할 수 있습니다. 분석된 데이타를 통해 도출된 선형 회귀분석 모델의 공식은 “y = -10.433x + 190655”로 쉽게 확인할 수 있습니다.","categories":[{"name":"미분류","slug":"미분류","permalink":"http://www.devpools.kr/categories/미분류/"}],"tags":[{"name":"Excel","slug":"Excel","permalink":"http://www.devpools.kr/tags/Excel/"},{"name":"회귀분석","slug":"회귀분석","permalink":"http://www.devpools.kr/tags/회귀분석/"}]},{"title":"제1회 re:View 참석 후기","slug":"제1회-review-참석-후기","date":"2017-03-26T15:19:46.000Z","updated":"2017-12-13T09:43:20.749Z","comments":true,"path":"2017/03/27/제1회-review-참석-후기/","link":"","permalink":"http://www.devpools.kr/2017/03/27/제1회-review-참석-후기/","excerpt":"","text":"들어가기에 앞서서…지난 3월 22일 수요일 오후 늦은 7시, 잠실에 있는 삼성SDS 지하에서는 동회사에 근무하시는 신상재님께서 주관하셨던 코드리뷰관련 Meetup, “제1회 re:View”가 열렸습니다. re:View의 공식사이트, Facebook, Slack, Twiter의 운영과 개인별 문자/메일 발송 등의 멀티채널을 통한 참가자들의 압박(…)은 그 많은 인원이 평일 오후에 참석할 수 있었던 큰 원동력이 된 것 같습니다. 이뿐만 아니라 컨트롤이 힘든 자녀를 둔 맞벌이 개발자와 취업에 고군분투하고 있는 취업준비생을 위한 배려는 그동안 제가 참석한 다양한 Meetup에서는 단 한번도 보지 못한 멋진 운영중 하나였습니다. 이 글을 통해 준비해주셨던 모든 분들께 감사의 말씀을 드립니다. 행사는 1부 서지연님 발표, 2부 김헌기님 발표, 3부 QnA로 구성되어 있었으며 발표중 질문이나 요청은 Slack채널의 운영으로 현장에서 온라인을 통한 참석자들의 참여가 있었습니다. 1부 : 코드리뷰를 시작하려는 그대에게(서지연@카카오)카카오 서지연님의 사외 발표는 지난 나프다 컨퍼런스를 포함 2번였고 저는 운좋게 그 두번의 발표를 모두 라이브로 들을 수 있었습니다. 나긋나긋하며 또박또박한 발음으로 발표하시는 서지연님의 발표는 내용이 재미있어서 다행이지 따분한 내용의 발표였다면 청중의 수면을 유도하기 참 좋은(…) 목소리인 것 같습니다. 각설하고, 서지연님은 사내에서 경험한 본인의 코드리뷰를 바탕으로 이야기를 풀어나가셨습니다. 왜 코드리뷰를 시작하려 하는가?내 코드가 부끄럽습니다. 이는 주니어뿐만 아니라 시니어들도 가지고 있는 생각일 것입니다. 보잘것 없는 코드가 타인에 의해 드러나는 것도, 의견을 주고 싶은데 잔소리로 오해 받을까봐 걱정되는 것도, 코드리뷰를 경험해보지 않은 인력들에게는 모두 걱정입니다. 코드리뷰란 코드로 대화하는 팀원간의 커뮤니케이션입니다. 부끄러움은 짧고 코드의 히스토리를 길다는 점을 명심해주세요. 잘못된 코드는 누군가에게 레거시코드가 되어 영원한 고통을 안겨줄 수 있습니다. 덮어놓고 코드를 작성하다 보면 장애의 위협은 항상 우리를 괴롭힐 것입니다. 상처를 주거나 받거나하지 말자자칫 잘못하면 꼰대가 될 수 있음에 주의해야지만, 내가 아는 것을 모르는 사람에게 알려주는 것은 잘못된 것이 아닙니다. 이런 상황에서 온라인으로 진행하는 코드리뷰가 가지는 장점이 여기서 드러납니다. 목소리가 아닌 글로 격려와 칭찬을 하면서 진행하면 이러한 오해를 줄이는데 큰 도움이 됩니다. 코드는 본인이 아닙니다. 나에 대한 평가가 아닌 나의 코드에 대한 리뷰를 받는 것임을 생각하며 진행하도록 합니다. 할 수 있는 만큼만프로젝트 초반에는 모두 코드리뷰에 대한 열정에 어마어마한 리뷰 요청이 들어오게 됩니다. 하지만, 이를 다 받아주면 내가 해야할 일에 병목이 생기고 번아웃이 되기 쉽습니다. 팀원이 요청한 모든 리뷰에 피드백을 줄 필요는 없습니다. 본인의 업무와 조율하며 코드리뷰 실행을 조절하되 정말 하고 싶거나 또는 좋은 의견을 주고 싶은 리뷰라면 나중에 하기로 약속하는 것도 좋은 방법입니다. 나의 의견을 고수코드를 통한 협업에서는 가이드라인(Code Fomatting, Naming Rule 등)이 필수이지만 개발자의 취향은 존중받아야함이 마땅합니다. 리뷰어가 해당 코드에 대한 반대의 의견이 있을때는 요청자를 위해 목소리를 내어줘야하고, 요청자 역시 반대의 의견을 듣는 것을 두려워하지 말아야 합니다. 하지만 타당한 이유로 반박해야할 내용이 있다면, 왜 내가 이렇게 작성을 했는지에 대한 설명을 해줘야합니다. 해당코드에 대한 고민은 내가 가장 많이 했으니까요. 도입초반이 중요초기에는 코드리뷰리더 역할을 가진 멤버가 필요합니다. 코드리뷰 리더는 반드시 개발을 잘하거나 연차가 높은 사람일 필요가 없습니다. 가장 중요한 자질은 적극적으로 코드리뷰를 참여하고 멤버들을 독려할 수 있는 열정을 소유하는 것입니다. 그 후, 메일이나 Slack을 통한 Notification 환경을 구축하고, 칭찬할 내용에 대해서는 아낌없는 따봉을 팍팍 줌으로써 서로 격려하는 문화를 만들어 나갑니다. 정기적인 오프라인 미팅운영도 큰도움이 됩니다. 아낌없는 격려와 칭찬. 이것은 코드리뷰를 도입하는데 있어 큰 밑거름이 됨을 잊지마시길 바랍니다. 나는 무엇이 바뀌었는가?이전에는 본인 개성을 베이스로 자유로운 코드가 가득했던 반면, 코드리뷰를 통해 타인이 볼 것이라는 압박때문이라도 코드를 한번 더 생각해보는 습관이 생깁니다. 이를 위해서는 적절한 협업도구의 사용이 성공유무를 가르게 될 수 있습니다. 다같이 즐겁게 코딩하는 것이 코드리뷰의 궁극적인 목표임을 다시 한번 상기합시다. 꾸준한 코드리뷰를 통해 팀원들과 협업하는 재미가 생기는 것을 자신을 발견할 수 있을 것입니다. 사내 코드리뷰 경험을 공유해 주신 서지연님의 발표에서 그녀가 대한민국에서 얼마나 행복한 개발자인가를 알 수 있었으며, 그와는 별개로 발표용 키노트에 기가 막힌 타이밍에 삽입한 탁월한 짤방이 청중에게 큰 공감을 가져오게한 능력이 돋보인 발표였습니다. 2부 : 코드품질 개선을 위한 GS SHOP 고군분투기(김헌기@GS SHOP)행사를 준비하며 온라인에서 보여주신 신상재님과 김헌기님의 모습은 한때 시대를 풍미했던 서수남과 하청일, 서경석과 이윤석처럼 ‘이런 것이 Meetup을 준비하는 자들의 호흡이다!’를 온몸으로 외치는 듯 했습니다. 더불어, 40대 개발자는 이런 자세를 견지해야 팀내의 젊은 후배들과 활기찬 협업을 할 수 있다라는 것을 30대 후반의 미천한 능력을 지닌 저에게 알려주셨습니다. 김헌기님의 직장생활 기간의 희열차트로 시작한 발표는 깨알같은 아들 자랑을 은근 슬쩍하시더니 본인 회사의 자랑을 본격적으로 대놓고 하시는 모습을 보며, 무언가 심상치 않은 발표가 될 것이라 예상했습니다. 홈쇼핑을 통해 물건을 구매하지 않는 저로써는 GS SHOP이 어떤 회사인지, 어떤 비지니스 물밑에서 하고 있는지 몰랐는데, 이런 오프라인 모임을 통해 커머스 비지니스를 하는 IT회사들은 어떤 환경을 가지고 어떤일을 하고 있는지에 대해 조금이나마 알게 되었습니다. 김헌기님이 발표하신 내용을 좀 정리해보자면… 엔터프라이즈 영역에서의 개발과거에는 회사가 위험요소가 있는 곳은 애당초 가지 않았는데 이제는 이런 위험요소를 탐지하는 것 자체가 어려워졌습니다. 그래서 민첩함을 키워야했고, 현재는 팀장이 직접 코딩도 하고 사내에서 개발관련 지식을 공유하는 세미나도 주관하는 상황에 이르렀습니다. 이는 변화에 적응하기 위해 현업들과 코드로 대화를 해야하는 것이 필요하다는 것을 몸소 깨달았기 때문입니다. 우리모두 변화에 적응하는 유연성을 기르도록 합시다. 레거시 코드와의 사투GS eShop에서 사용하는 엔터프라이즈 시스템에는 어마어마한 레거시 코드들이 아직도 있습니다. 자바코드 44000줄, A4로 뽑을 경우 670장이나 되는 거대한 양의 코드입니다. 메소드에 파라메터가 20개 이상인 것도 부지기수이고 또한, 개발 기준없이 개발자들마다 본인의 개성에 맞는 스타일로 작업을 하다보니 상황은 점점 절망적이 되어갔습니다. 이런 절망적인 상황에서 이를 해결하기 위해 내부에서 자발적인 고민을 하기 시작합니다. 더러운 코드로 인해 악순환이 계속되는 구조를 클린코드를 유입시키고 이를 통해 테스트 오류를 감지할 수 있는 선순환구조로 바꾸기 위해… 무엇을 했는가?측정가능한 투명한 품질활동을 위해 관리자와 테스트 전문가가 프레임 워크를 제작하기로 했습니다. Python과 django사용를 사용하여 제작을 했는데 어느 프로젝트나 마찬가지지만 새로운 언어로 개발을 한다는 것은 쉬운일이 아니였습니다. 우리는 방향을 잡을 수 있는 목표와 보여줄수 있는 가치를 현실화 하기 위해 리더/엔지니어/테스트전문가/보안전문가로 구성된 팀을 꾸렸고, 영어 닉네임을 사용했습니다. 꾸준한 리뷰를 통해 잘못된 코드의 작성자는 즉시 담당자에게 호출되었고, 모의해킹/기능테스트/해킹테스트와 같은 품질향상을 위한 작업 역시 꾸준히 이루어졌습니다. 이리하여 배포품질관리시스템 “de:light”가 탄생되었습니다. 하지만 프로세스와 플랫폼으로 살림살이가 바로 나아지지가 않았습니다. 코드리뷰 문화의 확산 필요해졌습니다. 우선 사내커뮤니티 활성화하고 목표는 유지보수 가능한 코딩 기술을 전수하자는 미명하에 다양한 행사나 사내 Meetup/Hackerthon 등을 진행하였습니다. 코드리뷰는 품질개선의 건전한 활동이자 개발문화입니다. 무엇이 변했는가?애자일을 시도했지만 우리에게는 이 방식이 불가능 하다고 판단을 하였습니다. 하지만 애자일의 아이템중 취해야 할 것은 과감히 채택하여 적용하였습니다. 특히, 커뮤니케이션 방식의 변화를 위해 주기적으로 업무를 끊고 갈수 있는 스프린트 방식을 도입했습니다. 각자 본인이 한달에 할 수 있는 범위를 정하고 이는 수단과 방법을 가리지 않고 실행하며, 한주의 스프린트 결과를 별거 없거나 아주 작은 내용이라도 팀원들에게 공유해야하는 그라운드룰을 운영했습니다. 이것을 우리가 원하는 상황으로 가고 있지 않을때 플랜B를 갈지 판단할 수 있는 판단의 근거로 작용하게 되었습니다. 관리만 할 줄 아는 사람들이 직접 참여하며 느끼는 것이 있었습니다. 발표전 김헌기님께서는 서지연님과의 발표를 듣고 본인이 속았다라고 볼멘소리로 주최측에 항의하셨으나 발표의 내용을 모두 들어봤을때, 사내외행사를 통한 경험을 토대로 이번 Meetup의 발표을 위해 큰 그림을 그려오셨다는 생각만이 머리속에 맴돌았습니다. 3부 : 대담식 질의 응답슬랙을 통한 질의가 행사진행중 계속되었는데 많은 분들의 질문, 특히 본인의 업과 관련된… 업무에서 많은 고민을 해왔고 이 자리를 빌어 조언을 구하고 싶은 듯한 날카로운 질문들에 대해 김현기님과 서지연님이 혼을 다해 답변을 해주셨습니다. 슬랙을 통해 올라온 많은 질문들을 시간관계상 답변을 해드리지 못한 것은 발표자나 참가자들에게 모두 아쉬운 점이였다고 생각합니다. 마치며이렇게 평일 오후라는 제한적인 시간에 많은 분들이 모여 코드리뷰라는 주제로 뜻깊은 시간을 가졌습니다. 서지연님과 김헌기님의 성공사례를 보며, 코드리뷰라는 것은 단순히 남의 코드를 다른 사람이 검사해준다는 느낌보다는 개발을 업으로 삼고 있는 사람들의 업무방식을 변화시켜줄 수 있는 문화라는 것을 모두가 공감했을 것입니다. 차기 Meetup에서도 곳곳에 숨어있는 다른 개발자분들의 다양한 경험담을 공유할 수 있길 바래봅니다.","categories":[{"name":"Meetup","slug":"Meetup","permalink":"http://www.devpools.kr/categories/Meetup/"}],"tags":[{"name":"re:View","slug":"re-View","permalink":"http://www.devpools.kr/tags/re-View/"},{"name":"코드리뷰","slug":"코드리뷰","permalink":"http://www.devpools.kr/tags/코드리뷰/"}]},{"title":"Jekyll Page에 기능 추가하기","slug":"Jekyll-Page에-기능-추가하기","date":"2017-03-26T00:00:00.000Z","updated":"2017-12-13T10:31:17.928Z","comments":true,"path":"2017/03/26/Jekyll-Page에-기능-추가하기/","link":"","permalink":"http://www.devpools.kr/2017/03/26/Jekyll-Page에-기능-추가하기/","excerpt":"","text":"Markdown 형태의 정적인 페이지가 너무 밋밋하고 피드백을 받을 수 있는 영역이 없을 뿐더러 나중에 글이 늘어나면 포스트 관리의 어려움도 걱정되는 터라 몇개의 기능을 추가해보려 합니다. 페이스북 소셜플러그인 - 댓글기능 추가페이지 하단의 페이스북 댓글 창을 추가하기 위해서 해야할 작업은 그리 어렵지 않습니다. 우선 페이스북 개발자 소셜 플러그인 패아자내의 “댓글 플러그인 코드 생성 도구”를 통해 쉽게 코드를 얻어올 수 있습니다. url항목은 어차피 Liquid태그로 수정을 해야하니 대충 넣고, 너비는 Responsive한 웹을 위해 100%, 게시물 수는 입맛에 맞게 넣습니다. 저는 default로 되어 있는 ‘5’를 사용했습니다. 3개의 항목을 채우고 해당 서식 바로 아래 있는 코드받기를 통해 두개의 코드를 받아옵니다. &lt;div id=“fb-root”&gt;&lt;/div&gt; &lt;script&gt;(function(d, s, id) { var js, fjs = d.getElementsByTagName(s)[0]; if (d.getElementById(id)) return; js = d.createElement(s); js.id = id; js.src = “//connect.facebook.net/ko_KR/sdk.js#xfbml=1&amp;version=v2.8”; fjs.parentNode.insertBefore(js, fjs); }(document, ‘script’, ‘facebook-jssdk’));&lt;/script&gt;` 첫번째의 코드는 페이지내의 `&amp;lt;body&amp;gt;`태그 바로 뒤에 붙이라고 가이드가 되어 있습니다. 그렇다면 우리는 `_layout/default.html`의 `&amp;lt;body&amp;gt;`태그 뒤에 바로 붙여줍니다. 그리고 두번째로 주어지는 페이스북 댓글창으로 사용될 코드인데, 댓글은 각 페이지의 주소마다 다르게 보여집니다. 따라서 `data-href`의 값으로 고정주소를 선언하게 되면 블로그내의 모든 포스팅에서 모두 동일한 페이스북 댓글창을 사용하게 됩니다. 따라서 Liquid문법을 이용하여 현재 페이지의 url을 동적으로 생성하고 이렇게 만든 두번째 html코드를 `_include/post.html`에사용하도록 합니다. &lt;figure class=&quot;highlight&quot;&gt; &lt;pre&gt;`&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fb-comments&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{ site.url | append: page.url }}&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100%&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-numposts=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt; 웹에서의 페이스북 소셜플러그인 댓글 기능의 사용은 별도의 App-id가 필요없이 현재 포스트에 대한 url을 해당 data-href에 어떻게 지정할지만 고민을 하면 아주 손쉽게 붙일 수 있습니다. TAG 기능TBD","categories":[],"tags":[]},{"title":"[기행문] AWSomeDay 다녀왔습니다.","slug":"기행문-awsomeday-다녀왔습니다","date":"2017-03-19T12:50:00.000Z","updated":"2017-12-13T09:27:50.979Z","comments":true,"path":"2017/03/19/기행문-awsomeday-다녀왔습니다/","link":"","permalink":"http://www.devpools.kr/2017/03/19/기행문-awsomeday-다녀왔습니다/","excerpt":"","text":"어제(2017.03.18)는 저번달에 회사 동료가 소개해 줘서 아무 생각없이 신청했던, AWSomeDay행사에 다녀왔습니다. ( 정작 소개해준 동료는 다른 일이 있다고 참석하지 않았습니다. 항상 이런식… ) AWSomeDay는 세종대학교 광개토관 지하2층에서 열렸습니다. 이 장소는 작년 GoogleIO Extends와 그 외 다른 행사 때문에 몇번 찾아왔던 터라 어렵지 않게 찾아갈 수 있었습니다. 토요일이고 아직 오전 9시도 안된 시각이었는데, 많은 사람들이 학교로 가고있길래 세종대 학생들은 부지런하구나 생각했지만, 대부분 광개토관으로 향하고 있었습니다. 이런 모습을 보니 AWS 행사에 많은 사람들이 관심을 가지고 있다는 것을 알 수 있었습니다. &lt;AWSomeDay 안내 입간판&gt;&lt;AWSomeDay 등록 데스크&gt; 9시 부터 등록시작이라고 했지만, 이미 등록을 시작하고 있었고 몇몇 분들이 파트너사의 홍보 부스를 구경하면서 사은품을 받아가고 있었습니다. ( 저도 역시.. 행사의 꽃은 사은품이니까요. ) &lt;AWSomeDay에서 받은 사은품&gt; 색연필과 응급처치킷, ( 행사의 꽃인 ) 티셔츠를 받았습니다. 보통 반팔을 주시는 데, 특이하게 긴팔 티를 주셨습니다. 그리고 사진에는 없지만, 에코백, 수첩, 아마존 용어집 핸드북, 그리고 엄청나게 커다란 안경 닦는 수건도 받았습니다. ( 위 사진에 있는 마이보틀은 행사 종료후 아마존에서 참가기념으로 나눠준 사은품입니다) 잠시 사은품에 홀렸던 정신을 바로 잡고 행사 등록하고 참가 확인 배지를 받았습니다. &lt;AWSomeDay 배지(참가 확인용)&gt; 9시 40분부터 입장이 시작된다고 했지만, 20분 전부터 입구에는 입장하려는 사람들이 줄을 서기 시작했으며, 입장이 시작되고 나서 빠르게 자리가 사라졌습니다. 나중에는 자리가 없어서 서서 계시는 분들도 계셨습니다. 발표장은 많은 참가자를 대상으로 하고 있어서 세군데에 대형 스크린이 설치되어 있었습니다. 주위를 둘러보니 저같이 개발자로 보이는 분 계시고, 대학생으로 보이는 분, 나이 지긋하신 아키텍쳐 또는 사장님으로 보이는 분도 계셨고 아직 많이 어려보이는 중,고등학생으로 보이는 분들도 종종 눈에 띠었습니다. &lt;AWSomeDay 무대&gt; AWSomeDay는 아마존 웹서비스의 다양한 기능과 기본적인 서비스의 사용법을 익히는 수업인 “AWS 기술 에센셜” 과정과 동일한 내용이라는 설명으로 시작했습니다. 물론 참가 인원이 많아서 실습은 진행하지 않고, 강사분과 질의응답을 할 기회가 거의 없기 때문에 위 정규과정과는 차이가 있다고 합니다. 10시 부터 시작된 오전 세션에서는 AWS를 사용하는 주요 기업의 사례와 AWS의 인프라과 신규 기능을 소개하는 기조연설을 시작으로 아마존의 대표 서비스인 EC2( Elastic Compute Cloud )와 오프젝트 스토리지 서비스인 S3( Simple Storage Service )에 대한 사용법, 기능 및 주의점에 대한 설명을 들었고, 어떻게 사용하면 되고, 과금은 어떤 식으로 이루어지는지에 대해서 자세한 설명이 있었습니다. &lt;점심 도시락 &gt; 이후 12시부터 점심시간이었습니다. 세종대학교 주변에 식사할 곳이 마땅치 않은데, AWSomeDay에서는 감사하게도 참가자 전원에게 맛있는 도시락이 제공되었습니다. 다만, 참가자가 많아 이마저도 뒤에 앉으신 분들은 본 도시락으로 드셨습니다. 한시간의 점심시간이 끝나고 1시부터 블록스토리지 서비스인 EBS( Elastic Block Storage ), 네트워크 구성과 관련된 VPC ( Virtual Private Cloud ), 보안관련 IAM( Identity and Access Management ), NoSql DB인 DynamoDB, 관계형 데이터베이스인 RDS ( Relational Database Service )에 대한 설명이 이어진 후 잠시 휴식시간을 가졌습니다. 각 서비스에 대한 설명이후에는 설명한 것에 대한 시연 영상이 보여져서 설명을 이해하는 데 도움이 되었습니다. 이후 20분 정도의 휴식시간이 주어졌고, 참가자가 많았기에 간단한 과자와 음료수가 제공되었는데, 순식간에 동이나는 광경을 목격할 수 있었습니다. 미리 사전등록을 받을 때, 인원에 제한을 두었더라면 조금은 덜 혼잡했을텐데, 조금 아쉬웠습니다. 현장등록도 가능한 것으로 보아 참가인원에 제한은 없었던 것으로 보입니다. 휴식이후 ELB( Elastic Load Balancing ), CloudWatch, Auto Scaling에 대해서 설명을 들었으며, Scale up / down 에 대한 동작 원리, 구현 방법에 대해서 이해할 수 있었습니다. 특히 HA 구성을 할 때, 여러 AZ(가용영역)에 걸쳐서 구성할 때, 어떤 점을 고민해야하는지 설명을 해주셔서 나중 서비스를 구성할 때 도움이 될 것 같습니다. 이후 Trusted Advisor 기능 설명을 들었습니다. 모든 세션이 끝나고 경품추첨을 마지막으로 기념품인 마이보틀을 받고 모든 행사가 종료되었습니다. 아마존이라는 회사가 클라우드 서비스를 주로 하기 때문에 이런 행사를 통해서 고객을 늘린다는 목적도 있겠지만, 고객들이 본인들의 서비스를 좀 더 잘 알고 더 효율적으로 사용할 수 있도록 (큰 비용을 들여서 ) 스스로 알리고 있다는 점에서 ( 물론 프리티어 사용자 이지만 ) 한 사람의 고객으로써 감사한 마음을 가졌습니다. 지금 서비스를 위해서 사용하는 모 기업의 클라우드와 비교해보면 동일하게 클라우드를 서비스하고 있다고 주장하지만, 내부의 네트워크 구성이나 서비스 구성법을 전혀 알려주지 않고, 심지어 상품안내 조차 없는 것 등 많은 점이 비교되었고, 아마존과 비교해보면 그들이 하는 클라우드 서비스 수준은 IDC를 통해 온프라미스 서버를 구성하는 것과 크게 다르지 않음을 알 수 있었고 진정한 클라우드 서비스는 ( 시작도 다르고 추구하는 방향도 다르겠지만 ) 아직 멀었다고 말해주고 싶습니다. 집에와서 찾아보니 “AWS 기술 에센셜” 교육은 1일과정에 44만원이라 하는 과정이라 개인이 듣기에는 부담되는 과정이기에 이번 행사는 아마존 웹서비스를 처음 사용하거나, 저처럼 (몰라서) 단순히 프리티어 EC2정도만 사용하는 사람에게는 하루 정도를 투자할 가치가 충분하다고 생각되는 행사였습니다.","categories":[{"name":"Meetup","slug":"Meetup","permalink":"http://www.devpools.kr/categories/Meetup/"}],"tags":[{"name":"AWSomeDayKR","slug":"AWSomeDayKR","permalink":"http://www.devpools.kr/tags/AWSomeDayKR/"}]},{"title":"패턴인식 개요","slug":"패턴인식-개요","date":"2017-03-18T05:56:34.000Z","updated":"2017-12-13T09:50:26.678Z","comments":true,"path":"2017/03/18/패턴인식-개요/","link":"","permalink":"http://www.devpools.kr/2017/03/18/패턴인식-개요/","excerpt":"","text":"패턴인식 개요패턴 인식주어진 데이터의 집합에 대해 입력값을 바탕으로 하는 Classification. MNIST 처럼 이미지에서 숫자를 도출하는 것도 좋은 예 구조적 방법 : 1은 하나의 직선에 가깝고 8은 원 두개. 템플릿 매칭 : 패턴의 원형을 저장해 두고 데이타간의 거리를 계산 기계학습 패턴 인식과 관련된 개념1. 분류와 군집화분류( Classification ) : MNIST로 숫자를 맞추는 형태 베이지안 분류기, K 근접 이웃, 다층 퍼셉트(MLP), 서포트 벡터 머신 지도학습 군집화( Clustering ) : 특성 고객층을 하나의 기준으로 분류하기 보다는 여러가지 기준이지만 뭉뚱그리는 것 K 편균 클러스터링, 계층적 군집화, 자기조직화 특징맵(SOM) 비지도 학습 2. 데이터와 데이터 분포 여러가지 데이터들은 결국 컴퓨터에서 다루어질 수 있게 수치로 표현 되어야 한다. 이 숫자들을 1차원으로 나열하면 벡터, 차원이 높아지면 행렬이 되는데 이런 모임을 Tensorflow에서는 tensor 라고 지칭하고 딥러닝의 과정이 이 tensor가 움직이면서 나타나서 Tensorflow 를 이루게 된다. 표본집합 추출 특징추출 분류와 결정경계 분류율과 오차학습 오차 : 학습데이타에 대하여 분류 오차를 계산한 것 테스트 오차 : 실제 데이타의 오차 일반화 오차 : 확률분포함수를 이용한 분포에 따른 평균 오차값. 테스트 오차가 절대값 수치 미적용에 따른 왜곡을 가질 수 있으므로 사용한다 교차검증법을 통해 오차값을 얻어내기도 한다 3. 과다 적합(overfitting) Classifier가 학습데이타에 대해서만 지나치게 적합한 형태로 결정경계를 형성하는 경우. train데이타의 범주를 벗어나는 경우는 제대로 분류하지 못하는 경우. Machine Learning 스터디 (3) Overfitting 4. 활용분야 문자 인식 생체인식 금융데이터 생물정보 뇌 신호 처리 영상처리 뇌 신호 처리 By Keen Dev on March 18, 2017. Exported from Medium on May 31, 2017.","categories":[{"name":"github, github-trend, tech-trend","slug":"github-github-trend-tech-trend","permalink":"http://www.devpools.kr/categories/github-github-trend-tech-trend/"}],"tags":[]},{"title":"jekyll로 Github Page 만들기","slug":"jekyll로-Github-Page-만들기","date":"2017-03-16T00:00:00.000Z","updated":"2017-12-13T10:31:34.825Z","comments":true,"path":"2017/03/16/jekyll로-Github-Page-만들기/","link":"","permalink":"http://www.devpools.kr/2017/03/16/jekyll로-Github-Page-만들기/","excerpt":"","text":"Markdown문서로 문서를 작성하고, 이를 자동으로 정적인 페이지로 변환시켜주는 Jekyll을 사용하여 손쉬운 블로그를 만들어 보도록 합시다. 이에 Gitbub Page는 Jekyll을 통해 서비스가 가능한 최고의 선택이 됩니다. Jekyll과 Github Page의 조합은 많은이들에게 사용된지 상당히 오래되었으므로, 본 포스팅에서는 현재의 페이지가 어떤 과정으로 생성되었는지에 대한 과정을 서술합니다. 송성광님의 포스트를 참고하여 초기에 세팅을 진행했습니다. Ruby를 베이스로 한 Jekyll을 사용하기 위해서는 다양한 설정이 필요한데, 위의 포스팅은 초보자도 어려움 없이 맥에서 Jekyll환경을 세팅하기 위한 아주 자세한 설명이 담겨있습니다. 작성글대로 한다면 큰 어려움 없이 Github Page에 글을 작성하기 위한 준비를 하실 수 있을 것입니다. Jekyll은 전세계 개발자들이 미리 만들어 놓은 좋은 테마를 무료(또는 유료?)로 사용이 가능합니다. themes.jekyllrc.org, jekyllthemes.org 등을 통하여 본인의 취향에 맞는 테마를 선택하도록 합시다. 글쓴이는 holo-alfa라는 단순하고 깔끔한 테마를 선택하여 진행을 하였습니다. fork를 떠서 본인의 repository에 옮긴뒤 약간의 커스터마이징을 가미하도록 합시다. _config.ymlJekyll내의 모든 설정은 _config.yml을 통해서 관리합니다. 선택한 테마에서 데모를 위해 설정되어 있는 내용을 이 블로그를 위해 수정을 하도록 합시다. name: 배움과 경험을 정리하는 삶 author: name: Hongsik Alex Lee email: labyrins@gmail.com url: http://labyrins.github.io baseurl: ““ # Footer에 넣을 소셜아이콘들을 위해 설정 facebook: “https://www.facebook.com/hongsik.lee“ github: “https://github.com/Labyrins“` #### CSS/Font 추가 영문으로 쓴다면 테마에서 지정한 font로도 큰 문제가 없지만 한글로 작성할 블로그이니 font를 추가하고, 소셜 아이콘으로 쓸 이미지가 담긴 font-awesome을 추가한뒤 `style.css`를 수정하여 적용합니다. &lt;figure class=&quot;highlight&quot;&gt; &lt;pre&gt;`&lt;span class=&quot;c&quot;&gt;&amp;lt;!--header.html--&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ site.baseurl }}/css/font-awesome.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://fonts.googleapis.com/earlyaccess/jejugothic.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://fonts.googleapis.com/earlyaccess/nanumgothic.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;`&lt;/pre&gt; &lt;/figure&gt; &lt;figure class=&quot;highlight&quot;&gt; &lt;pre&gt;`&lt;span class=&quot;c&quot;&gt;/* style.css */&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* 본문 텍스트로 쓰일 font는 클래스 수정 */&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&apos;Nanum Gothic&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* footer용 font로 쓰일 클래스는 신규추가 */&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.footer-text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&apos;Jeju Gothic&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;`&lt;/pre&gt; &lt;/figure&gt; #### Footer 링크를 위한 소셜아이콘의 추가와 간단한 문구가 담긴 Footer를 위해 `footer.html`를 아래와 같이 수정합니다. &lt;figure class=&quot;highlight&quot;&gt; &lt;pre&gt;`&lt;span class=&quot;nt&quot;&gt;&amp;lt;footer&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;inner&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;footer-text&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;2017, Hongsik Alex Lee&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ site.facebook }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fa-stack fa-sm&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;i&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fa fa-circle fa-stack-2x&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;i&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fa fa-facebook fa-stack-1x fa-inverse&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ site.github }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fa-stack fa-sm&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;i&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fa fa-circle fa-stack-2x&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;i&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fa fa-github fa-stack-1x fa-inverse&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;`&lt;/pre&gt; &lt;/figure&gt; #### jekyll의 빌드와 구동 그리고 draft모드 포스트의 작성은 `_posts` 디렉토리에 `YYYY-MM-DD-Title.md`형식의 이름을 가진 markdown 파일을 작성함으로써 이루어집니다. 해당 파일이 `_posts`로 들어오면 Jekyll에 의해 정적인 웹페이지로 변환되며, 이는 `_site`에 날짜별 디렉토리로 작성되어 있음을 확인할 수 있습니다. 우선, 우리가 선택한 테마에는 템플릿용으로 `_posts`에 md파일이 있으니 삭제하고 빌드를 해줍니다. &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;`jekyll build `&lt;/pre&gt; &lt;/div&gt; 빌드를 진행하면 현재 `_posts`디렉토리에 있는 md파일을 기준으로 `_site`내의 정적파일이 생성됩니다. 이제 Jekyll을 구동하여 작성한 페이지를 확인하도록 합시다. 기동이 완료되면 `localhost:4000`을 통해 확인가능합니다. &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;`jekyll serve `&lt;/pre&gt; &lt;/div&gt; 한번에 글을 작성하기 어려운 분들을 위한 Draft모드도 있습니다. 프로젝트 루트에 `_drafts`를 생성한뒤 임의의 md파일을 넣고 draft모드로 서버를 구동하면 `_draft`내의 md파일이 현재의 날짜로 세팅이 되어 페이지를 통해 확인이 가능할 수 있습니다. Draft모드로의 서버구동은 아래와 같습니다. &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;`jekyll serve --drafts `&lt;/pre&gt; &lt;/div&gt; * * * 이로써 정적인 포스트를 작성하기 위한 모든 작업을 마쳤습니다. Jekyll에서의 포스트 작성은 기본적으로 Markdown의 문법을 사용하지만 Liquid를 사용한 확장표현이 가능합니다. 아래에는 Markdown의 기본문법을 벗어난 좀더 다양한 방법을 통한 사용예제를 소개합니다. #### code snippet 아래와 같이 liquid에서 제공하는 `hilight`과 `endhilight`으로 코드를 감싸 표기할 수 있습니다. &lt;figure class=&quot;highlight&quot;&gt; &lt;pre&gt;`&lt;span class=&quot;nt&quot;&gt;nav&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;.72&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;nav&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.current&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;.72&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.subtitle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;`&lt;/pre&gt; &lt;/figure&gt; #### 타이틀 이미지 설정 페이지 상단에 멋진 이미지를 삽입하여 페이지의 품격을 높이기 위해서는 프로젝트 루트의 `/img/covers/`디렉토리 안에 원하는 이미지를 넣은뒤 Markdown문서 상단 페이지 속성에 `cover-image : 이미지 파일명`을 선언합니다. 본 페이지 상단과 같이, 삽입된 이미지는 자동으로 하단으로 갈수록 이미지가 fadeout 됩니다. #### 이미지 삽입 모든 이미지는 `img`디렉토리에서 관리합니다. 여타의 Markdown문법과 같이 사용하고, URL선언을 현재 프로젝트 내의 파일로 지정하면 손쉽게 이미지를 삽입할 수 있습니다. `site.baseurl`은 `_config.yml`에 선언되어 있음을 확인합시다. 출처를 명시할 때는 `&amp;lt;small&amp;gt;&amp;lt;/small&amp;gt;`를 사용합니다. &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;`![Forest]({{ site.baseurl }}/img/howtoyoutubeimport.png) `&lt;/pre&gt; &lt;/div&gt; #### 인용문 삽입 사용하려는 인용문을 `&amp;gt;`로 감싸 표기합니다. 이미지의 삽입과 마찬가지고 인용절 뒤에 `&amp;lt;small&amp;gt;&amp;lt;/small&amp;gt;`을 통해 출처 등을 남길 수 있습니다. &gt; It’ll be nipper heaps trent from punchy oldies. Trent from punchy no dramas when flat out like a tucker-bag. He hasn’t got a piker flamin frog in a sock. &lt;small&gt;— [Bogan Ipsum](http://boganipsum.com/)&lt;/small&gt; #### Youtube 영상 삽입 Youtube영상을 삽입하기 위한 [FitVids.js](http://fitvidsjs.com/)가 추가되어 있습니다. `iframe`을 사용하여 삽입을 합니다. 아래와 같이 유튜브 영상페이지로부터 삽입할 소스코드는 손쉽게 구할 수 있습니다. ![Forest](http://labyrins.github.io/img/howtoyoutubeimport.png) &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/i1n_1jrUEjU&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt; #### Tables 삽입 Table의 삽입은 [Github-Flavored-Markdown](https://help.github.com/articles/github-flavored-markdown/#tables)에 기반한 Markdown문법을 사용합니다. 자세한 문법은 위의 링크를 참고바랍니다. &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;`| Left-Aligned | Center Aligned | Right Aligned | | :------------ |:---------------:| -----:| | col 3 is | some wordy text | $1600 | | col 2 is | centered | $12 | | zebra stripes | are neat | $1 | Left-Aligned Center Aligned Right Aligned col 3 is some wordy text $1600 col 2 is centered $12 zebra stripes are neat $1 이로써 페이지의 Jekyll - Github Page를 통한 블로그 준비와 포스트 작성에 관한 모든 것이 정리 되었습니다. Tag기능과 SEO를 위한 설정은 추후에 세팅을 하도록 하고 이제부터는 지식을 쌓기만 하면 됩니다. 강철의 근성이 공부를 하는 여러분들에게 가호를 내리기 바라며..","categories":[],"tags":[]},{"title":"Lottie로 개발자와 친해지기","slug":"lottie로-개발자와-친해지기","date":"2017-03-08T00:50:55.000Z","updated":"2017-12-13T10:31:53.057Z","comments":true,"path":"2017/03/08/lottie로-개발자와-친해지기/","link":"","permalink":"http://www.devpools.kr/2017/03/08/lottie로-개발자와-친해지기/","excerpt":"","text":"‘마이크로 인터랙션’이라는 단어가 2015년부터 UX 디자인에서 조명받기 시작하면서(마이크로 인터랙션의 효과에 대한 글은 이 곳을 참조)우리는 Behance나 Dribbble에서 아름다운 UI 모션 GIF들을 어렵지 않게 발견할 수 있다. &nbsp; [caption id=”” align=”alignnone” width=”800”] 출처 : https://dribbble.com/eleken[/caption] 그러나 실제 프로젝트에 이런 것들을 적용하려고 하면 다음과 같은 장벽에 부딪치게 된다. 1. 디자이너가 원하는 모션을 만들 줄 모른다. 디자이너가 원하는 모션을 만들기 위해서는 AfterEffect와 같은 전문 모션 툴을 사용할 줄 알아야 하는데,제대로 쓰기 위해 상당히 많은 배움이 요구된다. 그렇기 때문에 본인이 원하는 모션과 가장 유사한 레퍼런스를 찾아 개발자에게 “비슷하게 해주세요~” 해야 하는데.. 개발자들은 멘붕이 올 수밖에 없다. &nbsp; 위의 이미지를 개발자들에게 들이 댔을때 표정 2. 개발자는 디자이너가 원하는 모션이 무엇인지 정확히 모른다. 마침 디자이너가 AE를 다룰 줄 알아서 개발자에게 GIF 파일을 만들어줬다고 하자. 개발자들은 이미지만 보고 ‘알아서’ 그 모션을 구현해야 한다. 위의 이미지를 예로 들면 리스트가 펼쳐질 때의 시간, 크기, 투명도를 스스로 체크하거나 디자이너에게 수치를 받아서 모든 액션을 다시 구현해야 하는 ‘낭비’가 발생하게 되는 것이다. 대안으로 디자이너가 만들어준 GIF 파일을 코드에 직접 삽입하는 방법이 있는데, GIF는 태생적으로 한계를 가진 이미지 포맷이고 용량, 디바이스 해상도 대응 이슈 등 극복해야 할 단점들이 많다. 3. 모두가 힘들어지는데 굳이 해야 하나?이런 이유들로 시간과 비용을 따져보면 UI에 모션을 넣는 애니메이션 작업은 팀 전체 관점에서 결코 효율적인 작업은 아니다. 특히 팀 속도와 낭비제거를 중점으로 삼는 Agile 프로세스 내 User Story 기반 작업에서 우선순위가 낮을 수밖에 없다. 결국 디자이너가 원하는 마이크로 인터랙션들을 넣기 위해서는 디자이너가 만든 이미지와 모션을 다시 개발자가 코드화 하는 낭비를 줄일 수 있는 방법이 있어야 한다는 것이다. 4. Airbnb의 ‘Lottie’ 그런 가려운 부분을 긁어주기 위해 출시된 라이브러리가 Airbnb의 Lottie라는 것이다. 자세한 내용은 이전 글을 참조해보자. 요컨대, 디자이너가 AE로 만든 모션을 바로 JSON파일로 Export 하고 그것을 다시 개발 코드에 삽입할 수 있게 된다는 것이다. 설치와 사용 방법은 Github에 상세히 써져 있으니 참고하도록 하자 5. Lottie의 적용마침 지금 살짝 도와주고 있는 토이 프로젝트가 있어서 간단한 스플래시 화면을 위한 AE 프로젝트를 만들어 개발자에게 전달해보았다. [caption id=”” align=”alignnone” width=”288”] 일 안하고 놀고 있다는 것을 들키고 말았다..[/caption] 하지만 실제 코드에 삽입했을 때는 프레임 드랍 현상이 발생하며, AE의 Repeater로 만든 애니메이션은 반영되지 않았다. 관련하여 Github에 Repeater, Frame Drop 에 대한 이슈가 등록되어 있다. 결론적으로 무작정 시도해봤었는데 현재 Bodymovin에서 Json 파일로 추출할 수 있는 AE 플러그인에는 한계가 있으며, 버전업을 통해 그 범위를 차차 늘려가고 있는 중인 것으로 보인다. 현재 이슈로 등록되어있는 내용을 정리하면 다음과 같다. 1. Edge 브라우저에서 Luma와 Alpha 마스크가 적용되지 않는 현상 2. Trim path로 그렸을 때 정확한 위치를 가져오지 못하는 현상 3. Blur 적용 문제 4. 3D 카메라 적용 버그 5. Glow effect 미지원 6. Repeater Effect 미지원 (곧 지원 예정) 다른 이슈들도 상당히 많이 등록되어 있고 활발한 토론이 이뤄지고 있지만 코드 차원의 문제가 아니라 AE 자체 이펙트를 지원하지 않는 것은 거의 위와 같은 마스크와 스트로크(사실 이게 핵심이긴 한데..) 유형이었다. 그럼에도 불구하고, 애니메이션을 만들고 개발자에게 전달하여 구현까지 상당히 빠른 시간 내에 적용해볼 수 있었다. (30분도 안 걸린 것 같다…!!) 이전에 영상파일로 전달하여 구현한 파일을 몇 번이나 확인하며 수정과정을 거쳤던 예전과 비교해 볼 때, json 파일만 전달하면 되기 때문에 나는 더 이상 애니메이션에 대해 개발자랑 토론할 필요도 없었다. (내가 만든 애니메이션을 코드로 이해해야 하는 것도 부담이었다.) [caption id=”” align=”alignnone” width=”250”] 개발자에게 결과물을 받아보는 나의 모습[/caption] 결론 위에 언급한 대로 디자이너는 사용자에게 더 많은 것을 보여주고 싶어 한다. 하지만 실제 프로젝트에서는 시간과 인력으로 대표되는 한정된 자원을 가지고 있기 때문에 내가 원하는 애니메이션까지 구현하는 것은 거의 불가능에 가까웠었다. 그러나 이렇게 효율적으로 애니메이션을 구현할 수 있는 라이브러리가 등장함에 따라 이제 앞으로는 Dribbble이나 Behance에서 볼 수 있는 화려한 애니메이션들이 실제 제품에 적용되어 출시될 수 있는 길이 열린 것 같다. 흔히 시간과 인력으로 대표되는 한정된 자원이라는 관점에서 이렇게 효율적으로 작업할 수 있는 방법이 지속적으로 개선되고 있다는 것은 디자이너로서 또 한 번 반길 일이 아닐 수 없으며, 고이 책장에 모셔(쳐 박아) 두었던, 모션그래픽 관련 책들을 다시 들춰봐야 할 때가 아닌가 싶다.","categories":[{"name":"UX/UI","slug":"UX-UI","permalink":"http://www.devpools.kr/categories/UX-UI/"}],"tags":[{"name":"lottie","slug":"lottie","permalink":"http://www.devpools.kr/tags/lottie/"}]},{"title":"ES2015 리팩토링 - 1. 몸풀기","slug":"ES2015 리팩토링-1.몸풀기","date":"2017-03-06T08:19:24.000Z","updated":"2018-01-07T06:42:35.334Z","comments":true,"path":"2017/03/06/ES2015 리팩토링-1.몸풀기/","link":"","permalink":"http://www.devpools.kr/2017/03/06/ES2015 리팩토링-1.몸풀기/","excerpt":"","text":"ES2015는 프론트엔드 개발자들에게 많은 화두를 던졌고 아주 진지하게 자바스크립트(JavaScript)가 세상을 집어삼킬 거라는 포부를 던지고 있다. 가지고 있던 언어적인 난해함을 벗어던지고 더 많은 개발자들이 좀 더 손쉽게 Java와 C 처럼 개발할 수 있도록 많은 개념들을 제시했다. 여타 다른 객체언어처럼 클래스(class)를 도입하고 화살(arrow)함수를 도입한게 그 좋은 예라고 볼 수 있을 것이다. &nbsp; 지금부터 시작하는 시리즈는 ES2015가 가고자 하는 방향에 맞춰 예전에 만들었던 많은 프로젝트들을 리팩토링 해 볼 것이다. 순서는 아마도 다음과 같이 진행이 될 것이다. (중간에 순서와 목차는 바뀔 수 있다) 몸풀기 빠레꽁(var let const) 함수와 모듈화가 JavaScript에 당췌 왜 필요할까 Promise 혹은 Async. 그래도 콜백지옥은 피할 수 없어 JavaScript로 바라보는 함수형 프로그래밍의 미래 이터레이터를 어떻게 쓸까 타입스크립트 도입은 바람직할까 &nbsp; 몸풀기시작하기 전에ES2015를 지금 당장 시작할 수 있을까 하는 생각을 하고 있는 사람이 있을텐데 지금은 어느덧 2017년. 이미 스펙은 오래전부터 안정화 되어 있다. 링크 : https://kangax.github.io/compat-table/es6/ 트랜스파일러를 선택하자. 꼬오오오오옥이요.위의 사이트 통계에 따르면 사파리는 100%, Edge14는 93%, chrome은 97%, FireFox는 94% 정도의 compatibility를 보장하고 있으니 최신 브라우저를 사용한다고 하면 대부분은 그냥 쓸 수 있다고 보면 될 것으로 보인다. 그럼에도 불구하고 ES2015를 쓰려고 하면 필자가 세가지 정도 이유에서 아직은 babel 같은 transpiler를 써야하는데 첫번째는 가장 중요한 것으로 보이는 모듈화에 대한 스펙이 ES2015에는 올라왔지만 번들링이슈를 포함한 개발환경과 브라우저에 동작하는 것이 다른 부분에 대한 어려움 때문이고 두번째는 아직 Internet Explorer를 많이 쓰고 있는 한국 환경이 걸림돌이고 마지막으로는 성능이슈이다. 첫번째 이야기 모듈에 대한 이야기는 좀 복잡한데 간단하게 설명하자면 ES2015 개발 환경이라면 아래 처럼 코드는 사용될 것이다 import somemodule from ‘ModuleFile’ 이런 식이라면 아래 그림처럼 상대 경로를 통해 해당 함수에 대한 로딩이 이루어져하는데 현재 번들링하는 관점에서는 비효율적으로 동작할 것이다. Button 액션을 담당하는 파일을 로딩해서 그 함수를 사용하게 되는 것이지만 일반적으로 작성하는 HTML을 생각해 보면 보통 JavaScript를 저렇게 로딩하고 있지 않고 아래처럼 script 태그를 이용해서 로딩을 시도하게 된다. &lt;script src=”someScript.js”/&gt; 이렇게 소스코드를 만들 때에는 보통 번들링이라는 형태로 여러파일들을 하나로 묶거나 (unify) 줄이는 ( uglify)를 하게 되는데 이런 과정을 거치는 이유는 js 파일을 다운로드 받는 속도의 문제와 보안문제 때문이다. 또 한꺼번에 js 파일들을 모두 로딩하는 것이 비효율적이라는 생각을 가지고 AMD 스펙같은데에서는 다이나믹 로딩을 사용하고 있다. 마침 dynamic import 에 대한 spec 또한 tc39의 3단계까지 올라가 있다 https://github.com/tc39/proposal-dynamic-import 아무래도 이게 정해지고 나면 import 에 대한 브라우저들의 지원이 확실해 질 듯하고 아마 모듈 로딩에 대해서도 코드 표준들이 바뀔 수 있을 것으로 보인다. 두번째 이유는 더이상 자세한 설명은 생략한다 세번째는 ES2015의 Iterator라던지 변수 scope등은 이전까지 JavaScript에 대해 잘 알지 못하던 사람들이 실수하던 코드를 다른 언어처럼 짤 수 있게 한 부분이 많아서 왠만한 개발자들이 짜던 것보다 코드 품질이 좋게 변환을 해 준다. [contentcards url=”http://sculove.github.io/blog/2016/07/26/Babel-%EB%84%88-%EB%AF%BF%EC%9D%84%EC%88%98-%EC%9E%88%EB%8B%88/“ target=”_blank”] 관련 블로그를 링크를 거는데 중요한 문단은 다음과 같다. “한마디로 정리한다면… 안타깝지만, Babel 은 저 보다 코드를 더 잘짰습니다. ㅠㅠ” &nbsp; 그럼 어떤 트랜스파일러를 사용할 것인가어떤 프레임워크를 사용하는가에 따라서 트랜스파일러도 보통은 선택되는 상황이지만 크게 babel과 traceur 로 양분이 되는데 작년 기준이기는 하지만 거의 babel의 압승으로 끝나는 듯한 모습이다. https://www.reddit.com/r/javascript/comments/33c9la/which_es6_transpiler/ 타입스크립트의 경우는 약간 다른 경우니까 나중에 다뤄보도록 하겠다. Linter를 사용할 것Linting이라고 하는 것은 기본적으로 버그가 날 수 있는 코드를 표시를 해주는 툴로써 이바닥의 요다인 Douglas 옹이 JSLint를 만들고 가장 많이 사용되는 툴은 ESLint 툴이다. 많은 에디터가 ESLint 플러그인을 제공하고 있으므로 꼭 설치하고 시작하는 것이 좋다. Webstrom 관련된 내용은 기존의 아티클을 읽어보기를 추천한다. &nbsp; 스타일 가이드를 활용하자JavaScript 관련해서 좋은 회사의 스타일 가이드들을 활용하는 것은 매우 추천할 만한 일이다. JavaScript관련해서 가장 핫한 스타일 가이드 중 하나는 airbnb의 스타일 가이드이고 이후 이어지는 글들은 상당히 많이 참조할 것이다. https://github.com/airbnb/javascript 기존 프로젝트를 재활용아무래도 이런 리팩토링은 legacy 프로젝트가 있어야 한다. 기존에 만들었던 서버리스 아키텍처 관련 프로젝트를 legacy로 리팩토링 해 보도록 하겠다. https://github.com/ehrudxo/standup","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.devpools.kr/categories/JavaScript/"},{"name":"ReactJs","slug":"JavaScript/ReactJs","permalink":"http://www.devpools.kr/categories/JavaScript/ReactJs/"},{"name":"Refactoring","slug":"JavaScript/ReactJs/Refactoring","permalink":"http://www.devpools.kr/categories/JavaScript/ReactJs/Refactoring/"}],"tags":[]},{"title":"개발바보들 2화 – git “Stash”","slug":"개발바보들-2화-git-stash","date":"2017-02-27T10:50:44.000Z","updated":"2018-01-07T06:42:35.334Z","comments":true,"path":"2017/02/27/개발바보들-2화-git-stash/","link":"","permalink":"http://www.devpools.kr/2017/02/27/개발바보들-2화-git-stash/","excerpt":"","text":"세상을 살아갈 때, 내가 계획한 대로 되는 일이 거의 없드시 개발도 마찮가지로, 다양한 상황을 겪게 됩니다. 이런 예상치 못한 일을 겪게 될 때, 유연하게 대처하는 방법 중 하나가 stash 입니다. stash는 Git에서 사용하는 임시저장 명령입니다. 다음과 같은 상황을 한번 생각해보세요. 다음 버전의 신규 기능을 개발하고 있는데, 며칠 전 배포한 버전의 기능에서 문제가 생겨서, 긴급히 수정해야하는 상황. 코딩을 한참 했는데, 커밋을 하려고 보니 master 브랜치( 헛!! )인 상황. &nbsp; 1번의 경우라면 임시로 커밋하고 릴리즈 브랜치로 이동해서 버그 패치를 만들 수 있을텐데, 2번의 경우는 그마저도 좀 어렵죠. 네. 이미 예상하셨드시 stash를 사용하면 간단합니다. 그러면 stash에 대해서 좀 더 자세히 설명해 볼께요. stash의 임시 저장은 저장하고 불러오고가 기본입니다. git stash 와 git stash pop만 아시면 되요. 임시 저장하고, 임시 저장된 내용을 가져오고 임시저장된 내용을 거죠. 쉽죠? 그런데 이렇게 하면 임시저장소를 하나만 사용하는 거예요. ( 그렇게 까지 사용하시지는 않겠지만) stash의 임시 저장공간 갯수는 제한이 없습니다. 그래서 pop 말고도 여러가지 명령이 있습니다. 저장하기 (SAVE) “git stash save [메시지]““git stash“ 명령은 save 옵션이 생략된 축약형입니다. 그대로만 사용하셔도 되지만, stash에 메시지를 지정할때는 save를 명시 해줘야 합니다. 목록보기(LIST) “_git stash list”_stash에 저장된 목록을 봅니다. stash@{숫자}의 형식으로 보여지게 되는데, 가장 최근에 stash된것이 0번이고, 이후로 저장하게 되면 순서가 밀리게 됩니다. 그래서 항상 0번이 최신이고 1,2 .. 순서로 밀려서 저장됩니다. 불러오기(APPLY) “git stash apply stash@{숫자}“지정된 stash를 불러옵니다. 이때, stash를 지정하지 않으면 가장 최신의( stash@{0}) 을 불러옵니다. stash될 때 인덱스에 추가된 상태로 적용하고 싶다면 –index 옵션을 주시면 됩니다. 삭제하기(DROP) “git stash drop [stash@{숫자}]“지정된 stash를 삭제합니다. 마찬가지로 stash를 지정하지 않으면 최신의 stash를 삭제합니다. 불러오고 삭제하기(POP) “git stash pop [stash@{숫자}]“apply와 drop을 한번에 수행합니다. 지정된 stash를 불러오고 삭제합니다. 마찬가지로 stash를 지정하지 않으면 최신의 stash를 삭제합니다. 내용 보기(SHOW) “git stash show[stash@{숫자}]“stash 된 내용을 확인합니다. 마찬가지로 stash를 지정하지 않으면 최신의 stash를 보여줍니다. 브랜치로 만들기(BRANCH) “git stash branch &lt;새로만들브랜치이름&gt; [stash@{숫자}]“stash 된 내용으로 새로운 브랜치를 만듭니다. 이때, pop과 마찬가지로 stash 된 내용은 삭제됩니다. &nbsp; stash는 여러개를 저장할 수 있고, 그것들을 골라서 적용할 수 있다, 그리고 stash된 걸로 브랜치를 만들 수 있다라고 알아두세요. ( 어차피 커맨드로 안하시잖아요? ) 그럼 다시 위의 상황을 다시 보시죠. 첫번째 경우에서는 git stash했다가 패치를 만들고 나서 다시 내 브랜치로 돌아와서 git stash pop하면 되고, 두번째 경우에서는 git stash branch feature-mymy처럼 브랜치를 생성하면 됩니다. 알고보니 참 쉽죠? ( 이제 임시커밋, 쩜 찍고 커밋 같은 걸로 혼나지 맙시다 ㅠㅠ ) &nbsp;","categories":[{"name":"Cartoon","slug":"Cartoon","permalink":"http://www.devpools.kr/categories/Cartoon/"}],"tags":[]},{"title":"[JavaScript] ESLint with WebStorm","slug":"javascript-eslint-webstorm","date":"2017-02-16T10:03:54.000Z","updated":"2018-01-07T06:42:35.409Z","comments":true,"path":"2017/02/16/javascript-eslint-webstorm/","link":"","permalink":"http://www.devpools.kr/2017/02/16/javascript-eslint-webstorm/","excerpt":"","text":"IntelliJ 의 웹 버전인 WebStorm을 사용할 때 ESLint를 사용하는 방법을 알아보겠습니다. 프로젝트에도 적용할 수 있겠지만 에디터에서 자동으로 문제가 있는 (혹은 버그를 생산하는) 코드를 미리 찾아 볼 수 있습니다. ESLint“Linting”이라는 행위는 버그가 날 수 있을 만한 코드를 찾아서 체크를 해 주는일을 의미합니다. In computer programming, lint is a Unix utility that flags some suspicious and non-portable constructs#Languagetools “C (programming language)”) (likely to be bugs) in [C language](https://en.wikipedia.org/wiki/C(programming_language) “C (programming language)”)source code; generically, lint or a linter is any tool that flags suspicious usage in software written in any computer language. The term lint-like behavior is sometimes applied to the process of flagging suspicious language usage. Lint-like tools generally perform static analysis of source code. - 위키피디아 Lint JavaScript 에서 이 Lint라는 의미를 처음 얘기한 사람은 Douglas crockford 였고 그는 JsLint라는 툴을 만들어 냅니다. JavaScript Definite Guide 같은 책에서도 내용을 언급하고 있습니다. [contentcards url=”http://www.jslint.com/“ target=”_blank”] 하지만 최근의 대부분의 JavaScript 커뮤니티에서 사용하는 Lint 툴은 ESLint 툴입니다. Nicholas Jakas에 의해 2013년에 나온 이 툴은 현재 여러 툴들에서 플러그인으로 사용되고 있습니다. [contentcards url=”http://eslint.org/“ target=”_blank”] “JSX” 지원하는 것에 대해서 언급이 첫페이지에 있습니다. React 와 JSX는 다르다고 하는군요. 아무래도 Pluggable한 아키텍처로 이루어져 있기에 오리지날인 JSLint에 비해 많이 쓰이는 거라고 보여집니다. webstorm웹스톰은 IntelliJ를 만든 Jetbrains에서 만든 웹 개발자용 IDE 입니다. 이클립스가 약간은 범용에 가깝다고 하면 이 웹 스톰은 JavaScript 최근 트렌드 및 개발 환경에 대한 이해가 큰 IDE 입니다. Node 모듈에 대한 이해도 가지고 있고 npm 을 기본적으로 작동시킬 수 있습니다. 유료 IDE기는 하지만 IntelliJ에 적응된 개발자들은 이webstorm의 여러가지 기능에 대해서 많이 만족하고 쓰고 있습니다. 최근 팝잇에 올라온 IntelliJ에 관한 글을 읽어보면 많은 인사이트들을 얻을 수 있습니다. [contentcards url=”http://www.popit.kr/%EC%9D%B8%ED%85%94%EB%A6%ACj-%ED%99%9C%EC%9A%A9-%EA%BF%80%ED%8C%81-42%EA%B0%80%EC%A7%80-%EC%A0%95%EB%A6%AC/“ target=”_blank”] WebStrom + ESLint이 WebStorm에서 ESLint를 설정하는 방법은 다음과 같습니다. preference -&gt; Languges &amp; Framework -&gt; ESLint 두가지를 셋팅해 주셔야 하는데 하나는 Node 를 지정하는 것이고 또 다른 하나는 ESLint 폴더를 지정해 주는 것입니다. Node 는 각자의 환경을 정하면 될 것입니다. ESLint 폴더를 지정할 때는 $ npm list -g|more 옵션을 통해서 어디에 설치를 했는지 확인해 주시면 됩니다. 확인이 되셨으면 `$ npm install -g eslint` [contentcards url=”https://github.com/eslint/eslint“ target=”_blank”] 이후 몇가지 모듈을 더 설치해야 합니다. $npm install eslint-plugin-react eslint-plugin-jsx-a11y eslint-plugin-import -g 실행해 주고 나서 WebStorm을 다시 작동시키면 아래와 같은 좋은 예를 볼 수 있습니다. &nbsp;","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.devpools.kr/categories/JavaScript/"}],"tags":[{"name":"ESLint","slug":"ESLint","permalink":"http://www.devpools.kr/tags/ESLint/"},{"name":"IntellisJ","slug":"IntellisJ","permalink":"http://www.devpools.kr/tags/IntellisJ/"},{"name":"WebStorm","slug":"WebStorm","permalink":"http://www.devpools.kr/tags/WebStorm/"}]},{"title":"[깃헙트렌드]Lottie","slug":"깃헙트렌드-lottie","date":"2017-02-09T08:10:47.000Z","updated":"2018-01-07T06:42:35.334Z","comments":true,"path":"2017/02/09/깃헙트렌드-lottie/","link":"","permalink":"http://www.devpools.kr/2017/02/09/깃헙트렌드-lottie/","excerpt":"","text":"며칠간 깃헙과 프론트엔드 커뮤니티 들에서 Lottie 프로젝트가 들썩들썩 했죠. 오늘은 이 Lottie 에 대해서 알아보겠습니다. [contentcards url=”http://airbnb.design/introducing-lottie/“ target=”_blank”] 버전은 플랫폼 별( iOS, android, react-native)로 크게 3가지가 있습니다. 모두 최근에 스타가 압도적으로 높아졌습니다. 무엇보다 Airbnb에 대한 기술적인 기대감들이 많이 반영되어 있는 듯 합니다. [caption id=”attachment_803” align=”aligncenter” width=”648”] 플랫폼 3대장?[/caption] iOS : https://github.com/airbnb/lottie-ios android : https://github.com/airbnb/lottie-android react-native: https://github.com/airbnb/lottie-react-native 1. bodymovin먼저 이 프로젝트를 이해하기 전에 이해해야 되는 프로젝트가 있습니다. 이름은 bodymovin인데 이 프로젝트는 이른바 디자이너와 개발자의 간격을 줄여주는 프로젝트입니다. [contentcards url=”https://github.com/bodymovin/bodymovin“ target=”_blank”] 조금 더 설명을 하자면 비주얼 이펙트를 만드는 디자인 프로그램 중에 After Effect가 있습니다. 디자이너와 사이트나 앱 작업을 하다보면 움직이는 gif라던지 mov 파일로 받게 될 때가 있는데 이 프로젝트는 After Effect의 플러그인으로 설치를 할 수 있습니다. 무엇을 하는 녀석인가요? After Effect로 비주얼 이펙트 작업을 하면 저장되는 파일 확장자는 .aep 이지만 gif나 mov로 저장을 할 수 있습니다. 그런데 bodymovin 은 그 움직임을 json 파일로 내려줍니다. JSON 파일로 내리면 어떻게 활용할 수 있나요? 이 bodymovin 에는 플레이어가 존재하는데 웹에서 돌려볼 수 있도록 bodymovin.js 를 제공합니다. 예를 들어 data.json 이라는 형태로 변환을 해서 아래와 같이 코드를 짜면 실행시켜 볼 수가 있습니다. var animData = { wrapper: document.getElementById('bodymovin'), animType: 'html', loop: true, prerender: true, autoplay: true, path: 'data.json' }; var anim = bodymovin.loadAnimation(animData); &nbsp; [caption id=”attachment_663” align=”aligncenter” width=”188”] 하지만 이것은 하울의 움직이는 gif[/caption] 2. LottieLottie는 이런 컨셉을 가지고 와서 모바일 App에서도 돌아갈 수 있도록 플레이어를 만들었습니다. [caption id=”” align=”aligncenter” width=”443”] 미안하다. 이 로티가 아니다.4대악 근절 로티. 출처 : 송파구청 http://smartsmpa.tistory.com/1263[/caption] 안드로이드 기준으로 실행을 한번 해 볼까요? $git clone https://github.com/airbnb/lottie-android.git git으로 내려받아서 실행을 시켜보면 샘플 프로젝트가 있다는 것을 확인해 볼 수 있습니다. [caption id=”attachment_805” align=”aligncenter” width=”257”] Sample Project[/caption] [caption id=”attachment_806” align=”aligncenter” width=”284”] 실행을 시켜봅시다.[/caption] 실행을 시켜보면 아주 경쾌한 화면이 실행됩니다. [caption id=”attachment_667” align=”aligncenter” width=”176”] spring intro! gif로는 생략이 많이 되네요.[/caption] Animation Viewer로 미리 샘플로 등록된 JSON 파일들로 테스트를 해 볼 수 가 있습니다. 그리고 파일을 참조할 수도 있으니 외부 URL 같은 부분도 참조해서 서비스할 수 있습니다. 3. 그래서?이게 어떤 역할을 할 것인지 개발자로써는 사실 확실하지 않아서 “개발바보들 팀”으로 영입이 확실시 되는 UX 디자이너에게 보여주면서 물어봤더니 굉장히 재밌어 하면서 다음과 같은 결론을 내었습니다. 디자이너와 개발자 사이의 협업의 간격이 한층 좁아질 것이다.(움직이는 gif나 mov포맷보다는 훨씬 유연해 질것으로 기대) 하지만 이벤트에 관련된 부분을 처리할 수 있도록 발전하지 않으면 어려울 거 같다.(현재 이벤트는 로딩 될때의 시계열 이벤트만 보입니다. 터치와 영역에 대한 인터페이스가 나오면 좋겠다) 그리고 실제로 우리가 만들어서 JSON을 내보니 아직 레이어가 여러개 일때 처리하는 방법을 잘 모르겠다는 것등의 어려움이 보였습니다. 하지만 간단하게 움직이는 gif의 로고를 처리하는 용도로는 매우 잘 사용할 수 있어 보입니다. 이걸로 프로젝트를 한번 진행하게 되면서 좋은 영감이 떠오르게 되면 다시한번 리뷰해 보도록 하겠습니다. &nbsp;","categories":[{"name":"GitHub-trend","slug":"GitHub-trend","permalink":"http://www.devpools.kr/categories/GitHub-trend/"}],"tags":[{"name":"lottie","slug":"lottie","permalink":"http://www.devpools.kr/tags/lottie/"},{"name":"airbnb","slug":"airbnb","permalink":"http://www.devpools.kr/tags/airbnb/"},{"name":"front-end","slug":"front-end","permalink":"http://www.devpools.kr/tags/front-end/"}]},{"title":"[팁] wordpress 에 https 적용하기","slug":"팁-wordpress-에-https-적용하기","date":"2017-02-08T08:57:12.000Z","updated":"2018-01-07T06:42:35.378Z","comments":true,"path":"2017/02/08/팁-wordpress-에-https-적용하기/","link":"","permalink":"http://www.devpools.kr/2017/02/08/팁-wordpress-에-https-적용하기/","excerpt":"","text":"크롬이 https 사이트가 아니면 warning을 띄우게 되었다는 사실이 알려지면서 많은 설치형 블로거들이 난감해 하시는 분들이 있어서 포스팅 합니다. [caption id=”attachment_612” align=”aligncenter” width=”648”] 크롬 도금의 자물쇠…[/caption] 세 단계 정도로 나뉘어서 해야할 일들이 있을 것입니다. (세 단계 모두 지정된 플랫폼들이 있어서 해당사항이 아니신 분들도 있을 거 같습니다. ) 호스팅 서비스 port 설정( Amazon 기준) 웹서버 설정( Ubuntu &amp; Apache2 설정 ) 인증서 설치( Let’s Encrypt 설정) &nbsp; 1. 호스팅 서비스아마존의 경우는 아마존 콘솔로 들어가셔서 Network &amp; Security -&gt; Security Groups 에 들어가셔서 서비스가 가지고 있는 정책에 맞는 그룹을 선택하신 후에 Inbound Edit을 선택하시고 https 포트로 들어올 수 있도록 작업을 해 주셔야 합니다. [caption id=”attachment_611” align=”aligncenter” width=”648”] 어디서든 들어 올 수 있게[/caption] &nbsp; ∴이후 아래 설명될 3번 항목만 진행해도 적용이 될 거 같지만 혹시 다른 방법이나 self signed 된 인증서를 통한 설정을 알고 싶은 사람들을 위해서 2번을 설명합니다. 2. Let’s EncryptLet’s Encrypt는 무료라서 3개월에 한번씩 갱신해야 되지만 사용할 수 있는 인증서를 만들어 줍니다. 사이트에 들어가서 무언가를 다운로드 받아야 되나 살펴보면 Let’s Encrypt 에서 바로 제공하는 것은 없고 자동화해 주는 툴이 있는 링크를 제공해 줍니다. 2.1. certbot제가 찾아간 사이트는 바로 certbot이였습니다. https://certbot.eff.org/ &nbsp; 여기서 작업을 하려면 ubuntu 버전 명령어를 통해 버전을 알아야 합니다. $cat /etc/*releaseDISTRIB_ID=Ubuntu DISTRIB_RELEASE=14.04 DISTRIB_CODENAME=trusty DISTRIB_DESCRIPTION=\"Ubuntu 14.04.3 LTS\" NAME=\"Ubuntu\" VERSION=\"14.04.3 LTS, Trusty Tahr\" ID=ubuntu ID_LIKE=debian PRETTY_NAME=\"Ubuntu 14.04.3 LTS\" VERSION_ID=\"14.04\" HOME_URL=\"http://www.ubuntu.com/\" SUPPORT_URL=\"http://help.ubuntu.com/\" BUG_REPORT_URL=\"http://bugs.launchpad.net/ubuntu/\" &nbsp; [caption id=”attachment_616” align=”alignnone” width=”561”] certbot 좋아용[/caption] &nbsp; 이렇게 선택하고 나면 해당 installation 페이지로 안내해 줍니다. 저의 경우는 다음 페이지가 되겠죠. https://certbot.eff.org/#ubuntutrusty-apache 2.2. 인스톨2.3. 실행인스톨 하고 chmod로 실행할 수 있도록 만들어 줍니다. $ ./certbot-auto 그리고 저 명령어를 한번 실행해 주면 자동적으로 아파치를 찾아서 바꿔줘야 할 옵션들을 자동으로 찾아서 바꿔줍니다. [caption id=”attachment_617” align=”alignnone” width=”648”] 이런 형태의 아웃풋들이 출력됩니다. 설정들을 지속적으로 물어봅니다.[/caption] 그러고 나면 warning 이 더 이상 뜨지 않습니다. 2.4. 갱신3개월에 한번씩 갱신하기 위해서는 아래의 명령어를 cron 잡에 등록해서 작업하시면 됩니다. $./path/to/certbot-auto renew –quiet –no-self-upgrade 아래 내용은 2번까지 하신 분들은 크게 필요하지 않을지도 모르지만 혹시라도 https 만 적용하기 위해서 필요하신 분들을 위해서 남겨둡니다. Self-signed 인증서를 쓰는 경우인데 크롬 버전이 올라가면 이 경우는 에러는 여전히 뜰 것으로 예상됩니다. 3. 웹서버 설정(Manually)우분투의 경우는 아파치, a2enmod등을 가지고 생각보다 손쉽게 작업을 진행할 수 있습니다. 아래의 명령어들은 혹시 권한이 필요한 경우가 생기면 sudo를 사용해서 진행하시면 됩니다. 3.1. SSL 모듈 설치$sudo a2enmod ssl $sudo service apache2 restart 3.2. Self-signed 인증서 만들기a2enmod는 apache2 모듈설정을 자동화해주는 스크립트입니다. SSL을 설치하고 재시작해 줍니다.(http://man.he.net/man8/a2enmod) $sudo mkdir /etc/apache2/ssl`&lt;/pre&gt; &lt;pre class=&quot;code-pre &quot;&gt;`$sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/apache2/ssl/self_signed.key -out /etc/apache2/ssl/``self_signed``.crt`&lt;/pre&gt; &amp;nbsp; ##### 3.3\\. 버추얼 호스트 설정파일 만들기 &lt;pre class=&quot;code-pre &quot;&gt;`$sudo vi /etc/apache2/sites-available/default-ssl.conf 로 파일을 열어서 아래와 같이 편집해 줍니다. &lt;IfModule mod_ssl.c&gt; &lt;VirtualHost _default_:443&gt; ServerAdmin ehrudxo@gmail.com ServerName devpools.kr ServerAlias www.devpools.kr DocumentRoot /somewhere/ ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined SSLEngine on SSLCertificateFile /etc/apache2/ssl/self_signed.crt SSLCertificateKeyFile /etc/apache2/ssl/self_signed.key &lt;FilesMatch \"\\.(cgi|shtml|phtml|php)$\"&gt; SSLOptions +StdEnvVars &lt;/FilesMatch&gt; &lt;Directory /usr/lib/cgi-bin&gt; SSLOptions +StdEnvVars &lt;/Directory&gt; BrowserMatch \"MSIE [2-6]\" \\ nokeepalive ssl-unclean-shutdown \\ downgrade-1.0 force-response-1.0 BrowserMatch \"MSIE [17-9]\" ssl-unclean-shutdown &lt;/VirtualHost&gt; &lt;/IfModule&gt; 3.4. 활성화 하기이제 다음 명령어로 활성화 하고 재 시작해 줍니다. `$sudo a2ensite default-ssl.conf $`sudo service apache2 restart 이제 접속해 보시면 잘 돌아가시는 걸 확인할 수 있습니다. [caption id=”attachment_619” align=”alignnone” width=”648”] 앗싸~[/caption] &nbsp;","categories":[{"name":"Dev-Tips","slug":"Dev-Tips","permalink":"http://www.devpools.kr/categories/Dev-Tips/"}],"tags":[{"name":"https","slug":"https","permalink":"http://www.devpools.kr/tags/https/"},{"name":"wordpress","slug":"wordpress","permalink":"http://www.devpools.kr/tags/wordpress/"}]},{"title":"[간단팁] 시놀로지 NAS에 Let&#039;s Encrypt 인증서 적용하기","slug":"간단팁-시놀로지-nas에-lets-encrypt-인증서-적용하기","date":"2017-02-05T10:22:46.000Z","updated":"2017-12-13T09:25:57.469Z","comments":true,"path":"2017/02/05/간단팁-시놀로지-nas에-lets-encrypt-인증서-적용하기/","link":"","permalink":"http://www.devpools.kr/2017/02/05/간단팁-시놀로지-nas에-lets-encrypt-인증서-적용하기/","excerpt":"","text":"https://medium.com/@ikaruce/%EC%8B%9C%EB%86%80%EB%A1%9C%EC%A7%80-nas%EC%97%90-lets-encrypt-%EC%9D%B8%EC%A6%9D%EC%84%9C-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0-3d42d8f30c38#.q7qzs0ym9 시놀로지 NAS에 5분만에 인증서 적용하기. ( 이제 안전하지 않은 페이지여 안녕~!! )","categories":[{"name":"Small talk","slug":"Small-talk","permalink":"http://www.devpools.kr/categories/Small-talk/"}],"tags":[{"name":"lets encrypt","slug":"lets-encrypt","permalink":"http://www.devpools.kr/tags/lets-encrypt/"},{"name":"synology","slug":"synology","permalink":"http://www.devpools.kr/tags/synology/"}]},{"title":"[초보용] Git 되돌리기( Reset, Revert )","slug":"초보용-git-되돌리기-reset-revert","date":"2017-02-05T07:59:57.000Z","updated":"2018-01-07T06:42:35.334Z","comments":true,"path":"2017/02/05/초보용-git-되돌리기-reset-revert/","link":"","permalink":"http://www.devpools.kr/2017/02/05/초보용-git-되돌리기-reset-revert/","excerpt":"","text":"개발바보들 1화 git “back to the future”에서 설명한 Reset / Revert에 대한 글입니다. &nbsp; Git을 익히면서 헷갈렸던 것들 중의 하나가 이력을 되돌리기 입니다. Git에서 이력을 되돌리는 방법은 여러가지가 있지만, 그 중에 대표적인게 Reset과 Revert 입니다. 단어 의미만 보고는 둘 사이의 차이를 알기 쉽지 않은데, 풀어서 설명해보면 Reset은 시계를 다시 맞추드시 이력을 그 당시로 되돌리는 것이고, Revert는 이전 이력은 그대로 두고, 그 되돌릴 커밋의 코드만 원복시킵니다. 이 개념을 이리온님께서 만화로 설명해 주신게 있는데 참고하시면 이해하는데, 더 도움이 됩니다. ( 개발바보들 1화 — git “Back to the Future ”) &nbsp; 1. Reset 앞에서 설명한대로 Reset은 시계를 다시 맞추는 것입니다. 돌아 가려는 커밋으로 리파지토리는 재설정되고, 해당 커밋 이후의 이력은 사라집니다. 예를 한번 들어볼까요? ( 일반적인 개발 이력과는 차이가 있지만, 이해가 쉽게 하기 위해 영화 “유주얼 서스펙트”를 이용했고 이에 대한 스포일러를 포함합니다. 하지만, 이미 보셨거나 들어보셨을 것이라 생각합니다. ) 그림1. 기대했으나 스포일러 때문에 실망했던 이력 [그림1]을 보시면 기대했던 영화를 예매하였으나 스포일러 때문에 실망했던 이력을 볼 수 있습니다. 그래서 스포일러를 보기 전으로 이력을 되돌리기로 합니다. 마치 내가 기억하고 있는 내용을 변경하는 거죠. 커밋 a3bbb3c 이후의 기억은 지우고 싶습니다. Reset은 다음과 같이 사용합니다. &nbsp; $ git reset &lt;옵션&gt; &lt;돌아가고싶은 커밋&gt; &nbsp; 여기에 옵션이 몇가지 있는데 자주 쓰는 것 hard, mixed, soft 세가지가 있습니다. 영화를 예매하고 검색한 이력인 a3bbb3c 이후에 발생했던 ( 표를 예매하고, 팝콘과 사이다를 구매 같은)변화에 대해서 어떻게 할지에 대한 것입니다. &nbsp; (1) hard 돌아가려는 이력이후의 모든 내용을 지워 버립니다. 이렇게 하면 표를 예매하고, 팝콘과 사이다를 구매했던 모든 것들이 지워지고 모든것이 초기화 됩니다. &nbsp; $ git reset --hard a3bbb3c &nbsp; 그림2. hard 옵션으로 reset한 후의 이력 &nbsp; (2) soft 돌아가려 했던 이력으로 되돌아 갔지만, 이후의 내용이 지워지지 않고, 해당 내용의 인덱스(또는 스테이지)도 그대로 있습니다. 바로 다시 커밋할 수 있는 상태로 남아있는 것입니다. 기억은 되돌려졌지만, 표와 팝콘과 사이다는 손에 들려있는 상태입니다. &nbsp; $ git reset --sorf a2bbb3c &nbsp; 그림3. soft옵션으로 reset한 후의 이력 그림4. soft옵션으로 reset한 후의 파일 상태 (3) mixed ( 옵션을 적지 않으면 mixed로 동작합니다. ) 역시 이력은 되돌려집니다. 이후에 변경된 내용에 대해서는 남아있지만, 인덱스는 초기화 됩니다. 커밋을 하려면 다시 변경된 내용은 추가해야 하는 상태입니다. 기억도 되돌려 졌고, 표와 팝콘 그리고 사이다는 사야겠다는 마음만 남아있다고 할 수 있습니다. &nbsp; $ git reset --mixed a2bbb3c &nbsp; 그림5. mixed 옵션으로 reset한 후의 이력 그림6. mixed 옵션으로 reset한 후의 파일 상태 &nbsp; 또 되돌아가는 커밋을 커밋 해쉬를 통해서 직접 지정할 수도 있고 현재부터 몇개의 커밋을 되돌릴 수도 있습니다 [그림1]에서 처럼 15413dc 부터 a3bbb3c로 돌아가려면 &nbsp; $ git reset HEAD~6 &nbsp; 위와 같이 현재부터 6개 이전 이력으로 돌아가라라고 상대적으로 지정할 수도 있습니다. &nbsp; 2. Revert Revert는 상태를 되돌린다고 볼 수 있습니다. 스포를 당한 커밋을 revert하고 현재 작성중인 코드만 본다면 reset과 동일한 (hard 옵션 준거만 빼고) 결과를 가집니다. 하지만 이력은 같지 않습니다. 먼저 결과를 먼저 보고 이어가겠습니다. (reset과 동일하게 스포일러를 당한 것을 되돌립니다) 그림7. 스포일러 당한 커밋을 되돌림 이전 이력은 그대로 있고, 스포일러를 당했던 커밋만을 되돌렸습니다. 마치 스포일러 당한것에 대한 것을 기억하고 있지만, 그 내용은 알지 못하는 것처럼 말이죠. ( 이 내용은 앞에서 언급했던 Devpools의 설명에 나온 모나리자 눈썹의 내용이 더 이해가 쉬울것 같습니다. ) revert 를 하는 방법과 스포일러 댓글의 커밋을 되돌리는 것은 &nbsp; # git revert &lt;되돌릴 커밋&gt; git revert 2664ce8 &nbsp; 이고 되돌릴 커밋이 여러개라면 범위를 주어서 여러개를 선택할 수도 있습니다. [그림1]에서 예를 들면 댓글을 읽은 것부터 영화관을 나설때까지 모두 되돌리려면 아래 코드처럼 범위를 주시면 됩니다. &nbsp; git revert 2664ce8..15413dc &nbsp; &nbsp;3. 언제 reset을 하고 언제 revert를 해야하나?단순하게 생각하면 reset을 하는 것이 revert를 하는 것보다 이력을 더 단순하게 만들어주기 때문에 revert의 장점이 많지 않아 보입니다. 하지만 이력 중간에 로그 출력하도록 한 커밋이 있고 그 커밋만을 취소하려고 한다면 reset을 사용하여 이후의 이력을 모두 제거하는 것은 이후 이력을 모두 날려버리는 결과를 나을 것입니다. 이런 때 revert를 사용하여 해당 커밋의 내용만 되돌릴 수 있습니다. 또한 이미 원격 리파지토리에 push 를 한 상태라면 reset을 사용하면 reset 하기 이전으로 되돌리기 전까지는 push 할 수 없게됩니다. (물론 force라는 무시무시한 옵션이 있기는 합니다. ) 그래서 이미 push 한 코드라면 미련을 버리고 revert를 하셔야 합니다.&nbsp;","categories":[{"name":"Dev-Tips","slug":"Dev-Tips","permalink":"http://www.devpools.kr/categories/Dev-Tips/"}],"tags":[{"name":"git","slug":"git","permalink":"http://www.devpools.kr/tags/git/"},{"name":"reset","slug":"reset","permalink":"http://www.devpools.kr/tags/reset/"},{"name":"revert","slug":"revert","permalink":"http://www.devpools.kr/tags/revert/"}]},{"title":"서버리스 아키텍처 소셜미디어 개발기 7편","slug":"서버리스-아키텍처-소셜미디어-개발기-7편","date":"2017-02-01T01:29:09.000Z","updated":"2017-12-13T09:40:19.872Z","comments":true,"path":"2017/02/01/서버리스-아키텍처-소셜미디어-개발기-7편/","link":"","permalink":"http://www.devpools.kr/2017/02/01/서버리스-아키텍처-소셜미디어-개발기-7편/","excerpt":"","text":"서버리스 아키텍처 소셜미디어 개발기 7편대망의 마지막 편입니다. 서버리스 아키텍처 소셜미디어 개발기 6편_나프다 발표 이후 한참 글이 뜸했네요. 이제 점점 끝이 보입니다. 속도를 내야겠네요 사용자 스토리4 1. 김개발은 아침 스탠드업 시간에 같이 이야기를 나눌 수 있는 주제를 위해 스탠드업이라는 웹 앱을 찾아간다. …_techstory.shma.so 지난 편에 이어 계속 하겠습니다. 우린 모두 한 그룹이니까요~ 1\\. 김개발은 아침 스탠드업 시간에 같이 이야기를 나눌 수 있는 주제를 위해 스탠드업이라는 웹 앱을 찾아간다. 이렇게 함으로써 사람들과 IT에 대한 주제로 커뮤니케이션을 할 수 있다. 2\\. 김개발이 사이트를 방문해서 자신이 어제 유심하게 읽은 글을 올릴 수 있다. 이렇게 하면 다른 사람들이 볼 수 있다. \\* 에디터 창에 인터넷 링크를 입력하면 자동적으로 페이지 카드가 만들어 진다. 이 때 페이지 링크는 oEmbed를 써서 동작하는데 웹 표준을 준수하고 자연스러워야 한다. \\* 에디터 창은 하나만 있고 거기서 글을 작성하고 업로드 하면 글이 외부 클라우드 공간에 저장이 된다. 3\\. 김개발이 작성한 글이 목록으로 보여진다. 이렇게 함으로써 다른 사람들이 목록을 확인할 수 있다. 4\\. 김개발은 google ID를 가지고 로그인을 할 수 있다. 이렇게 함으로써 내가 쓴 글만 따로 모아서 볼 수 있다.** 5\\. 김개발은 그룹 별로 스탠드업을 만들 수 있고 각 그룹별고 글을 올릴 수 있다** `&lt;/pre&gt; 그룹 기능을 넣고 나서는 내가 이럴려고 계속한다 했나 자괴감 들어.라는 순간이 몇번이나 왔는지 모르겠습니다. 이유는 몇가지가 있는데 첫번째는 처음 설계를 몇번이나 바꿔야 하는 것이며 , 두 번째는 테스트 코드가 어느 순간 동작하지 않는 것이었습니다. 설계를 바꾸는 것은 개발의 숙명이라 받아들일 수 있었는데 테스트 코드는 어느 순간 놓치고 나니 TDD를 진행하지 못한 부분이 있어 많이 부끄러워 지더군요. 본론으로 들어가서 이번 글에는 유저스토리를 하나 더 추가해 보았습니다. “**김개발은 그룹을 만들 수 있고 각 그룹별고 글을 올릴 수 있다.” **이 내용을 토대로 어떻게 들어갔는지 한번 살펴 보도록 하겠습니다. #### [](http://keen.devpools.kr/2017/02/01/%5B2017-02-01%2010:29:09%5D%E1%84%89%E1%85%A5%E1%84%87%E1%85%A5%E1%84%85%E1%85%B5%E1%84%89%E1%85%B3%20%E1%84%8B%E1%85%A1%E1%84%8F%E1%85%B5%E1%84%90%E1%85%A6%E1%86%A8%E1%84%8E%E1%85%A5%20%E1%84%89%E1%85%A9%E1%84%89%E1%85%A7%E1%86%AF%E1%84%86%E1%85%B5%E1%84%83%E1%85%B5%E1%84%8B%E1%85%A5%20%E1%84%80%E1%85%A2%E1%84%87%E1%85%A1%E1%86%AF%E1%84%80%E1%85%B5%207%E1%84%91%E1%85%A7%E1%86%AB/#0-%EA%B3%A0%EC%B9%A9%EB%8B%88%EB%8B%A4 &quot;0\\. 고칩니다&quot;)0\\. 고칩니다 이전에 firebase-ui 때문에 외부에 소스를 뺀 적이 있죠? 시간은 어느덧 두달이 지났으니 당연히 npm으로 등록이 되었습니다. 나프다 발표하는 당일에 추가가 되기는 했었습니다. &lt;pre&gt;`$npm install firebase firebaseui --save `&lt;/pre&gt; #### [](http://keen.devpools.kr/2017/02/01/%5B2017-02-01%2010:29:09%5D%E1%84%89%E1%85%A5%E1%84%87%E1%85%A5%E1%84%85%E1%85%B5%E1%84%89%E1%85%B3%20%E1%84%8B%E1%85%A1%E1%84%8F%E1%85%B5%E1%84%90%E1%85%A6%E1%86%A8%E1%84%8E%E1%85%A5%20%E1%84%89%E1%85%A9%E1%84%89%E1%85%A7%E1%86%AF%E1%84%86%E1%85%B5%E1%84%83%E1%85%B5%E1%84%8B%E1%85%A5%20%E1%84%80%E1%85%A2%E1%84%87%E1%85%A1%E1%86%AF%E1%84%80%E1%85%B5%207%E1%84%91%E1%85%A7%E1%86%AB/#1-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-%EC%A0%84%EC%97%90 &quot;1\\. 시작하기 전에&quot;)1\\. 시작하기 전에 ![](https://cdn-images-1.medium.com/max/1600/1*OlvH8Q0PNeY0IZpiFELC8g.jpeg)그림1 그림 1과 같은 역할을 하는 UI를 먼저 만들어 보려고 합니다. 기본 UI 기능은 그룹을 선택해야 할 수 있어야 하고 그룹을 만들 수 있어야 합니다. 그래서 선택을 할 수 있는 회전목마(Carousel) UI가 필요하고 그룹을 만들 수 있는 UI도 필요해서 새 그룹이라는 버튼을 달아 두었습니다. #### [](http://keen.devpools.kr/2017/02/01/%5B2017-02-01%2010:29:09%5D%E1%84%89%E1%85%A5%E1%84%87%E1%85%A5%E1%84%85%E1%85%B5%E1%84%89%E1%85%B3%20%E1%84%8B%E1%85%A1%E1%84%8F%E1%85%B5%E1%84%90%E1%85%A6%E1%86%A8%E1%84%8E%E1%85%A5%20%E1%84%89%E1%85%A9%E1%84%89%E1%85%A7%E1%86%AF%E1%84%86%E1%85%B5%E1%84%83%E1%85%B5%E1%84%8B%E1%85%A5%20%E1%84%80%E1%85%A2%E1%84%87%E1%85%A1%E1%86%AF%E1%84%80%E1%85%B5%207%E1%84%91%E1%85%A7%E1%86%AB/#2-%EA%B7%B8%EB%A3%B9-%EB%A7%8C%EB%93%A4%EA%B8%B0 &quot;2\\. 그룹 만들기&quot;)2\\. 그룹 만들기 그룹을 만들기 위해서는 당연히 기존의 firebase 에 저장된 스키마에 대한 조정이 필요하겠죠? ![](https://cdn-images-1.medium.com/max/1600/1*sSrIpCI61RQLXqUo1oReFg.jpeg)posts 생긴 형태 기존의 posts라는 스키마에는 모든 글이 저장되고 이 내용을 읽어와서 작업을 했었는데, 이제는 group 별로 조정할 일들이 생겼습니다. ![](https://cdn-images-1.medium.com/max/1600/1*p3_WoYtd7UWa4l3E1wrgMQ.jpeg)기존의 posts는 더 이상 필요가 없다. groups는 그룹을 만들면 생성될 수 있는 엔트리가 될 것이고 group-posts에 각 그룹 별로 아티클이 들어갈 수 있도록 작업을 할 것입니다. 먼저 그룹을 생성하고 리스트 하는 작업을 해 보겠습니다. 생성을 하려면 다음과 같은 UI를 통해 그룹간 이동을 할 수 있습니다. ![](https://cdn-images-1.medium.com/max/1600/1*sVIaS0JmBfItOazHLlQURQ.jpeg) 일단 이 일련의 작업들을 하는 세가지 버튼을 만들어 보겠습니다. 먼저 그룹 페이지에 처음 들어오게 되면 그룹에 해당하는 이미지가 보여지고 그룹 작업을 선택하면(1) 새 그룹을 만들 수 있어야 하며(3), 다른 그룹을 선택할 수도(4) 있어야 합니다. 글 쓰기 버튼을 선택하면(2) 글 쓰기를 할 수 있는 에디터가 나와서 글이 작성되어야 하며 여러가지 모든 상황에서 원래 그룹으로 원상복귀(5)할 수 도 있어야 합니다. 어떤 작업을 먼저 하면 좋을까요? **React 개발에 있어서는 state를 어떻게 관리할 것인가** 를 첫번째 질문으로 가져가야 할 것입니다. 외부에서 URL 기반으로 타이핑해서 들어올 때 처음 형태를 어떻게 가져야 할지를기준으로 설계를 해 보겠습니다. 1. 기존의 edit를 하던 부분을 URL로 처리했던 부분은 그렇게 중요하지 않을 것입니다. 2. 내부에서 선택 버튼을 누를 경우는 URL이 변경되어야 합니다. 3. 글쓰기 를 작성하면 URL은 변경되지 않지만 버튼의 state는 변경되어야 합니다. ![](https://cdn-images-1.medium.com/max/1600/1*W6HXkcZHcGVkR9-5GLaelQ.jpeg) 먼저 세가지 버튼에 대해서 상태를 유지하고 그 값에 따라 아래 Action Bar를 선택하도록 해 보겠습니다. ![](https://cdn-images-1.medium.com/max/1600/1*X5npSzmjYIiumCvSHl-wzA.jpeg)상태에 따라 색도 변하도록 설계하자버튼 선택에 따라 state 가 바뀌고, 변수 선택에 따른 컴포넌트 렌더링이 달라지게 설계! 버튼을 클릭하면 selectedButton 즉 선택한 버튼을 확인하게 되고 그에 따라서 CSS 값을 변경해 주는 작업을 하는 컴포넌트입니다. 이걸 가능하게 하기 위해서 actions, reducers 폴더 밑에 각각 Button.js파일을 만들었습니다. &lt;pre&gt;`//ActionBar를 그려준다. 안드로이드의 액션바와는 다르다. 액션바와는... {**this**.renderActionBar(selectedButton)} //그룹이 존재하고 버튼선택이 된 경우 {groupName &amp;amp;&amp;amp; !selectedButton&amp;amp;&amp;amp; &amp;lt;div style={{width:'100%',height:150,position:'relative'}}\\&amp;gt; &amp;lt;img src={logoUrl} alt={groupName} style={{width:'100%',height:150}}/\\&amp;gt; &amp;lt;div className=&amp;quot;style\\_title&amp;quot; style={{width:\"100%\"}}\\&amp;gt;{groupName}&amp;lt;/div\\&amp;gt; &amp;lt;/div\\&amp;gt; } `&lt;/pre&gt; renderActionBar는 ActionBar 가 선택된 버튼에 따라서 다르게 그려지도록 했고 어떤 버튼도 선택되지 않을 경우에는 그룹의 로고 URL을 보여주도록합니다. **2.1\\. 그룹 만들기** 자, 그럼 그룹은 어떻게 만들까요? ![](https://cdn-images-1.medium.com/max/1600/1*AaIZeG2Tpgf58IMmPG_H5A.jpeg)파일 업로드가 시급하다. 그룹명이 존재하는지 (1)중복 확인을 한 후에 (2)드래그앤 드롭을 통한 파일 업로드, (3)그룹생성 의 순서대로 이루어집니다. 이중 1,3번의 Group의 Real Time DB에 대한 DAO는 여기서 다루지 않겠습니다. (소스에서 확인하세요.) 드래그앤 드롭해서 파일 업로드 하는 부분만 확인을 하면 Firebase의 FileUpload에 대한 인터페이스와 Dropzone UI 에 대한 이야기로 나눠서 볼 수 있을 거 같습니다. **Firebase FileUpload** src 폴더 아래 FileUtil.js를 만들었습니다. 주목 하셔야 할 부분은 다음의 storageRef 입니다. &lt;pre&gt;`//storageRef 정의 var storageRef = firebase.storage().ref(); **// 업로드 var **uploadTask = storageRef.child(&amp;apos;images/&amp;apos; + file.name).put(file, metadata); // 이벤트 정의 uploadTask.on(firebase.storage._TaskEvent_.STATE\\_CHANGED,....(중략) `&lt;/pre&gt; 그럼 이 부분을 호출한 부분을 살펴 볼까요? **Dropzone** src 파일 밑에 GroupAdd.js 라는 파일을 만들었습니다. 이 파일에서 중요하게 눈여겨 보실 부분은 react-dropzone이라는 라이브러리를 이용했다는 점이고 그 부분은 소스의 처음 import 부분에 포함이 되어 있습니다. &lt;pre&gt;`&amp;lt;Dropzone onDrop={(acceptedFiles, rejectedFiles)=\\&amp;gt;**this**.onDrop} accept=&amp;quot;image/\\*&amp;quot; className=&amp;quot;drop-file padding-top&amp;quot;\\&amp;gt; &amp;lt;div\\&amp;gt;파일을 드래그앤 드롭 하거나 클릭해서 선택하세요&amp;lt;/div\\&amp;gt; &amp;lt;/Dropzone\\&amp;gt; `&lt;/pre&gt; Dropzone 에서 onDrop이라는 이벤트를 만들었고 이 이벤트는 기본적으로 허용된 파일과 거절된 파일을 인자로 받아서 처리해 줍니다. &lt;pre&gt;`onDrop (acceptedFiles, rejectedFiles) { ... **if**(acceptedFiles &amp;amp;&amp;amp; acceptedFiles.length\\&amp;gt;0){ **...** imageUpload(acceptedFiles, 1, (downloadUrl)=\\&amp;gt;{ **this**.setState({ groupImage:downloadUrl, isSpin: **false **}); }); }**else**{ ... } } `&lt;/pre&gt; #### [](http://keen.devpools.kr/2017/02/01/%5B2017-02-01%2010:29:09%5D%E1%84%89%E1%85%A5%E1%84%87%E1%85%A5%E1%84%85%E1%85%B5%E1%84%89%E1%85%B3%20%E1%84%8B%E1%85%A1%E1%84%8F%E1%85%B5%E1%84%90%E1%85%A6%E1%86%A8%E1%84%8E%E1%85%A5%20%E1%84%89%E1%85%A9%E1%84%89%E1%85%A7%E1%86%AF%E1%84%86%E1%85%B5%E1%84%83%E1%85%B5%E1%84%8B%E1%85%A5%20%E1%84%80%E1%85%A2%E1%84%87%E1%85%A1%E1%86%AF%E1%84%80%E1%85%B5%207%E1%84%91%E1%85%A7%E1%86%AB/#3-%EC%A1%B0%ED%9A%8C%ED%95%98%EA%B8%B0 &quot;3\\. 조회하기&quot;)3\\. 조회하기 이렇게 그룹을 만들고 났으면 URL 별로 그룹이 조회가 되도록 내용을 추가해 줍니다. 스키마에 대해서는 서두에 밝혔으니 소스코드 레벨로만 간단하게 설명하겠습니다. (FirebaseDAO에 대해서는 이미 수차례 설명했으니 소스코드도 최대한 짧게 가겠습니다.) reducer는 생략하고 action만 살펴보고 넘어가겠습니다. &lt;pre&gt;`**export function **groupSelect(groupName){ **return **(dispatch) =\\&amp;gt; { dao.getGroup(groupName).once(&amp;apos;value&amp;apos;, (snapshot) =\\&amp;gt; { **if**(snapshot.val()) { **let **logoUrl = snapshot.val().logoUrl; dispatch(getGroup(groupName, logoUrl)); dispatch(selectButton()); } }) } } **export function **getGroup(groupName, logoUrl){ **return **(dispatch) =\\&amp;gt; { dao.listGroupArticle(groupName).then((articles)=\\&amp;gt;dispatch(getArticle(articles,groupName,logoUrl))); } } `&lt;/pre&gt; 소스코드 처럼 group을 가지고 와서 로고 및 데이타를 가져온 뒤에 버튼을 선택하는 액션을 다시한번 연결하고는 끝이 납니다. 라우터 소스는 그에 따라 아래와 같이 간단해 졌습니다. &lt;pre&gt;`&amp;lt;Provider store={store}\\&amp;gt; &amp;lt;Router history={history}\\&amp;gt; &amp;lt;Route path=&amp;quot;/&amp;quot; component={App}\\&amp;gt; &amp;lt;Route path=&amp;quot;login&amp;quot; component={Login}/\\&amp;gt; &amp;lt;Route path=&amp;quot;groups/:groupName&amp;quot; /\\&amp;gt; &amp;lt;Route path=&amp;quot;\\*&amp;quot; component={NotFound}/\\&amp;gt; &amp;lt;/Route\\&amp;gt; &amp;lt;/Router\\&amp;gt; &amp;lt;/Provider\\&amp;gt; 이렇게 그룹의 개념을 집어 넣어서 전체 내용을 다시한번 리마인드 하면서 전체에 대한 시리즈는 끝을 낼까 합니다. 지금까지는 실행에 대한 내용이었고 이후는 서버리스 아키텍처에 대한 고찰에 관한 이야기 + 리팩토링에 대한 이야기를 해 볼까 합니다. 그 동안 어려운 내용 같이 따라오신다고 고생하셨습니다. 소스코드는 아래 링크를 참고하시면 됩니다. ehrudxo/standup_standup project for newbi_github.com By Keen Dev on February 1, 2017. Exported from Medium on May 31, 2017.","categories":[{"name":"github, github-trend, tech-trend","slug":"github-github-trend-tech-trend","permalink":"http://www.devpools.kr/categories/github-github-trend-tech-trend/"}],"tags":[]},{"title":"개발바보들 1화 -  git &quot;Back to the Future&quot;","slug":"개발바보들-1화-git-back-to-the-future","date":"2017-01-31T12:05:11.000Z","updated":"2018-01-07T06:42:35.334Z","comments":true,"path":"2017/01/31/개발바보들-1화-git-back-to-the-future/","link":"","permalink":"http://www.devpools.kr/2017/01/31/개발바보들-1화-git-back-to-the-future/","excerpt":"","text":"&nbsp; 이 내용에 대한 자세한 기술적인 설명이 듣고 싶나요? 연속되는 다음글을 참조하세요 &nbsp; &nbsp;","categories":[{"name":"Cartoon","slug":"Cartoon","permalink":"http://www.devpools.kr/categories/Cartoon/"}],"tags":[{"name":"git","slug":"git","permalink":"http://www.devpools.kr/tags/git/"},{"name":"reset","slug":"reset","permalink":"http://www.devpools.kr/tags/reset/"},{"name":"revert","slug":"revert","permalink":"http://www.devpools.kr/tags/revert/"}]},{"title":"WebAssembly - hello world 어셈블리를 브라우저에 올려보자","slug":"webassembly-binaryen-emscripten","date":"2017-01-21T13:07:01.000Z","updated":"2018-01-07T06:42:35.334Z","comments":true,"path":"2017/01/21/webassembly-binaryen-emscripten/","link":"","permalink":"http://www.devpools.kr/2017/01/21/webassembly-binaryen-emscripten/","excerpt":"","text":"WebAssembly 이름만 들어도 긴장되는 이 프로젝트는 지금 읽으시면서 생각하시는 그대로 web + Assmbly의 조합입니다. 링크 : http://webassembly.org/ 어셈블리어(assembly)는 기계어와 일대일 대응이 되는 컴퓨터 프로그래밍의 저급 언어이다. 출처: http://blog.opid.kr/162 [opid’s document] 브라우저 상에서 돌아가는 기계어라니 생각만 해도 즐거운 이 상상은 사실 비슷한 일들을 시도 했었던 몇 군데의 의기투합으로 완성됩니다. &nbsp; 결론부터 얘기하자면 오늘 소개하고 싶은 최종 프로젝트는 Web Assmebly의 binaryen 입니다. [contentcards url=”https://github.com/WebAssembly/binaryen“ target=”_blank”] 이 프로젝트를 설명을 하기 위해서는 먼길을 가야 할 거 같습니다. 하지만 매우 흥미로운 주제라고 생각되니까 시작해 보겠습니다. 1. asm.js 와 emscripten최근 몇년동안 브라우저에서 mame게임이라던지 둠이라던지 등의 오픈소스로 풀려있는 게임들에 대해서 브라우저에서 돌아가는 프로젝트를 많이들 보셨을 겁니다. 어제 저는 Quake3 를 웹에서 돌려 보았습니다. [caption id=”” align=”aligncenter” width=”600”] [그림1]크롬 퀘이크 출처 - https://twitter.com/search?q=%23quakejs 오오오 다 부시고 싶다!!!![/caption]먼저 브라우저 상에서 저런 게임 개발 + 연산을 하기 위해서는 어떤 일이 있어야 하는지를 생각해 봅시다. 엄청나게 빠른 자바스크립트를 개발하는거야! 네이티브 코드를 브라우저에서 돌리는 거야 WebGL로 짜면 안되나요? 이렇게 접근한 눈에 띄는 큰 세력이 있었습니다. 하나는 asm.js라는 커뮤니티고 또 하나는 Emscripten 입니다. 1.1. asm.js.링크 : http://asmjs.org/ asm.js는 다들 오해하시고 있는 부분이 있는데 어떤 새로운 컴파일 된 형태의 언어를 뜻하는 것은 아닙니다. JavaScript 스펙 중에 C나, C++ 처럼 좀더 low level로 건드릴 수 있는 형태로 나와 있는 API들을 사용해서 조금 덜 human readable한 코드지만 성능이 빠른 형태의 코드를 뜻합니다. 좀더 깊은 이해를 위해서는 아웃사이더 님의 다음글을 추천합니다. [contentcards url=”https://blog.outsider.ne.kr/927“ target=”_blank”] 어쨌든 결론만 놓고 보면 asm.js를 사용하면 native 코드에 비해 1.5배밖에 안느린 코드를 짤 수 있다. 라는 놀라운 일이 벌어집니다. GUI 쪽은 Java보다 대 놓고 빨라질 가능성을 가지게 되는 점입니다. 1.2.Emscripten이번엔 그렇다면 다른 방법으로 native 코드를 JavaScript로 바꿔야지 하고 접근한 프로젝트를 소개합니다. ​ 사이트에가서 보면 아시겠지만 이 프로젝트는 LLVM(Low Level Virtual Machine) 기반으로 C,C++로 짜여진 것을 JavaScript로 바꿔주는 프로젝트라는 것을 알 수 있습니다. 1.3. 도원결의[caption id=”attachment_485” align=”aligncenter” width=”588”] 출처 : 나무위키 진삼국무쌍7[/caption] 뭐 여러분 모두 짐작하셨다시피 asm.js의 엄청난 속도를 보고 emscripten은 LLVM을 asm.js로 컴파일 하기에 이릅니다. 1.4. 한방 그림 [caption id=”” align=”alignnone” width=”640”] 출처 : http://ejohn.org/blog/asmjs-javascript-compile-target/[/caption] 그림은 jquery의 구루 john resig의 사이트에 올라와 있는 그림인데, C/C++ 코드를 짜면 Clang이 LLVM의 바이트 코드로 뱉어 냅니다. 그 결과는 spec 이 있으므로 컴파일러가 이해하는 수준의 순서로 Asm.js 스펙에 넣고 OpenGL을 쓰는 경우는 WebGL 스펙까지도 내려가서 변환해 줍니다. 그림 하나면 이해가 될 거를 많이도 내려 왔습니다. 2. WebAssembly드디어 오늘 이야기 할 WebAssembly 입니다. 자 이쯤 오면 이런 생각할 사람이 있을 거 같습니다. 흠… 그럴게 아니라 진짜 Assembly Spec을 만드는게 어때? 그런데 그것이 실제로 일어났습니다. 어느 순간에 깃헙에 WebAssembly라는 그룹이 생기더니 design이라는 프로젝트를 통해 스펙을 주고 받고 있었습니다. [contentcards url=”https://github.com/WebAssembly/design“ target=”_blank”] 한 1년 정도 watch를 하고 두고 보고 있었습니다. 최근에 생긴변화 마일 스톤이 생겨서 한번 확인해 보면 좋겠다 싶어서 들여다 보았더니 생각보다 이야기 할 것들이 있습니다. Past Milestones April 2015 - WebAssembly Community Group started June 2015 - The first public announcement [1][2] March 2016 - Definition of core feature with multiple interoperable implementations [1] [2] [3] October 2016 - Browser Preview announced with multiple interoperable implementations [1] [2] [3] 16년 12월에 브라우저 프리뷰로 올라온 버전 위주로 이야기를 할까 합니다. 2.1. binaryen[caption id=”” align=”aligncenter” width=”889”] 실제로 targaryen 네이밍 컨벤션을 따랐다고 합니다. 헐. 덕.[/caption] 뭔가 왕좌의 게임에 나올 거 같은 프로젝트 이름인데 실제로 emscripten 과 라임을 맞추기 위해서 노력했고 네이밍 컨벤션은 그걸 따랐다고 깃헙 공식페이지에 announce하고 있습니다. 개발의 시작은 덕질 먼저 시작하기 전에 이 어셈블리 (바이너리) 파일 포맷을 wasm 라고 정의했고 파일 확장자는 .wasm이라는 것만 알아두시면 됩니다. 저는 이걸 아는데 시간이 많이 걸렸어요. 이후 binayen은 굉장히 간단합니다. 브라우저에서 이제 wasm 파일을 인식하니 두가지 옵션이 남았죠. emscripten으로 컴파일 할때 wasm 파일을 만들어 준다. asm.js 파일을 wasm 파일로 바꿔준다. 2.2. hello world를 찍어보자.백문이 불여일타! 개발자라면 응당 한번 찍어봐야 합니다. 2.2.1. 선행 설치아 가슴뛰는 순간이네요. 일단 emscripten 과 binaryen을 인스톨 해야죠. 여기서 상당히 헤메었엇는데 저만 믿고 따라오시면 됩니다. 먼저 EMSDK라는 Emscripten SDK를 설치 하셔야 됩니다. 아래 걸어둔 링크에 따라 다운로드 받고 순서대로 실행하시면 됩니다. 링크 : http://kripken.github.io/emscripten-site/docs/getting_started/downloads.html 그런데 문제가 있습니다. EMSKD의 명령어 중에 옵션에 latest 를 하면 1.35 버전을 가지고 오게 되서 binaryen을 지원하지 않습니다. 바꿔야 되는 부분은 제가 빨간색으로 표시해 두겠습니다. # Fetch the latest registry of available tools. ./emsdk update # Download and install the latest SDK tools. ./emsdk install incoming # Make the \"latest\" SDK \"active\" ./emsdk activate sdk-incoming-64bit &nbsp; 으로 변경을 해 주셔야만 제대로 컴파일이 됩니다. 먼저 helloworld.c 소스를 작성해 보겠습니다. #include &lt;stdio.h&gt; int main() { printf(\"hello, world!\\n\"); return 0; } 이제 다음과 같은 명령어를 통해 컴파일을 실행하면 $emcc hello_world.c -o hello.js -s 'BINARYEN=\"~/dev/native-osx/binaryen\"' hello.wasm 파일이 떨어집니다. hex 에디터로 열어서 hello, world를 찾아 보는것이 도리겠죠? [caption id=”attachment_436” align=”aligncenter” width=”998”] 오…. 소름[/caption] 그런데… 이걸 어떻게 브라우저에 띄울까요? 걱정 안해도 됩니다. 브라우저에서 볼 수 있도록 명령어를 제공합니다. emcc hello_world.c -s WASM=1 -o hello.html 타겟을 html로 주고 WASM=1로 주게 되면 우리가 필요한 모든 파일들을 볼 수 있으며textarea 에 뜨는 것을 확인할 수 있습니다. 물론 실행은 크롬 canary 버전에서 실행했습니다. 아직 프리뷰 버전이라 정식 버전에는 들어가지 않았습니다. 2.3. 한방 그림C,C++ -&gt; Clang -&gt; LLVM -&gt; WASM 로 바로 되는 그림이면 좋겠지만 아직은 C,C++ -&gt; (Clang -&gt; LLVM -&gt; asm.js )-&gt; WASM 과정으로 이루어지는 형태입니다. 물론 이런 것들은 시간이 더 지나면서 바뀌게 될 것으로 보입니다. 괄호 안의 것들을 지우는 작업이 미래의 일이리라 보여집니다. 3. 여담들https://www.youtube.com/watch?v=Ikbd7KrrAeM 마지막으로 Angry bots 가 브라우저상에 돌아가는 동영상이고 저는 직접 플레이 해 보았는데 그냥.. 3D게임을 그대로 돌리는데 전혀 이상없는 수준이고 로딩 속도도 훨씬 빠르더군요. 이 프로젝트는 지속적으로 주목해 봐야 합니다. 단연코! 참고로 WASM 파일을 어떻게 다룰 것인지는 아래 링크를 참조하시기 바랍니다. 링크 : http://webassembly.org/docs/js/ 이전에 emscripten같은 프로젝트가 없었냐 하면 그것도 아닙니다. GWT는 java를 JavaScript로 바꾸는 작업을 했었고 이런 일련의 과정들이 현재의 밑거름이 되겠죠.","categories":[{"name":"GitHub-trend","slug":"GitHub-trend","permalink":"http://www.devpools.kr/categories/GitHub-trend/"}],"tags":[{"name":"Asm.js","slug":"Asm-js","permalink":"http://www.devpools.kr/tags/Asm-js/"},{"name":"binaryen","slug":"binaryen","permalink":"http://www.devpools.kr/tags/binaryen/"},{"name":"Emscripten","slug":"Emscripten","permalink":"http://www.devpools.kr/tags/Emscripten/"},{"name":"WebAssembly","slug":"WebAssembly","permalink":"http://www.devpools.kr/tags/WebAssembly/"}]},{"title":"GitHub page가 좋아졌어요.","slug":"github-page가-좋아졌어요","date":"2016-12-11T10:26:21.000Z","updated":"2017-12-13T09:53:55.745Z","comments":true,"path":"2016/12/11/github-page가-좋아졌어요/","link":"","permalink":"http://www.devpools.kr/2016/12/11/github-page가-좋아졌어요/","excerpt":"","text":"말하기도 입아픈 소셜 코딩 사이트, GitHub에서 새로운 기능을 발표했습니다. 프로젝트의 웹페이지나, 개발들의 블로그 등으로 이용할 수 있었던 GitHub Page의 기능이 좋아졌습니다. 마크다운을 그대로 보여줍니다. 기존에는 gh-pages라는 별도의 브랜치를 만들어야했는데, 이제는 그럴필요 없이 설정에서 브랜치를 지정하면 됩니다. 또 마스터 브랜치 외에 doc 폴더가 있으면 그걸 바로 지정할 수도 있어요. 파일이름도 index 가 아니어도 되요. index.html, index.md 외에도 README.md 파일만 있어도, 페이지를 보여줍니다. ( 확장자가가 md가 아니면 렌더링 안해줍니다. ) 자세한 내용은 아래 원문의 번역을 참고하세요. ( 원문 : Publishing with GitHub Pages, now as easy as 1, 2, 3 ) 깃헙 페이지를 발행하기가 이제 쉬워졌습니다. 1, 2, 3 단계만 따라하세요. 웹사이트나 소프트웨어문서를 깃헙 페이지를 통해서 발행하기 위해서 필요한 단계가 더 적어졌습니다. 정확히 세 단계입니다. 1. 리파지토리를 만드세요. (아니면 사용하시는 리파지토리로 이동하세요.)2. 다른 파일을 커밋하드시, 웹페이지에서 마크다운 파일을 커밋하세요.3. 리파지토리 설정에서 깃헙 페이지 기능을 켜세요.그리고 이게 다예요. - 이제 웹사이트가 생겼습니다. 깃헙페이지에 익숙하다면, 어떻게 동작하는지 궁금하실건데, 웹페이지를 발행하는 단계를 간단하게 만들었고, 깃헙 어디서건 만들어진 마크다운 문서를 가져오도록 했습니다. 이제 모든 마크다운 문서는 깃헙페이지에서 보여지게 됩니다. 각각의 파일에 YAML로 된 첫 단계만 추가하면 됩니다. ( 메타 데이터는 —s 로 분리해서 처음에 작성하면 됩니다. ) index.md( 또는 index.html)이 없다면 README파일을 인덱스로 사용합니다. 깃헙 리파지토리에서 파일을 브라우징할때 때랑은 다릅니다. 사이트 설정에서 테마를 설정하지 않았다면(또는 설정파일을 가지고 있지않다면), 깃헙에서 마크다운이 보이는 대로, 최소한의, 기본 테마로 설정됩니다. 레이아웃을 지정하지 않으면, 내용에 기초해서 정합니다. 예를 들어, 페이지 레이아웃이 없다면, 페이지는 자동으로 페이지 레이아웃으로 보이거나, 기본 레이아웃으로 보여집니다. 페이지의 제목이 명시적으로 지정되지 않았고 H1, H2 또는 H3로 시작한다면, 페이지의 제목으로 사용합니다. 제목은 브라우져 탭의 제목으로 보입니다. 이번 개선으로 처음으로(또는 여러번해왔던 ) 웹사이트 발행이 몇번의 클릭만으로, 또는 소프트웨어 프로젝트의 문서화가 마크다운 파일을 만들어두거나 docs라는 문서 폴더를 만들어주는 것 만으로 이루어지게 됬습니다. 물론 계속해서 페이지의 보이는 모습을 수정할 수 있습니다. ( 레이아웃이나 스타일의 변경 같은.) 이번 변경사항이 이전에 만들어진 사이트에 영향을 미치지 않기를 바라지만, 일부 jekyll 사용자에게는 두가지 잠재적인 문제가 발견되었습니다. 사이트가 모든 페이지에서 반복한다면( 예를들어 for page in site.pages ), 몇가지 추가된 페이지를 목록에서 발견할 수 있습니다. ( README 같은 ) 설정파일에서 명시적으로 표시하지 않도록 설정할 수 있습니다. 페이지 레이아웃이나 제목을 지정하지 않아야할는 경우( 예를들어 스타일이 적용되지 않는 내용을 보여줘야 하는 경우)에는, 그러한 값을 null 로 명시적으로 지정해야 합니다. 그리고 다른 이유때문에 이러한 기능을 사용하지 않기를 원한다면, 최상위 폴더에 .nojekyll 파일을 추가하면 됩니다. 깃헙 페이지의 빌드프로세스를 가능한한 수정가능하고 투명하게 하기 위해서 위의 모든 기능은 오픈소스 jekyll 플러그인을 사용해서 구현되었으며, 그것은 다음과 같습니다. Jekyll Optional Front Matter, Jekyll README Index, Jekyll Default Layout, and Jekyll Titles from Headings. 다시한번 이러한 변화가 기존에 만들어진 대부분의 사이트를 만드는데에 영향을 주지 않지만(비록 이 기능을 사용할 수 있지만), 혹시 문제가 있다면 연락주시기 바랍니다. 3단계로 발행하는것을 즐기세요! &nbsp;","categories":[{"name":"Small talk","slug":"Small-talk","permalink":"http://www.devpools.kr/categories/Small-talk/"}],"tags":[{"name":"github-page","slug":"github-page","permalink":"http://www.devpools.kr/tags/github-page/"}]},{"title":"서버리스 아키텍처 소셜미디어 개발기 0편","slug":"서버리스-아키텍처-소셜미디어-개발기-0편","date":"2016-11-25T03:00:46.000Z","updated":"2018-01-07T06:42:35.334Z","comments":true,"path":"2016/11/25/서버리스-아키텍처-소셜미디어-개발기-0편/","link":"","permalink":"http://www.devpools.kr/2016/11/25/서버리스-아키텍처-소셜미디어-개발기-0편/","excerpt":"","text":"Firebase에 데이타를 저장하고 소셜 미디어용 카드는 Embed.ly 를 이용해서 만들어 github-page에 자동으로 배포하는 100% 서버리스 아키텍쳐의 소셜 미디어를 만들어 보도록 하겠습니다. 프레임워크는 react를 써 볼까 하고 있습니다. 해당 내용은 진행하면서 https://github.com/ehrudxo/standup 깃헙 프로젝트에 1,2,3,4,5,6,7 편을 branch를 만들면서 진행하도록 하겠습니다. 각각의 소스는 각 branch에서 확인하세요. 최대한 자세한 내용을 적도록 할테니 따라만 오시면 소셜미디어 앱을 만들 수 있도록 하겠습니다. 앱 이름 : 스탠드업!#### 1. 개요제가 일하고 있는 팀은 애자일 개발방법론을 사용하고 있습니다. 지금은 너무나도 많은 회사, 그 안에서도 많은 팀에서 애자일 개발 방법론을 가지고 개발을 하고 있죠?여러가지 애자일 개발 방법론 중에서도 단연코 가장 많이 사용되는 방법론은 스크럼 혹은 스탠드업입니다. 스크럼이라고 하면 굉장히 넓은 의미의 이터레이션까지 포함하시는 경우가 있으니 스탠드 업에만 국한해서 얘기를 하겠습니다.&gt; The stand-up has particular value in Agile software development processes, such as Scrum or Kanban, but can be utilized in context of any software-development methodology.출처 : stand-up meeting(미디어 위키)꼭 애자일이 아니더라도 소프트웨어 개발을 위해서는 종종 사용되는 방법이라고 하고 타임박싱은 5분에서 15분 정도를 합니다.나머지는 조금씩 다를 수 있겠지만, 10여명이 넘는 팀 전체 스탠드업에는 각 나눠진 작은 팀의 주제보다는 팀 전체를 위한 이슈를 이야기 하는데요. 머리를 말랑말랑하기 위해 간단한 IT 이야기를 할 수 있는 앱을 만들어 볼까 합니다. 기왕이면 아침에 스마트폰으로 볼 수 있도록 모바일을 먼저 고려하는 것도 당연히 들어가야 합니다. 2. 설계 페르소나이름 : 김개발 애자일 개발자 김개발 씨는 IT 트렌드에 무척이나 민감하다. 아침 스탠드 업 시간에 일간 보고만 하는 것이 매우 못마땅한데 기술적인 이야기를 같이 하면 좋겠다. User Story 1. 김개발은 아침 스탠드업 시간에 같이 이야기를 나눌 수 있는 주제를 위해 스탠드업이라는 웹 앱을 찾아간다. 이렇게 함으로써 사람들과 IT에 대한 주제로 커뮤니케이션을 할 수 있다. 2. 김개발이 사이트를 방문해서 자신이 어제 유심하게 읽은 글을 올릴 수 있다. 이렇게 하면 다른 사람들이 볼 수 있다. 에디터 창은 하나만 있고 거기서 글을 작성하고 업로드 하면 글이 외부 클라우드 공간에 저장이 된다. 3. 김개발이 작성한 글이 목록으로 보여진다. 이렇게 함으로써 다른 사람들이 목록을 확인할 수 있다. 목록글은 해당IT 주제의 대표 이미지와 제목, 간단 요약등이 들어 있는 카드의 리스트 형태로 나열이 되어야 한다. 유저스토리는 개발 과정 중에 변경이 일어날 것인데, 그런 과정도 중간 중간 보 언급하면서 넘어가겠습니다. 3. 개발전 준비 깃헙에 프로젝트 만들기 위와 같이 프로젝트를 만들어 줍니다. 물론 fork를 따는 방법도 있겠지만(그래주시면 일단은 감사! star도 한번 눌러주시면 더 감사!) 따라가는 입장에서는 만들어 보는 방법도 좋은 시도 입니다.만들고 나면 아래와 같이 설정창이 뜨게 됩니다.* README.md파일 만들기Readme 파일은 Art-of-readme 라는 내용을 참고하시면 더 좋을 거 같습니다.https://techstory.shma.so/art-of-readme-cd19f86b0456#.ovu6sws90&nbsp; &lt;Readme.md파일&gt; StandUP!애자일 프랙티스 standup 할 때 아이스브레이킹에 사용되는 IT기술에 관련된 주제를 나눌 수 있는 아티클들을 공유하는 소셜미디어 프로젝트 `&lt;/pre&gt; ## UserStory 김개발은 아침 스탠드업 시간에 같이 이야기를 나눌 수 있는 주제를 위해 스탠드업이라는 웹 앱을 찾아간다. 이렇게 함으로써 사람들과 IT에 대한 주제로 커뮤니케이션을 할 수 있다. 김개발이 사이트를 방문해서 자신이 어제 유심하게 읽은 글을 올릴 수 있다. 이렇게 하면 다른 사람들이 볼 수 있다. * 에디터 창은 하나만 있고 거기서 글을 작성하고 업로드 하면 글이 외부 클라우드 공간에 저장이 된다. 김개발이 작성한 글이 목록으로 보여진다. 이렇게 함으로써 다른 사람들이 목록을 확인할 수 있다. * 목록글은 해당IT 주제의 대표 이미지와 제목, 간단 요약등이 들어 있는 카드의 리스트 형태로 나열이 되어야 한다. 사용법아직 빌드중이지만 아래와 같이 설계됨 설치`$npm install ` 실행`$npm start ` 이렇게 실행하고 http://localhost:3000 으로 접속하시면 개발 버전을 확인할 수 있습니다. APIAPI는 계획없는 자체 프로젝트 입니다. 추후 발생할 여지는 있음. production제품을 빌드하려면 `npm run build ` 제품을 디플로이 하려면 `npm run deploy 를 통해 작업할 수 있습니다. 라이센스MIT &lt;Readme.md파일 끝&gt; 의 형태와 같이 README.md 파일을 만들고 깃에 푸쉬하고 준비과정은 마무리 하도록 하겠습니다.","categories":[{"name":"Dev-Story","slug":"Dev-Story","permalink":"http://www.devpools.kr/categories/Dev-Story/"}],"tags":[{"name":"github-page","slug":"github-page","permalink":"http://www.devpools.kr/tags/github-page/"},{"name":"embed.ly","slug":"embed-ly","permalink":"http://www.devpools.kr/tags/embed-ly/"},{"name":"firebase","slug":"firebase","permalink":"http://www.devpools.kr/tags/firebase/"},{"name":"serverless","slug":"serverless","permalink":"http://www.devpools.kr/tags/serverless/"}]},{"title":"자바스크립트 릴리즈 : ES2016과 그 이후...","slug":"자바스크립트-릴리즈-es2016과-그-이후","date":"2016-09-12T09:53:37.000Z","updated":"2017-12-13T09:33:57.955Z","comments":true,"path":"2016/09/12/자바스크립트-릴리즈-es2016과-그-이후/","link":"","permalink":"http://www.devpools.kr/2016/09/12/자바스크립트-릴리즈-es2016과-그-이후/","excerpt":"","text":"2016년 2월 8일에 올라온 Jack Franklin님의 글입니다. ※ 주의 : 원문이 더 이해하기 쉬울 수 있습니다 :) ES2015에는 매우 방대한 양이 새로운 기능으로 추가 되었습니다.그 중에 대부분의 것은 환영받는 기능이지만 화살표 함수, 맵, 클래스, 구조분해 할당 등 생소한 기능이 많기 때문에 기존 사용자들이 배우는데 큰 비용이 듭니다.다행히도 ES2015와 같은 큰변화가 있는 릴리즈가 사용자들이 원하는 방법은 아니라는 것을 인식했습니다.릴리즈 배포 간격이 길어지는 것은 많은 이슈를 발생시킬 수 있고, 또한 많은 커뮤니티에서 새로운 에디션을 선택하고 배우는 것을 주저할 수 있습니다. ES2016여러분이 자바스크립트의 세상에서 완전히 뒤쳐졌다고 느낀다면 너무 걱정하지 마세요. 앞으로 있을 릴리즈는 조금씩 변경될 예정이니까요.그 예로 ECMA2016에 새로운 기능으로는 단 2가지 밖에 없습니다.Array.prototype.includes와 exponentation operator입니다. ES2016의 새로운 기능과 관련해서는 Dr Axel Rauschmayer님의 포스트의 링크를 걸어놨습니다.릴리즈 마다 변경이 작은 대신, 4단계의 제안 과정을 거쳐 1년에 한번씩 계속될 것입니다.(ES5와 ES2015를 보면 ES5는 2009년, ES2015는 2015년 6년간의 공백이 있었습니다. 당연히 변경이 많을 수 밖에 없었겠네요.) 만약에 당신기 겨우 ES2015를 익혀 적용했는데 ES2016이 나와 걱정이라면, 걱정할 필요가 없는 두가지 이유가 있습니다. ES2016은 여름에 승인받은 완전한 명세를 갖게 될 것이고 브라우저의 지원 여부는 아직 정확히 결정되지 않았습니다. 만약에 관심이 있다면 아직 늦지 않았습니다. 만약 당신이 새로운 기능을 따라잡기로 한다면, 오직 2가지 기능만 익히면되고, 이 두가지 기능은 매우 독립적인 기능입니다. JS Going Forward자바스크립트의 새로운 릴리즈의 스펙을 채택하기 위한 새로운 과정이 도입되었습니다. ES2015는 이제 역사이고, 앞으로의 새로운 버전은 일년에 한번 작은 기능 추가를 포함한 릴리즈의 버전으로 출시될 예정입니다. 사용자들은 더이상 새로운 기능을 따라가는데 좌절하지 않을 것입니다. ES의 새로운 기능을 결정하는 과정은 커뮤니티의 모든 구성원이 변경되고 성숙된 자바스크립트를 쉽게 사용할 수 있게 도움을 줄 것이라고 생각합니다. Future Features in the Open만약 여러분에 ES표준을 제안하고 싶다면 가능합니다!제안은 Stage0부터 시작합니다. TC29(자바스크립트를 감동하는 위원회)의 멤버거나 컨트리뷰터로 등록되어 있다면 누구든 제안할 수 있습니다. 제안은 Stage 1, 2, 3 그리고 Stage 4를 거칩니다. (Stage 0: Strawman, Stage 1: Proposal, Stage 2: Draft, Stage 3: Candidate, Stage 4: Finished) Stage4는 기능이 표준에 포함될 준비가 되어있을 시점에 완전히 스펙에 따르는 브라우저에 적용됩니다. 좀더 자세한 과정은 2Ality블로그를 참고하세요. 깃헙레파지토리 : Stage 0의 레파지토리 Stage 1-4의 레파지토리위 링크에서 다음 릴리즈를 위한 구체적은 제안을 더 읽어볼 수 있고, 어떻게 릴리즈 스펙에 포함되는지 확인할 수 있습니다. Trying featuresBabel과 같은 번역도구들의 증가로 다음 버전에 출시되기로 결정된 단계이든(Stage4) 아니든(Stage 0-3) 적용해 보기가 쉬워졌습니다.Stage 0 - Stage 3의 단계는 다음 릴리즈에 포함될지 결정되지 않은 부분이기 때문에, 의존도를 높이는 것은 좋지 않는 방법입니다.하지만 한번 사용해 보기에는 아주 좋은 방법입니다. ES6ES6에서 ES2015로 갑작스럽게 이름을 변경하였는데, 이것은 다른 어떤 변화보다 많은 혼동을 가져온 것처럼 보입니다.하지만 앞으로 1년에 한번씩 릴리즈 될 것을 생각해 보면, ES6, ES7으로 부르는 것보다 ES2015, ES2016으로 부르는 것이 더 명확하다는 생각이 듭니다.앞으로 저는 “ES7”대신 “ES next”나 “ES2017”이라는 용어를 사용할 것입니다. ConclusionES2015는 자바스크립트진영에 엄청난 혼동을 가져온 릴리즈였습니다.새로운 릴리즈는 1년에 한번꼴로 이루어 질 예정이며, 개발자들이 자바스크립트를 항상 최신버전으로 유지하기 편리하기 위해 적은 규모의 업데이트가 이루어질 예정입니다. &nbsp;","categories":[{"name":"Dev-Story","slug":"Dev-Story","permalink":"http://www.devpools.kr/categories/Dev-Story/"},{"name":"JavaScript","slug":"Dev-Story/JavaScript","permalink":"http://www.devpools.kr/categories/Dev-Story/JavaScript/"}],"tags":[{"name":"es2015","slug":"es2015","permalink":"http://www.devpools.kr/tags/es2015/"},{"name":"es2016","slug":"es2016","permalink":"http://www.devpools.kr/tags/es2016/"},{"name":"javascript","slug":"javascript","permalink":"http://www.devpools.kr/tags/javascript/"}]},{"title":"REACT 컴포넌트 생명 주기","slug":"react-컴포넌트-생명-주기","date":"2016-07-10T13:03:25.000Z","updated":"2018-01-07T06:42:35.334Z","comments":true,"path":"2016/07/10/react-컴포넌트-생명-주기/","link":"","permalink":"http://www.devpools.kr/2016/07/10/react-컴포넌트-생명-주기/","excerpt":"","text":"지난 번 글에 대해 피드백을 많이 주셨습니다. 너무 감사합니다. http://devpools.kr/2016/07/03/react-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8/ wrap-up Bind 에 관련해서 다뤄봤으면 하는 부분은 조만간 다루도록 하겠습니다. Stateless 함수의 Airbnb의 입장에 대해 어느 정도 갑론 을박도 이루어 지고 있어서 Airbnb 이슈(링크) 에 질문도 남겼습니다. 답변이 왔네요 요약하자면 성능의 경우는 가장 마지막에 다뤄져야 할 부분이고 state를 다루면 다룰수록 전체 애플리케이션에 해가 될 수 (toxic) 있다고 표현 하는 군요. 조금 생각해 볼 부분입니다. React Component 생명 주기React 사이트에서 정의를 따라 DOM혹은 페이지 위에 올라갈 때를 mount, DOM트리에서 삭제되거나 웹 페이지에서 없어질 때를 unmount로 정의합시다. 또한 mount 와 unmount 사이에는 여러가지 생명 주기 함수들이 동작할 것인데, state와 props는 이 함수들과 밀접하게 연관이 있습니다. props는 컴포넌트의 속성을 나타내는 변수 값을 담는 객체입니다. state는 컴포넌트 상태를 나타내는 변수 값을담는 객체입니다. 이 값들의 변화에 따라 컴포넌트는 일종의 동작을 해야 하고(생명주기 함수) 혹은 그 변화의 끝에 다시 컴포넌트를 그려줘야 할 일들이 생깁니다.(render) 다음과 같이 생명주기를 나뉘어서 컴포넌트의 상태 변화를 확인해 볼 수 있을 거 같습니다. mount 될 때 property 가 변화될 때 state가 변화될 때 unmount 될 때 전체 보기 이전 React 컴포넌트를 설명할 때에 componentDidUpdate, componentWillMount, componentWillReceiveProps, componentWillUnmount, componentWillUpdate 등은 바로 뒤에 다룰 생명주기 함수들과 연관이 있습니다 `&lt;/pre&gt; 라고 이야기 했습니다. 각각의 미리 선언된 속성들을 개발자 도구에서 확인해 볼 수 있겠죠? ![React.createClass](/images/2016/07/React.createClass-235x300.jpg) 그러면 실제로 React 클래스를 생성해서 컴포넌트를 Mount 를 하고 어떻게 동작하는지를 확인해 보겠습니다. 결과가 Dracula 패턴처럼 보여지기 위해 CSS는 다음과 같이 작성하겠습니다. &lt;pre&gt;`&lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt;{&lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;#282a36&lt;/span&gt;;&lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;#f8f8f2&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;font-size&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;16px&lt;/span&gt;;} &lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;a&lt;/span&gt;{&lt;span class=&quot;hljs-attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;#50fa7b&lt;/span&gt;;&lt;span class=&quot;hljs-attribute&quot;&gt;padding-right&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;20px&lt;/span&gt;;} &lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;pre&lt;/span&gt;{&lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;#44475a&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;font-weight&lt;/span&gt;:bold;&lt;span class=&quot;hljs-attribute&quot;&gt;padding&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10px&lt;/span&gt;;} &lt;span class=&quot;hljs-selector-class&quot;&gt;.lParent&lt;/span&gt; {&lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;100px&lt;/span&gt;; &lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;90%&lt;/span&gt;;&lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;#6272a4&lt;/span&gt;;&lt;span class=&quot;hljs-attribute&quot;&gt;margin-left&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;5%&lt;/span&gt;;} &lt;span class=&quot;hljs-selector-class&quot;&gt;.lifecycle&lt;/span&gt; {&lt;span class=&quot;hljs-attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;50px&lt;/span&gt;;&lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;90%&lt;/span&gt;;&lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;#bd93f9&lt;/span&gt;;&lt;span class=&quot;hljs-attribute&quot;&gt;margin-left&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;5%&lt;/span&gt;;}`&lt;/pre&gt; 컴포넌트 이해를 돕기위해 Parent 컴포넌트와 LifeCycle 컴포넌트를 만들 것이기 때문에 lParent, lifecycle이라는 클래스를 생성해 두었습니다. HTML 코드는 다음과 같이 작성합니다. &lt;pre&gt;`&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;loading&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;컴포넌트 로딩&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;unloading&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;컴포넌트 제거&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;app&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;output&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;pre&lt;/span&gt;&amp;gt;&lt;/span&gt;`&lt;/pre&gt; app을 id로 가지는 DOM 노드 아래에 우리가 만들 웹 컴포넌트가 들어가고, output을 id로 DOM 노드 아래에 생명주기 함수가 어떻게 호출되게 되는지를 알리기 위해 값들을 집어 넣도록 하겠습니다. javascript 코드는 아래와 같습니다. 명확한 이해를 위해 React.createClass로 작성했고 즉시 DOM을 변경하고 확인하는데에 jquery만큼 간단한게 없어서 사용했습니다. https://gist.github.com/ehrudxo/4c05664d2daf76c5346095b10a79fc97 소스 설명을 간단하게 드리자면 컴포넌트 클래스 생성은 React.createClass 함수를 통해 작성됩니다. &lt;div class=&quot;comments-icon&quot;&gt; &lt;div class=&quot;marker&quot;&gt; &lt;pre&gt;`var 컴포넌트명 = React.createClass({...}); `&lt;/pre&gt; &apos;컴포넌트 로딩&apos;이라는 글자를 클릭하면 그 때에 ReactDOM.render라는 함수를 통해서 &apos;app&apos;이라는 id를 가진 노드에 방금 만든 컴포넌트를 로딩하는 소스입니다. &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;marker&quot;&gt; &lt;pre&gt;`ReactDOM.render(&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;LifeCycleParent&lt;/span&gt; /&amp;gt;&lt;/span&gt;, document.getElementById(&quot;app&quot;)); &lt;/span&gt;`&lt;/pre&gt; &apos;컴포넌트 제거&apos;를 클릭하면 ReactDOM.unmountComponentAtNode 함수를 통해 &apos;app&apos;이라는 id를 가진 노드에서 하위 컴포넌트를 모두 제거합니다. &lt;div class=&quot;comments-icon&quot;&gt; &lt;div class=&quot;marker&quot;&gt; &lt;pre&gt;`ReactDOM.unmountComponentAtNode(&lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;hljs-string&quot;&gt;&quot;app&quot;&lt;/span&gt;)); `&lt;/pre&gt; &lt;/div&gt; &lt;div class=&quot;marker&quot;&gt; 각 생명주기 함수 내의 &lt;div class=&quot;comments-icon&quot;&gt; &lt;div class=&quot;marker&quot;&gt; &lt;pre&gt;`$(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#output&apos;&lt;/span&gt;).append(메세지); `&lt;/pre&gt; &lt;/div&gt; &lt;div class=&quot;marker&quot;&gt; 부분은 output 을 id로 가지는 DOM 노드에 메세지를 출력하는 작업을 하고 있고, reset 함수를 통해 메세지를 모두 지울 수 있으며 그 소스는 다음과 같습니다. &lt;div class=&quot;comments-icon&quot;&gt; &lt;div class=&quot;marker&quot;&gt; &lt;pre&gt;`var reset = function(){ $(&apos;#output&apos;).empty();} `&lt;/pre&gt; &lt;/div&gt; &lt;div class=&quot;marker&quot;&gt;이렇게 소스를 작성하고 실행을 시키고 나면 아래와 같은 화면을 볼 수 있습니다.&lt;/div&gt; &lt;div class=&quot;marker&quot;&gt;&lt;/div&gt; &lt;div class=&quot;marker&quot;&gt;&lt;/div&gt; &lt;div class=&quot;marker&quot;&gt;![LifeCycleDeepDive01](/images/2016/07/LifeCycleDeepDive01.jpg)&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;marker&quot;&gt;&lt;/div&gt; &lt;div class=&quot;marker&quot;&gt; 이 정도면 눈치가 빠른 개발자라면 뭔가 의아한 부분을 발견하셨을 것이라고 생각이 듭니다. 아직 DOM에 로딩을 하기 전인데, getDefaultProps가 output에 찍혀 있네요. 즉 ReactDOM.createClass 함수를 통해 클래스를 생성하는 시간에 getDefaultProps는 호출이 된다는 것이고 부모 컴포넌트와 자식 컴포넌트 모두 메세지를 볼 수 있네요. 즉, 상당히 많은 블로그에서 Mounting을 설명하면서 getDefaultProps를 생명주기에 넣고 있지만, 실제로는 클래스를 만드는 작업에서 그 과정은 이루어 진다고 보는 것이 조금더 명확한 설명입니다. 이제 조금 더 안쪽으로 들어가 보죠 &lt;/div&gt; ### 1\\. mount 될 때 &lt;div class=&quot;marker&quot;&gt; 컴포넌트 로딩을 클릭하면 &lt;div class=&quot;comments-icon&quot;&gt; &lt;div class=&quot;marker&quot;&gt;![LifeCycleDeepDive02](/images/2016/07/LifeCycleDeepDive02.jpg)&lt;/div&gt; &lt;div class=&quot;marker&quot;&gt; 와 같이 화면이 바뀝니다. 그리고 화면 아래 output 을 보면 getInitialState, componentWillMount, render, componentDidMount 순으로 호출이 되었음을 알 수 있습니다. 정리해 보면 다음과 같습니다. ![mounting](/images/2016/07/mounting.jpg) &lt;/div&gt; &lt;div class=&quot;marker&quot;&gt; ### ### 2\\. props가 변화될 때 이 props 가 바뀔 때는 소스를 잘 따라 읽어보셨다면 이해가 잘 되셨을 것이지만, 아닌 사람들을 위해서 설명을 좀 더 해 보도록 하겠습니다. 위의 소스코드에서 Parent 소스를 잘 살펴보시면 &lt;div class=&quot;comments-icon&quot;&gt; &lt;div class=&quot;marker&quot;&gt; &lt;pre&gt;`render(){ &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;(&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;lParent&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{this.changeProps}&lt;/span&gt;&amp;gt;&lt;/span&gt;props가 바뀔때&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;amp;nbsp;&amp;amp;nbsp; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;LifeCycle&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;isFoobar&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{this.state.isFoobar}&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;childFoobar&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{this.state.childFoobar}&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;) }&lt;/span&gt;`&lt;/pre&gt; &lt;/div&gt; &lt;div class=&quot;marker&quot;&gt; ParentLifeCycle의 state 의 값인 isFoobar 와 childFoobar 값을 LifeCycle의 props 로 연결 시켜 놓은 것을 알 수 있습니다. 이 때 작동하는 형태는 부모 클래스의 state 값이 변하면 자식 클래스의 props가 바뀌게 되어 있는 셈입니다. 아래 그림과 같이 생각하시면 될 듯 합니다. &lt;/div&gt; ![LifeCycleDeepDive03](/images/2016/07/LifeCycleDeepDive03.jpg) &lt;div class=&quot;marker&quot;&gt; 부모 클래스에서 onClick을 통해 changeProps 함수를 실행하고 &lt;div class=&quot;comments-icon&quot;&gt; &lt;div class=&quot;marker&quot;&gt; &lt;pre&gt;`changeProps(){ $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#output&apos;&lt;/span&gt;).append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;\\n[props가 바뀔 때]\\n\\n&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.setState({ isFoobar: &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;, childFoobar :&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; }); },`&lt;/pre&gt; &lt;/div&gt; &lt;div class=&quot;marker&quot;&gt; this.setState 를 통해 state 가 바뀌면 자식 클래스인 LifeCycle의 componentWillReceiveProps 함수가 작동하게 되고 props 변경에 따라 state 변화가 자동적으로 이뤄지고 shouldComponentUpdate, componentWillUpdate, render, componentDidUpdate 등의 함수가 차례로 호출됩니다. &lt;div class=&quot;comments-icon&quot;&gt; &lt;div class=&quot;marker&quot;&gt;![LifeCycleDeepDive04](/images/2016/07/LifeCycleDeepDive04-1024x719.jpg)&lt;/div&gt; &lt;div class=&quot;marker&quot;&gt;&lt;/div&gt; &lt;div class=&quot;marker&quot;&gt; 정리해 보면 다음과 같습니다. &lt;div class=&quot;comments-icon&quot;&gt; &lt;div class=&quot;marker&quot;&gt;![receivingprops](/images/2016/07/receivingprops.jpg)&lt;/div&gt; &lt;div class=&quot;marker&quot;&gt; ### ### 3\\. state가 변화될 때 state 가 변경될 때는 setState를 통해 state 값이 변경된 경우입니다. shouldComponentUpdate 부터 호출이 되고 아래와 같은 결과를 보여줍니다. &lt;/div&gt; &lt;div class=&quot;marker&quot;&gt;![LifeCycleDeepDive05](/images/2016/07/LifeCycleDeepDive05-1024x687.jpg)&lt;/div&gt; &lt;div class=&quot;marker&quot;&gt; 정리해 보면 다음과 같습니다. &lt;div class=&quot;comments-icon&quot;&gt; &lt;div class=&quot;marker&quot;&gt;&lt;/div&gt; &lt;div class=&quot;marker&quot;&gt;![changingstate](/images/2016/07/changingstate.jpg)&lt;/div&gt; &lt;div class=&quot;marker&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;marker&quot;&gt;여기서는 shouldComponentUpdate 를 한번 살펴 봐야 하는데, 기본적으로 메쏘드를 적지 않고 놔두면 return 값은 true라 위에서 정리한 순서도를 따르지만&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;marker&quot;&gt; &lt;pre&gt;`shouldComponentUpdate(){ $(&lt;span class=&quot;hljs-string&quot;&gt;&apos;#output&apos;&lt;/span&gt;).append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;shouldComponentUpdate\\n&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;//return true;&lt;/span&gt; },`&lt;/pre&gt; &lt;/div&gt; &lt;div class=&quot;comments-icon&quot;&gt; &lt;div class=&quot;marker&quot;&gt; &lt;div class=&quot;comments-icon&quot;&gt; &lt;div class=&quot;marker&quot;&gt; &lt;div class=&quot;comments-icon&quot;&gt; &lt;div class=&quot;marker&quot;&gt; void 로 두거나 return false; 로 변경하면 더 이상 진행되지 않고 컴포넌트를 다시 그리지 않습니다. &lt;div class=&quot;comments-icon&quot;&gt; &lt;div class=&quot;marker&quot;&gt;![LifeCycleDeepDive06](/images/2016/07/LifeCycleDeepDive06-1024x582.jpg)&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;marker&quot;&gt; ### 4\\. unmount 될 때 마지막으로 unmount 될 때를 살펴 보겠습니다. &lt;pre&gt;`ReactDOM.unmountComponentAtNode(&lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;hljs-string&quot;&gt;&quot;app&quot;&lt;/span&gt;)); 를 통해 제거를 하면 화면에서 컴포넌트가 사라지며 componentWillUnmount 가 호출되는 것을 확인해 볼 수 있습니다 ### 5. 전체 그림전체 그림은 다음과 같이 확인해 볼 수 있습니다.출처 : https://staminaloops.github.io/undefinedisnotafunction/understanding-react/### 지금까지 설명한 소스는 다음에서 살펴 볼 수 있습니다.[각주1]Dracula theme이라고 보통 불리우는 이 테마는 개발자들에게 가장 각광받는 에디터 테마로 어두운 배경에 개발에 도드라지는 에디터 색감을 갖고 있습니다.깃헙 주소 : https://github.com/dracula/dracula-theme다음과 같은 Color Palette 를 가집니다.PaletteHexRGBHSLBackground#282a3640 42 54231° 15% 18%Current Line#44475a68 71 90232° 14% 31%Selection#44475a68 71 90232° 14% 31%Foreground#f8f8f2248 248 24260° 30% 96%Comment#6272a498 114 164225° 27% 51%Cyan#8be9fd139 233 253191° 97% 77%Green#50fa7b80 250 123135° 94% 65%Orange#ffb86c255 184 10831° 100% 71%Pink#ff79c6255 121 198326° 100% 74%Purple#bd93f9189 147 249265° 89% 78%Red#ff5555255 85 850° 100% 67%Yellow#f1fa8c241 250 14065° 92% 76%","categories":[{"name":"ReactJs","slug":"ReactJs","permalink":"http://www.devpools.kr/categories/ReactJs/"}],"tags":[{"name":"Lifecycle","slug":"Lifecycle","permalink":"http://www.devpools.kr/tags/Lifecycle/"},{"name":"React","slug":"React","permalink":"http://www.devpools.kr/tags/React/"}]},{"title":"REACT 컴포넌트","slug":"react-컴포넌트","date":"2016-07-03T14:52:43.000Z","updated":"2018-01-07T06:42:35.334Z","comments":true,"path":"2016/07/03/react-컴포넌트/","link":"","permalink":"http://www.devpools.kr/2016/07/03/react-컴포넌트/","excerpt":"","text":"React 컴포넌트를 작성하는 방법은 크게 두가지가 있습니다.(정확하게는 세가지가 있습니다.) 하나는 React.createClass 메쏘드를 이용하는 방법이고 또 다른 방법은 ES2015의 class extends 를 사용하는 방법입니다. React.createClass 로 컴포넌트를 작성할때와 ES2015의 class extends를 사용하는 방법은 다음과 같습니다. https://gist.github.com/ehrudxo/abea06e5da36555cf3fbc878920faca7 이렇게 코드를 들여다 보면 의구심이 듭니다. React.createClass를 통해 Class생성을 하는 것과 ES2015 class extends를 이용하는 것은 어떤 차이가 있을까요? 실행환경에서 살펴보기React.createClass먼저 코드를 짜 보겠습니다. html 코드와 js 코드는 다음과 같습니다. https://gist.github.com/ehrudxo/35105441ea195edfbf1bfffea9adb820 &nbsp; 위와 같이 javascript 코드를 짜면 손 쉽게 React.createClass를 이용해서 만든 코드가 실행환경에서 어떻게 보이는지 확인해 볼 수 있습니다. 브라우저의 console 도구를 활용해서 본 클래스는 실제로는 function으로 정의가 되고 다음과 같이 보여집니다. var로 지정한 ReactComponent를 이름으로 가지고 prototype에 여러가지 속성들을 가지는데 한번 눈여겨 볼 필요가 있습니다. componentDidUpdate, componentWillMount, componentWillReceiveProps, componentWillUnmount, componentWillUpdate 등은 바로 뒤에 다룰 생명주기 함수들과 연관이 있습니다. 하지만 render 말고는 모두 null 로 셋팅이 되어 있는 것도 왜 그럴까 라고 생각해 보면 좋은 학습이 될 거 같습니다.( DeepDive#1) ES2015 classES2015 의 코드를 똑같이 짜 보도록 하겠습니다. 코드는 다음과 같습니다 https://gist.github.com/ehrudxo/a54614c19a2d0a69f1aa654a17e2690c 어떤 일이 벌어질까요? 어떤가요? React.createClass 와 비교해 보면 어떤 형태인가요? 함수 이름은 ES2015Component로 바뀌었는데, prototype 부분에 있어야 할 많은 속성, 혹은 함수들이 보이지 않습니다. 왜 이런 일이 벌어지는 걸까요? 이에 대한 답을 하기 전에 아까 두가지라고 하고는 괄호로 세가지라고 힌트를 준 걸 기억하실 겁니다. 다음 내용을 먼저 보시죠. function 만으로 컴포넌트 생성코드는 다음과 같습니다. 실행을 하면 어떤 일이 벌어질까요? https://gist.github.com/ehrudxo/93406b42f748426dd1624a24877cb768 보시는 바와 같이 훌륭하게 페이지에 출력 됩니다. 콘솔 도구를 확인해 보겠습니다. 훨씬 간단한 함수가 있다는 사실을 알게 됩니다. 왜 이렇게 돌아가는 걸까.facebook 공식 페이지에 따르면 ReacDOM.render 함수의 첫번째 arguments는 (ReactElement, HTMLElement | SVGElement)를 받을 수 있도록 되어 있습니다. 결국 순수 함수라고는 했지만 이 함수가 하는 일은 HTML Element 를 반환하는 것 뿐입니다. 즉 다음과 같이 표현식을 바꾸는 거랑 똑같은 역할을 한다는 것입니다. https://gist.github.com/ehrudxo/c2464a81fe005d5e889dbef2802b08a5 이렇게 그려 넣고 보니 어떤가요? 너무 당연한걸 돌아 돌아 설명을 한 거 같습니다. 처음 서두에 React 컴포넌트를 생성하는 방법은 두가지 라고 설명을 드렸습니다만, 반전으로 말씀드리면 Javascript Syntax로 클래스 라고 생각되는 방법을 크게 두가지로 알면 될 것 같습니다. 조금 더 심화의 내용으로 설명드리면 ES2015를 가더라도 브라우저가 인식하는 java 같은 언어에서 얘기하는 class라는 개념은 실제로는 존재하지 않습니다. 보셔서 아시겠지만 function 이자 prototype 을 이용해서 React가 활용을 하는 셈이지요. 관련 내용에 대해서 더 알고 싶으신 분을 위해서는 Javascript Definite Guide 책을 추천드립니다. 그럼 어떤 방식으로 짜는 게 좋을까요?Airbnb 는 각 개발언어의 style guide를 훌륭하게 내기로 유명한데 React 용 style 가이드도 공개했습니다. 아래와 같은 원칙을 갖고 있네요. https://gist.github.com/ehrudxo/822b121cd680a23cf6cf6d704d6f505f 생명주기와 관련된 함수가 사용되지 않는 이상(stateless) pure function 으로 사용하는 것이 낫다고 하는데, 여기에 대해서는 장기적인 performance 이슈를 그 예로 들고 있습니다. 이와 관련해서는 저도 찬성입니다. **즉, 단순히 HTML을 구조화 하는 state 가 변할 필요학 없는 tag에 대해서는 javascript function 을 사용할 것. 그리고 그 경우가 아니면 ES2015 로 갈 것. ** 을 원칙으로 하면 될 것 같습니다. 저도 글을 작성할 때에 ES2015기준으로 작성하되, 설명을 위한 특별한 기준이 필요할 때에는 혼용해서 사용할 수 있음을 밝혀둡니다. ES2015로 가면 모든 기능에 문제가 없을까?일단 ES2015를 이용하려면 브라우저 호환성을 위해 Babel 같은 transpiler(혹은 compiler)와 webpack 같은 번들러가 필요합니다. 컴포넌트에 관해서만 이야기하면 React 컴포넌트의 mixin, this autobinding 기능은 ES2015에서는 사용할 수 없습니다. 관련 기능을 이용하시려면 React.createClass를 이용해서 컴포넌트를 작성해야 합니다.(mixin 및 autobinding 기능은 재사용 컴포넌트 만들기를 설명할 때에 다시 다루도록 하겠습니다.) 끝내기 전에읽어보다 SVGElement 관련해서 잠깐 언급된 적이 있죠? 잘 되는지 한번 확인해 봐야겠습니다. SVG 코드 안에는 Devpools 로고를 집어 넣어 보겠습니다. https://gist.github.com/ehrudxo/203ec6a0f4c0a97236f801b7ef44c769 결과를 확인해 보니 잘 나오는 것을 확인해 볼 수 있습니다. 이것이 의미 하는 것은?UI관련 컴포넌트를 만드는 데에도 React는 잘 준비되어 있다라는 것과 아직 구조적으로 Canvas에 대한 지원은 없겠구나 라는 것을 확인할 수 있습니다. 위 내용의 코드는 모두 다음의 jsfiddle 사이트에서 확인할 수 있습니다.","categories":[{"name":"ReactJs","slug":"ReactJs","permalink":"http://www.devpools.kr/categories/ReactJs/"}],"tags":[]},{"title":"2016 5월 주간깃헙 2호","slug":"2016-5월-주간깃헙-2호","date":"2016-05-23T11:54:38.000Z","updated":"2017-12-13T00:06:30.681Z","comments":true,"path":"2016/05/23/2016-5월-주간깃헙-2호/","link":"","permalink":"http://www.devpools.kr/2016/05/23/2016-5월-주간깃헙-2호/","excerpt":"","text":"&nbsp; https://i.imgur.com/GClzk0a.png push.js 크롬에서 facebook 페이지에 들어가면 알림을 허용 하느냐고 묻는 걸 본 적이 있을 겁니다. 응 이게 뭐여 하고 수신을 했다가 Mac사용자는 자체 facebook notification 을 두개 받아 보신 분도 있을 겁니다. 네, Web Push Notification을 손쉽게 구현할 수 있는 프로젝트 push.js 입니다. 리뷰 보러가기 horizon 이 프로젝트 horizon은 rethinkdb 에서 내 놓은 오픈소스 설치형 Firebase라고 생각하시면 될 거 같습니다. 리뷰 보러가기 react-boilerplate boilerplate라고 하는 것은 개발 커뮤니티에서 사용하는 용어로는 미리 잘 만들어진 템플릿이라는 뜻을 가지고 있습니다. react로 개발할 때 어떤 템플릿을 쓸까 고민이 많은데 이 프로젝트는 최신트렌드들을 몽땅 망라한 백화점 같은 boilerplate라고 보시면 될 거 같습니다. plyr 비디오 플레이어를 설치할 생각하면 많이 갑갑하죠? HTML5 mp4부터 youtube, vimeo 등의 플레이어를 간단하게 javascript로 볼 수 있도록 해주는 plyr 프로젝트 입니다. 꾹 눌러 데모를 확인하시죠. octotree 깃헙 혹은 깃랩을 쓰실 때에 소스코드 보기가 너무 어렵다라는 생각하셨던 사람이 적지 않았을 것입니다. 브라우저의 히스토리만으로 왔다갔다 하다 보면 짜증이 많이 났을텐데요, 에디터의 tree 구조를 보여주는 프로젝트가 나왔습니다 리뷰 보러가기 black-screen Electron, Atom 을 볼 때 어떤 가능성을 보셨습니까? Native 어플리케이션을 모두 웹으로 작성하는 생각을 해 보셨을 텐데요. 오늘은 정말 재미있는 프로젝트가 깃헙에 올라 왔습니다. 썰이 길죠? black-screen은 Electron 을 이용해서 만든 iTerm 같은 터미날 프로그램입니다. 리뷰 보러가기","categories":[{"name":"GitHub-trend","slug":"GitHub-trend","permalink":"http://www.devpools.kr/categories/GitHub-trend/"}],"tags":[{"name":"black-screen","slug":"black-screen","permalink":"http://www.devpools.kr/tags/black-screen/"},{"name":"horizon","slug":"horizon","permalink":"http://www.devpools.kr/tags/horizon/"},{"name":"octotree","slug":"octotree","permalink":"http://www.devpools.kr/tags/octotree/"},{"name":"plyr","slug":"plyr","permalink":"http://www.devpools.kr/tags/plyr/"},{"name":"push.js","slug":"push-js","permalink":"http://www.devpools.kr/tags/push-js/"},{"name":"react-boilerplate","slug":"react-boilerplate","permalink":"http://www.devpools.kr/tags/react-boilerplate/"}]},{"title":"주간 깃헙 5월 1호","slug":"주간-깃헙-5월-1호","date":"2016-05-09T10:23:51.000Z","updated":"2017-12-13T09:46:58.134Z","comments":true,"path":"2016/05/09/주간-깃헙-5월-1호/","link":"","permalink":"http://www.devpools.kr/2016/05/09/주간-깃헙-5월-1호/","excerpt":"","text":"Hospital주목해 볼 필요가 있는 프로젝트 입니다.중국 개발자들끼리 공유하는 병원 정보 관련 프로젝트입니다. 이게 어떻게 시작된 것인지가 상당히 궁금한데 다음 글을 한번 읽어보셔야 합니다. 中 ‘바이두 스캔들’, 의료계 마피아 ‘푸톈계’ 정조준요약하면, 바이두가 검색해 주는 결과와 의료계 마피아와 커넥션이 있다는 내용인데, 중국 내부에서는 상당히 큰 파장이 일고 있는 모양입니다. 개발자들이 공공데이타를 가지고 작업을 하기도하고, 사람들의 결과를 통해서도 작업을 하고 있습니다. 처음 이 프로젝트가 나왔을때 제목은 BadHospital이었던 것 같은데, 내부 정화도 일어나는 듯해서 주목해서 볼 필요가 있을거 같습니다만 중국어에 능통하셔야겠습니다. 번역도 제공을 하는 걸로 봐서는 외신에서도 적극 알아봐 주길 원하는 프로젝트라고 생각됩니다. json-server인터페이스를 먼저 정의하고 서버 사이드와 클라이언트 사이드를 동시에 개발 진행 많이들 해 보셨으리라 생각합니다. 특히 모바일 개발을 할 때 더 더욱 이런 방법을 많이 씁니다. json은 모바일 데이타 주고 받는 데에 표준 처럼 사용되는 상황입니다. json-server는 이런 경우에 많이 사용할 수 있는 프로젝트입니다. 리뷰 보러가기 &nbsp; xi-editor 구글에서 텍스트 에디터 프로젝트를 내 놓았습니다. xi-editor라는 프로젝트입니다. 지향점 몇 가지는 살펴볼만 합니다. 개발자가 느낄 수 있는 인사이트도 있습니다. 한번 살펴 볼까요? 리뷰 보러가기 &nbsp; 15DaysofAnimationsinSwift 15days swift, 30days android 등등 시리즈들이 지속적으로 깃헙에는 올라옵니다. 소개해 드릴 프로젝트는 그 중에서 Swift의 애니메이션을 코드로 어떻게 짜는지에 대한 프로젝트 입니다. 리뷰 보러가기","categories":[{"name":"미분류","slug":"미분류","permalink":"http://www.devpools.kr/categories/미분류/"}],"tags":[]},{"title":"4월 5주차 깃헙트렌드","slug":"4월-5주차-깃헙트렌드","date":"2016-05-08T13:11:54.000Z","updated":"2017-12-13T00:03:55.385Z","comments":true,"path":"2016/05/08/4월-5주차-깃헙트렌드/","link":"","permalink":"http://www.devpools.kr/2016/05/08/4월-5주차-깃헙트렌드/","excerpt":"","text":"https://i.imgur.com/paOSUXB.png HEADHTML 태그들을 아마 모두 꿰고 계시는 분들은 많지 않을 겁니다. HTML5에 추가된 태그들만 해도 많아서 대부분의 경우는 div, span section,ul,li 등의 태그들이 이루어져 있을 텐데요. 오늘은 그 중에서도 잘 외워지지 않지만 제대로 된 프레젠테이션 레이어를 이루기 위한 필수요소인 HEAD에 대해서 총망라한 프로젝트가 있습니다. 리뷰 보러가기 xi-editor구글에서 텍스트 에디터 프로젝트를 내 놓았습니다. xi-editor라는 프로젝트입니다. 지향점 몇 가지는 살펴볼만 합니다. 개발자가 느낄 수 있는 인사이트도 있습니다. 한번 살펴 볼까요? &nbsp; 리뷰 보러가기 routersploit취약점 탈취 라는 뜻을 가진 exploitation 과 routers의 결합어로 불리는 이 프로젝트는 라우터를 검색하고 그 라우터의 종류만 알 수 있다면 취약점을 분석하고 admin정보까지 알아내는 툴입니다. 리뷰 보러가기 Chart.js유명한 Chart.js가 2.0 버전으로 업데이트 되었습니다. Chart.js는 HTML5의 canvas를 기반으로 하는 여러가지 차트를 보여주는 라이브러리입니다. svg 포맷이 주력인 D3.js와는 어떤 면에서는 비슷하고 어떤 면에서는 다릅니다. 그냥 차트 라이브러리만 생각한다면 개발하는 입장에서는 가져다 쓰기가 훨씬 편한 라이브러리이기도 하죠. 리뷰 보러가기 Modaal프론트엔드 관련해서 개발해 보신 분들은 아마 모달 창을 띄우기가 간단하면서도 여러가지 다중 작업들을 하려면 생각보다 까다롭다는 생각들 많이 하셨을 것 같습니다. 이런 어려움들을 해결해 줄 프로젝트입니다. bootstratp 모달보다 편할까요? 리뷰 보러가기","categories":[{"name":"미분류","slug":"미분류","permalink":"http://www.devpools.kr/categories/미분류/"}],"tags":[]},{"title":"Stack Overflow: The Hardware - 2016 Edition","slug":"stack-overflow-the-hardware-2016-edition","date":"2016-04-18T10:25:48.000Z","updated":"2017-12-10T10:17:12.033Z","comments":true,"path":"2016/04/18/stack-overflow-the-hardware-2016-edition/","link":"","permalink":"http://www.devpools.kr/2016/04/18/stack-overflow-the-hardware-2016-edition/","excerpt":"","text":"발번역 입니다;( 간절히 첨삭 부탁드립니다. &nbsp; Stack Overflower’s architecture의 두번째 글입니다. 이전포스트는 Stack Overflow: The Architecture - 2016 Edition (번역본 링크는 여기)에서 확인하세요 :) 누가 하드웨어를 사랑한다고 생각하나요? 내가 그렇습니다. 이건 내블로그입니다. 내가 이겼어요. 만약 여러분이 하드웨어를 사랑하지 않는다면 브라우저를 닫으세요! 아직 안닫으셨네요. 좋습니다! 브라우저가 미치게 느릴때, 몇가지 새로운 하드웨어에 대해 생각해 봐야 합니다. 여러번 다시 말하지만, 성능 또한 기능입니다.(전 포스트에서도 엄청 강조했었습니다.^^) 여러분의 코드가 하드웨어만큼 빠르기 때문에, 하드웨어는 확실히 문제가 됩니다. 다만 다른 플랫폼처럼 스택 오버플로우의 아키텍쳐도 계층을 가지고 있습니다. 우리에게 하드웨어는 기초 계층(최하단의 계층)이고, 하드웨어를 가지고 많은 고급진 일들을할 수 있습니다.(누군가 다른 서버를 운영하는 것 처럼) 하드웨어는 직간접적으로 비용이들지만 그건 이 포스트에서 보는 관점은 아닙니다. 그건 추후에 비교할 것입니다. 지금부터 저는 우리의 인프라에 대한 자세한 목록과 이것을 비교 목적을 이야기하고자합니다. 이 시리즈의 많은 포스트에서, 저는 많은 숫자와 스펙을 보여드릴 것입니다. 제가 “우리의 SQL 서버의 CPU이용율은 대략 5-10%입니다.”라고 이야기할 때, 좋아 그런데 5-10%가 어느정도지?라고 생각할 수 있습니다. 그때가 레퍼런스가 필요하나 시점입니다. 이 하드웨어 리스트는 이러한 질문에 대한 대답과 비교에 대한 리소스를 제공할 것입니다. – Contents –How We Do Hardware Servers Running Stack Overflow &amp; Stack Exchange Sites Servers for Other Bits How We Do Hardware저는 하드웨어 스펙을 혼자 정하지 않습니다. 하드웨어 스펙을 정할 때, 저는 주로 George Beech(@GABeech)와 함께 일합니다. 저희는 각 하드웨어의 스펙을 목적에 맞게 정하려고 노력합니다. 우리는 이과정에서 혼자가 아닙니다. 우리는 최적의 스펙을 갖기 위해 하드웨어가 어떻게 운영되는지 알 필요가 있습니다. 우리는 다른 개발자들과 함께 일할 것입니다. 그리고 다른 사이트의 신뢰성 있는 엔지니어들을 수용할 것입니다. 우리는 또한 이 시스템에서 무엇이 최고인가를 생각합니다. 각 서버는 독립되어있지 않습니다. 어떻게 이것이 전반적인 아키텍처에 적합한지는 명확한 고려사항입니다. 어떤 서비스가 이 플랫폼에 적용될수 있는가? 이 데이터스토어인가? 로그시스템인가? 최소한의 적은 변화는 거의 변화가 없는 것을 관리하는 고유의 값이 있습니다. 하드웨어의 스펙을 정할 때, 무수히 많은 요구사항을 고려합니다. 한번도 저희의 고려사항을 적어내려가 본적이 없습니다. 지금 한번 해보도록 하죠. 이건 scale-up과 scale-out의 문제인가?(하나의 큰 하드웨어를 살까 아님 작은 것을 여러개 살까?) 얼마나 많은 여분이 필요하가?/원하는가?(얼마나 많은 헤드룸과 시스템 대체작동 가능성이 있는가?) 스토리지: 서버/어플리케이션이 디스크에 접근할 것인가?(OS 드라이브 이외에도 어떠한 것이 필요한가?) * 만약 필요하다면, 얼마나 많이 필요한가?(얼마나 많은 대역폭과 얼마나 많은 작은 파이들이 필요한가? SSD 또한 필요한가?) 만약 SSD가 필요하다면, 무엇을 SSDs, 쓰기로드(write load)는 무엇인가? (Intel S3500/3700s?에 대해서 이야기할 것인가? 아님 P360x? P3700s?) * 얼마나 많은 SSD용량이 필요한가?(그리고 HDD를 가진 2티어 솔루션이어야 하는가?) 이 데이터는 완전히 일시적 데이터인가?(SSD는 더 저렴하고 더 적합한 커페시터가 없는 SSD인가?) 스토리지는 확장이 필요할 것인가?(우리는 1U/10-bay 서버를 가지고 있난그 아니면 2U26-bay 서버를 가지고 있는가?) 데이터웨어하우스의 타입 시나리오인가?(.35’ 드라이브를 찾고 있는가? 만약 그렇다면 2U당 12 또는 16 드라이브는 어떤가?) * 이 스토리지는 120W TDP의 한계를 가진 3.5&apos; q백플레인 상호 보완적인가? 직접 디스크를 노출하는 것이 필요한가?(컨트롤러를 통과하게 해야 하는가?) 메모리: 얼마나 많은 메모리가 필요한가?(우리는 무엇을 구입해야 하는가?) 얼마나 많은 메모리를 사용할 수 있는가?(무엇을 구매하는 것이 합리적인가?) 후에 더 많은 메모리가 필요할 것이라고 생각되는가?(어떤 메모리 채널 환경설정을 바꿔야 하는가?) 메모리 접근이 많은 어플리케이션인가?(클럭 속도를 최대로 하길 원하는가?) * 고도의 병렬접근을 하고 있는가?(우리는 DIMM(dual in-line memory module, 여러개의 DRAM칩을 회로 기판 위에 탑재한 메모리 모듈)을 통해같은 공간에서 더 많은 접근을 하는 것을 원하는가?) CPU: 어떤 종류의 접근을 생각하고 있는가?(우리는 기본 CPU나 파워가 필요한가?) 무거운 병렬처리를 하는가?(더 적고 빠른 코어를 원하는가? 아니면 더 많고 느린 코어를 원하는가?) * 어떤 방법인가? 무거운 L2/L3캐시인가?(성능을 위해 거대한 L3캐쉬가 필요한가?) 거의 싱글 코어의 성능인가?(최대의 클럭을 원하는가?) 만약 그렇다면, 한번에 얼마나 많이 처리하는가? 네트워크: 여분의 10Gb네트워크 연결이 필요한가?(로드밸런서 같은은”through”머신인가?) 송수신 버퍼(Tx/Rx 버퍼)에 얼마나 균형이 필요한가?(어떤 CPU코어가 최고의 균형을 계산하는가?) Redundancy: 우리는 장애복구 데이터 센터가 필요한가? * 우리는 같은 번호가 필요한가? 또는 적은 중복은 허용하는가? 우리는 전원 코드가 필요한가? No. No. 우리는 필요하지 않다. Servers Running Stack Overflow &amp; Stack Exchange Sites각 서버는 아래의 스펙을 가지고 있습니다. 특별한 경우가 아니라면 OS 드라이브를 포함하지 않다. 대부분의 서버는 RAID1(Redundant Array of Inexpensive/Independent Disk:RAID의 주 사용 목적은 크게 무정지 구현(안정성)과 고성능 구현으로 구분된다. 무정지 구현을 극도로 추구하면 RAID 1, 고성능 구현을 극도로 추구하면 RAID 0이 되며, RAID 5, 6은 둘 사이에서 적당히 타협한 형태.)에서 250 혹은 500GB SATA HDD 쌍입니다. 비록 부팅시간의 대부분은 드라이브 속도에 독립적이지 않더라도(예를들어 메모리의 768GB를 체크합니다.) 부팅시간은 고려대상이 아니다. 모든 서버는active/active LACP의 2개 또는 그 이상의 10Gb네트워크 링크로 연결되어 있다. 모든 서버는 208V 단일전원으로 동작한다. All servers run on 208V single phase power (2개의 PDU로부터 공급받는 2개의 PSU를 통해). 뉴욕에 있는 모든 서버들은 케이블 암(arm)을 가지고 있고 덴버의 모든 서버들은 가지고 있지 않다.(현지 엔지니어들의 선호) 모든 서버들은 iDRAC connection (via the management network)과 a KVM connection를 가지고 있다. Network 2x Cisco Nexus 5596UP core switches (96 SFP+ ports each at 10 Gbps) 10x Cisco Nexus 2232TM Fabric Extenders (2 per rack - each has 32 BASE-T ports each at 10Gbps + 8 SFP+ 10Gbps uplinks) 2x Fortinet 800C Firewalls 2x Cisco ASR-1001 Routers 2x Cisco ASR-1001-x Routers 6x Cisco 2960S-48TS-L Management network switches (1 Per Rack - 48 1Gbps ports + 4 SFP 1Gbps) 1x Dell DMPU4032 KVM 7x Dell DAV2216 KVM Aggregators (1–2 per rack - each uplinks to the DPMU4032) Note: 각각 FEX는 80Gbps의 코어에 업링크 대역폭을 가지고 있고 코어들은 그들 사이에 160Gbps포트 채널을 가지고 있습니다. 더많은 최신 설치 때문에 덴버 데이터 센터의 하드웨어는 약간 더 최신화 되었습니다. 4개의 라우터들은 ASR-1001-x 모델이고 2개의 코어는 각각 96 SFP+ 10Gbps ports와 8 QSFP+ 40Gbps ports를 가진 __Cisco Nexus 56128P입니다. 이 것은 뉴욕에서 했던 것처럼16x 10Gbps ports를 사용하는 것 대신 4x 40Gbps links코어를 결합할 수 있기 때문에 미래의 확장에 대비해 10Gbps 포트를 절약할 수 있습니다. 이것은 뉴욕 데이터 센터의 네트워크 장비 입니다. …그리고 덴버에서:제가 믿고 일하는 엔지니어 Mark Henderson이 이 포스트를 위한 현재의 사진 한장 보내기 위해 뉴욕DC 로 특별한 여행을 떠났습니다. SQL Servers (Stack Overflow Cluster) 2 Dell R720xd Servers, each with: Dual E5-2697v2 Processors (12 cores @2.7–3.5GHz each) 384 GB of RAM (24x 16 GB DIMMs) 1x Intel P3608 4 TB NVMe PCIe SSD (RAID 0, 2 controllers per card) 24x Intel 710 200 GB SATA SSDs (RAID 10) Dual 10 Gbps network (Intel X540/I350 NDC) SQL Servers (Stack Exchange “…and everything else” Cluster) 2 Dell R730xd Servers, each with: Dual E5-2667v3 Processors (8 cores @3.2–3.6GHz each) 768 GB of RAM (24x 32 GB DIMMs) 3x Intel P3700 2 TB NVMe PCIe SSD (RAID 0) 24x 10K Spinny 1.2 TB SATA HDDs (RAID 10) Dual 10 Gbps network (Intel X540/I350 NDC) Note: 덴버 SQL 하드웨어는 뉴욕에 있는 서버와 비슷하지만 1개의 SQL서버가 있습니다. 뉴욕에 있는 SQL서버들은 2월에 PCle SSD로 업그레이드 한 것처럼 보입니다. Web Servers 11 Dell R630 Servers, each with: Dual E5-2690v3 Processors (12 cores @2.6–3.5GHz each) 64 GB of RAM (8x 8 GB DIMMs) 2x Intel 320 300GB SATA SSDs (RAID 1) Dual 10 Gbps network (Intel X540/I350 NDC) Service Servers (Workers) 2 Dell R630 Servers, each with: Dual E5-2643 v3 Processors (6 cores @3.4–3.7GHz each) 64 GB of RAM (8x 8 GB DIMMs) 1 Dell R620 Server, with: Dual E5-2667 Processors (6 cores @2.9–3.5GHz each) 32 GB of RAM (8x 4 GB DIMMs) 2x Intel 320 300GB SATA SSDs (RAID 1) Dual 10 Gbps network (Intel X540/I350 NDC) Note: NY-SERVICE03는 교체할만큼 오래되지 않았기 때문에 여전히 R620입니다. 이건 올해 업그레이드 될 예정입니다. Redis Servers (Cache) 2 Dell R630 Servers, each with: Dual E5-2687W v3 Processors (10 cores @3.1–3.5GHz each) 256 GB of RAM (16x 16 GB DIMMs) 2x Intel 520 240GB SATA SSDs (RAID 1) Dual 10 Gbps network (Intel X540/I350 NDC) Elasticsearch Servers (Search) 3 Dell R620 Servers, each with: Dual E5-2680 Processors (8 cores @2.7–3.5GHz each) 192 GB of RAM (12x 16 GB DIMMs) 2x Intel S3500 800GB SATA SSDs (RAID 1) Dual 10 Gbps network (Intel X540/I350 NDC) HAProxy Servers (Load Balancers) 2 Dell R620 Servers (CloudFlare Traffic), each with: Dual E5-2637 v2 Processors (4 cores @3.5–3.8GHz each) 192 GB of RAM (12x 16 GB DIMMs) 6x Seagate Constellation 7200RPM 1TB SATA HDDs (RAID 10) (Logs) Dual 10 Gbps network (Intel X540/I350 NDC) - Internal (DMZ) Traffic Dual 10 Gbps network (Intel X540) - External Traffic 2 Dell R620 Servers (Direct Traffic), each with: Dual E5-2650 Processors (8 cores @2.0–2.8GHz each) 64 GB of RAM (4x 16 GB DIMMs) 2x Seagate Constellation 7200RPM 1TB SATA HDDs (RAID 10) (Logs) Dual 10 Gbps network (Intel X540/I350 NDC) - Internal (DMZ) Traffic Dual 10 Gbps network (Intel X540) - External Traffic Note: 이 서버는 따로 주문되었고, 그 결과 다른 스펙을 가지고 있습니다. 또한 두개의 CloudFlare로드 밸런서는 CloudFlare의 Railgyn의 메모리에 캐쉬된 설치(현재 더이상 운영되지 않는)를 위한 더많은 메모리를 가지고 있습니다. 서비스, 레디스, 검색 글고 로드밸런서는 모두 1U서버입니다. 아래는 뉴욕지부 데이터 센터의의 서버 모습입니다. Servers for Other Bits직간접적으로 트래픽을 제공하는데 참여하지 않는 서버들이 있습니다. 이 서버들은 다른쪽으로 연관이 있거나 모니터링, 로그 저장, 백업 등 본질적이지 않은 목적을 위한 서버들입니다. 이 포스트는 후에 있을 다른 시리즈들의 위한 많은 부가 정보들을 제공합니다. 그래서 저는 흥미로운 백그라운드 서버 또한 이 포스트 내용에 포함시켰습니다. VM Servers (VMWare, Currently) 2 Dell FX2s Blade Chassis, each with 2 of 4 blades populated 4 Dell FC630 Blade Servers (2 per chassis), each with: * Dual [E5-2698 v3](http://ark.intel.com/products/81900/Intel-Xeon-Processor-E5-2643-v3-20M-Cache-3_40-GHz) Processors (16 cores @2.3–3.6GHz each) 768 GB of RAM (24x 32 GB DIMMs) 2x 16GB SD Cards (Hypervisor - no local storage) Dual 4x 10 Gbps network (FX IOAs - BASET) 1 EqualLogic PS6210X iSCSI SAN 24x Dell 10K RPM 1.2TB SAS HDDs (RAID10) Dual 10Gb network (10-BASET) 1 EqualLogic PS6110X iSCSI SAN 24x Dell 10K RPM 900GB SAS HDDs (RAID10) Dual 10Gb network (SFP+) 더 주목할만한 서버들이 있습니다. 백그라운드 작업을 처리하고 로깅, 대량의 데이터 저장 등에 관한일을 돕습니다. Machine Learning Servers (Providence)이 서버는 99% 유휴상태입니다. 하지만 야간에 처리하는 무거운 작업을 수행합니다. 또한 이 서버는 큰규모의 데이트셋을 필요로하는 새로운 알고리즘을 테스트하기 위한 내부적으로 데이터센터 장소 역할을 합니다. 2 Dell R620 Servers, each with: Dual E5-2697 v2 Processors (12 cores @2.7–3.5GHz each) 384 GB of RAM (24x 16 GB DIMMs) 4x Intel 530 480GB SATA SSDs (RAID 10) Dual 10 Gbps network (Intel X540/I350 NDC) Maching Learning Redis Servers (Still Providence)이건 Providence의 Redis 데이터 저장소입니다. 일반적인 설정은 하나의 마스터, 하나의 슬레이브 그리고 우리의 ML알고리즘의 최신버전을 테스팅 용도로 사용되는 하나의 인스턴스 입니다. Q&amp;A사이트를 제공하기위해 사용되지 않는 동안 이 데이터는 직업매칭과 사이드바 직업 목록을 만들 때 사용되었습니다. 3 Dell R720xd Servers, each with: Dual E5-2650 v2 Processors (8 cores @2.6–3.4GHz each) 384 GB of RAM (24x 16 GB DIMMs) 4x Samsung 840 Pro 480 GB SATA SSDs (RAID 10) Dual 10 Gbps network (Intel X540/I350 NDC) Logstash Servers (For ya know…logs)Logstash 클러스터는(스토리지로 엘라스틱 서치를 사용함) 모든 로그를 저장합니다. 우리는 여기에 HTTP로그를 복제할 계획이지만 성능 이슈가 있습니다. 그러나 우리는 모든 네트워크 디바이스 로그와 시스템로그 그리고 윈도우와 리눅스 시스템의 로그들을 여기에 집계할 수 있어 빠르게 네트워크 오버뷰를 볼 수 있고 이슈를 검색할 수 있습니다. 또한 Bosun(Stack Exchange의 모니터링, 알람 시스템입니다.)의 화제 경고에 대한 추가적 정보를 얻기 위한 데이터소스로 사용됩니다. 전체 클러스터의 저장소는 6x12x4 = 288 TB입니다. 6 Dell R720xd Servers, each with: Dual E5-2660 v2 Processors (10 cores @2.2–3.0GHz each) 192 GB of RAM (12x 16 GB DIMMs) 12x 7200 RPM Spinny 4 TB SATA HDDs (RAID 0 x3 - 4 drives per) Dual 10 Gbps network (Intel X540/I350 NDC) HTTP Logging SQL ServerHTTP로깅 SQL 서버는 SQL데이터베이스에 우리 로드밸런서의 모든 단일 HTTP 히트수를 기록하는 서버입니다.(시스템로그를 통해 HAProxy로부터 보냅니다.) 우리는 URL, 쿼리, 사용자 Agent, SQL/Redis의 시간 등과 같은 최상위 비트만을 여기에 기록합니다.- 그래서 이것은 모두 클러스터된 컬럼스토어의 인덱스가 됩니다. 우리는 이 기록을 사용자 이슈나 검출 봇 등을 위해 사용합니다. 1 Dell R730xd Server with: Dual E5-2660 v3 Processors (10 cores @2.6–3.3GHz each) 256 GB of RAM (16x 16 GB DIMMs) 2x Intel P3600 2 TB NVMe PCIe SSD (RAID 0) 16x Seagate ST6000NM0024 7200RPM Spinny 6 TB SATA HDDs (RAID 10) Dual 10 Gbps network (Intel X540/I350 NDC) Development SQL Server우리는 개발자가 제품을 가능한 많이 시뮬레이션하는 것을 좋아합니다. SQL서버를 구입한 이후로 생산 프로세스를 업그레이드 했습니다. 올해 이후 스택오버플로의 클러스터를 업그레이드 하면서 동시에 이박스를 2U솔루션으로 바꿀 것입니다. 1 Dell R620 Server with: Dual E5-2620 Processors (6 cores @2.0–2.5GHz each) 384 GB of RAM (24x 16 GB DIMMs) 8x Intel S3700 800 GB SATA SSDs (RAID 10) Dual 10 Gbps network (Intel X540/I350 NDC) 이 것이 이 사이트를 제공하기 위한 하드웨어 입니다. 우리는 물론 로깅, 모니터링, 백업 등과 같은 백그라운드 작업을 위해 다른 서버를 가지고 있습니다. 만약에 여러분이 어떤 다른 시스템의 스펙에 대해 궁금하다면, 댓글로 질문한다면 저는 기쁘게 자세히 대답해 드릴 수 있습니다.(링크: 여기에 댓글을!!!) 여기에 몇주전에 뉴욕에 설치한 전체 하드웨어의 모습입니다. 다음 글은 뭐냐구요? 제가 지금 포스팅하는 이 시리즈가 담는 내용은 많은 사람들이 알고 싶어하는 것입니다. 트렐로에가서 보면, 배포가 가장 흥미로운 주제처럼 보입니다. 그래서 다음은 어떻게 코드가 개발자의 컴퓨터로부터 제품이되는지의 과정을 쓸 것 같습니다. 데이터베이스 마이그레이션, 빌드, CI인프라 그리고 어떻게 개발환경이 셋업되는지를 이야기 할 것입니다.","categories":[{"name":"Small talk","slug":"Small-talk","permalink":"http://www.devpools.kr/categories/Small-talk/"}],"tags":[]},{"title":"4월 2주차 테크뉴스","slug":"4월-2주차-테크뉴스","date":"2016-04-11T11:32:39.000Z","updated":"2017-12-13T00:04:18.646Z","comments":true,"path":"2016/04/11/4월-2주차-테크뉴스/","link":"","permalink":"http://www.devpools.kr/2016/04/11/4월-2주차-테크뉴스/","excerpt":"","text":"1. US newspapers raise alarm over new ad-blocker Brave 모질라 재단의 공동창업자 Brendan Eich가 최근 새롭게 런칭한 브라우저인 Brave는 자체적으로 Ad-Blocker를 내장하고 있는데 이와 관련된 수익모델이 좀 흥미롭습니다. 이 브라우저에서 제공하는 광고 차단기능을 사용하면 해당 웹사이트들이 제공하던 광고들이 Brave가 선정한 타 광고로 교체가 되고, 해당 광고를 통해 번 매출의 15%를 Brave 사용자에게 Bitcoin으로 전송, 55%는 해당 웹사이트, 15%광고 파트너, 15%는 Brave에서 수익으로 가져가게 된다고 합니다. 이러한 시도가 얼마나 시장에서 먹혀 들어갈지 저도 궁금해지네요. &nbsp; 2. Facebook Users Are Sharing Fewer Personal Updates and It’s a Big Problem 페이스북의 유저들이 자신의 사생활을 본인들의 페이스북에 노출하기를 점점 꺼려하고 있다는 소식입니다. 페이스북은 현재 전세계에서 최고로 성공한 SNS가 되었지만, 이러한 감소추세는 페이스북에게 장미빛 미래를 보장할 수 없다는 역설적인 상황이 되어가는 군요. 페이스북이 어떻게 이를 돌파해날갈지 귀추가 주목됩니다. &nbsp;","categories":[{"name":"Hacker News","slug":"Hacker-News","permalink":"http://www.devpools.kr/categories/Hacker-News/"}],"tags":[{"name":"brave","slug":"brave","permalink":"http://www.devpools.kr/tags/brave/"},{"name":"facebook","slug":"facebook","permalink":"http://www.devpools.kr/tags/facebook/"}]},{"title":"4월 2주차 주간깃헙","slug":"4월-2주차-주간깃헙","date":"2016-04-11T11:32:37.000Z","updated":"2017-12-13T00:04:43.934Z","comments":true,"path":"2016/04/11/4월-2주차-주간깃헙/","link":"","permalink":"http://www.devpools.kr/2016/04/11/4월-2주차-주간깃헙/","excerpt":"","text":"https://i.imgur.com/3H17ipo.png &nbsp; Downloader이번엔 특이하게 커맨드창 다운로더 프로그램이 두개나 있습니다. you-get&nbsp; md 파일의 이미지가 너무 인상적이라 잊을 수 없는 you-get 입니다. 곧 소개할 youtube-dl 도 그렇지만 python으로 되어 있습니다. 어마어마한 사이트의 동영상 및 이미지를 긁어올 수 있는 프로그램 you-get입니다. SiteURLVideos?Images?Audios?YouTubehttps://www.youtube.com/✓Twitterhttps://twitter.com/✓✓VKhttp://vk.com/✓Vinehttps://vine.co/✓Vimeohttps://vimeo.com/✓Vidtohttp://vidto.me/✓Videomegahttp://videomega.tv/✓Veohhttp://www.veoh.com/✓Tumblrhttps://www.tumblr.com/✓✓✓TEDhttp://www.ted.com/✓SoundCloudhttps://soundcloud.com/✓Pinteresthttps://www.pinterest.com/✓MusicPlayOnhttp://en.musicplayon.com/✓MTV81http://www.mtv81.com/✓Mixcloudhttps://www.mixcloud.com/✓Metacafehttp://www.metacafe.com/✓Magistohttp://www.magisto.com/✓Khan Academyhttps://www.khanacademy.org/✓JPopsuki TVhttp://www.jpopsuki.tv/✓Internet Archivehttps://archive.org/✓Instagramhttps://instagram.com/✓✓InfoQhttp://www.infoq.com/presentations/✓Imgurhttp://imgur.com/✓Heavy Music Archivehttp://www.heavy-music.ru/✓Google+https://plus.google.com/✓✓Freesoundhttp://www.freesound.org/✓Flickrhttps://www.flickr.com/✓✓FC2 Videohttp://video.fc2.com/✓Facebookhttps://www.facebook.com/✓중략…엄청 많은 관계로.. 동영상을 긁어오자 마자 바로 플레이 할 수 있는 옵션도 제공을 합니다. youtube-dl 위의 you-get 을 보고나면 초라해 보일지도 모르겠습니다만, youtube 다운로더만 필요하다면 맥 사용자에겐 이 옵션이 더 좋아보입니다. $brew install youtube-dl 명령어면 실행이 바로 가능합니다. 리뷰 보러가기 # APMnetdata server monitoring 도구인 net-data 는 향후 발전 방향을 눈여겨 볼 수 있는 좋은 오픈 소스입니다. 웹으로 서버의 리소스를 실시간으로 모니터링 한다! 어디서 많이 들어 본거 같은데, 제대로 구현된 케이스는 없었던 거 같은데 아직 커맨드는 좀 부족한 듯 싶어도 많이 발전하겠죠? Front-End프론트엔드 쪽은 Bootstrap의 인기테마인 admin테마를 MIT 라이센스로 많이 풀었습니다. 주간순위에 올라온 gentelella 도 있고, 일간 순위에 들었던 blur-admin까지. 아무래도 Bootstrap4 가 임박하기는 했나 봅니다. gentelella며칠전 트위터에 공유를 했는데, 상당히 많은 사람들이 리트윗을 해 주었습니다. bootstrap의 강점은 무엇보다도 theme을 정할 수 있다는 것입니다. 그래서 수없이 많은 테마들이 여기 저기 있습니다. 여기 아주 미려한 그래픽을 가진 관리자 프로그램을 위한 테마가 MIT 라이센스로 풀려 있네요. 리뷰 보러가기 blur-admin같은 이유의 프레임워크라고 보시면 될 거 같습니다. 어떤가요? 어느쪽이 더 선호하시는 UI를 가졌나요? React React는 꾸준히 올라가는 추세입니다. 다시 올라오늘 이유는 v.15 릴리즈 때문으로 보여집니다. &nbsp;","categories":[{"name":"GitHub-trend","slug":"GitHub-trend","permalink":"http://www.devpools.kr/categories/GitHub-trend/"}],"tags":[]},{"title":"3월 4주차 해커뉴스 소식","slug":"작성중-이번주-해커뉴스-소식","date":"2016-04-11T01:26:27.000Z","updated":"2017-12-13T09:34:50.661Z","comments":true,"path":"2016/04/11/작성중-이번주-해커뉴스-소식/","link":"","permalink":"http://www.devpools.kr/2016/04/11/작성중-이번주-해커뉴스-소식/","excerpt":"","text":"Lee Sedol Beats AlphaGo in Game 4 (gogameguru.com) 이세돌과 알파고의 대결은 전세계 개발자들에게도 많은 이슈거리가 되었습니다. 이세돌 9단이 승리한 4국에 대한 소식이 해커뉴스 이번주 탑에 올라왔습니다.https://news.ycombinator.com/item?id=11276798 We only hire the trendiest (danluu.com)https://news.ycombinator.com/item?id=11326940 Andy Grove has died (intel.com)https://news.ycombinator.com/item?id=11333402 Google Puts Boston Dynamics Up for Sale in Robotics Retreat (bloomberg.com)https://news.ycombinator.com/item?id=11305527 A Government Error Just Revealed Snowden Was the Target in the Lavabit Case (wired.com)https://news.ycombinator.com/item?id=11308160 AlphaGo Beats Lee Sedol in Final Game (gogameguru.com)https://news.ycombinator.com/item?id=11288302 Encryption, Privacy Are Larger Issues Than Fighting Terrorism (npr.org)https://news.ycombinator.com/item?id=11288030 A previously unnoticed property of prime numbers (quantamagazine.org)https://news.ycombinator.com/item?id=11282480 I made my own clear plastic tooth aligners and they worked (amosdudley.com)https://news.ycombinator.com/item?id=11275925 Dropbox’s Exodus from the Amazon Cloud (wired.com)https://news.ycombinator.com/item?id=11282948","categories":[{"name":"미분류","slug":"미분류","permalink":"http://www.devpools.kr/categories/미분류/"}],"tags":[]},{"title":"금주의 테크뉴스","slug":"금주의-테크뉴스","date":"2016-04-04T11:11:15.000Z","updated":"2017-12-13T09:26:40.823Z","comments":true,"path":"2016/04/04/금주의-테크뉴스/","link":"","permalink":"http://www.devpools.kr/2016/04/04/금주의-테크뉴스/","excerpt":"","text":"Google releases new tool to scan Android apps for accessibility issues Google이 Android App들의 접근성을 체크하는 툴을 공개하였습니다. 앱을 작동시킨 채로 다른 앱을 실행하고 검사 버튼을 누르면 자동으로 앱의 접근성을 검사해 준다고 합니다. Google Play에서 “Accessiblity Scanner”로 검색하여 찾을 수 있으나 현재에는 레퍼런스폰인 Nexus계열에서만 되는 것 같습니다. &nbsp; Sony announces plans to make PlayStation games for iOS and Android 소니가 Playstation 게임을 Android와 iOS 버전으로 제작하겠다는 계획을 발표하였습니다. 얼마전 Nintendo가 Miitomo 라는 게임을 자사 최초의 모바일 게임으로 내놓은 것과 비슷한 방향으로 가려는 것 같습니다. PSP - PSVita로 이어지던 소니의 Handheld 게임기 역사가 이렇게 마무리되는 것은 매우 안타깝네요. &nbsp; These unlucky people have names that break computers. 매우 특이한 이름을 가진 사례를 통해 이런 이름을 가진 사람들이 현대사회에서 겪는 매우 불편하고 그들의 입장에서는 답답한 상황에 대해 소개하는 글입니다. 기사에서는 “Jennifer Null”이라는 사람이 “Null”이라는 성(Last Name)때문에 비행기 티켓팅을 하거나 정부에서 제공하는 세금관련 온라인 사이트에서의 업무처리에 있어서 겪는 애로사항이나, “Janice Keihanaikukauakahihulihe’ekahaunaele”라는 이름을 가진 한 여성이 너무 긴 이름때문에 ID카드를 발급받을 때 겪는 애로사항에 대해 소개하고 있습니다. 모든것이 전산화되어 살고 있는 현대인들에게는 이런 웃지 못할 일이 농담처럼 다뤄지지만 당사자들은 매우 고통스러운 나날을 지내고 있는 것 같아보이는 군요.","categories":[{"name":"미분류","slug":"미분류","permalink":"http://www.devpools.kr/categories/미분류/"}],"tags":[]},{"title":"Stack Overflow : The Architecture - 2016 Edition","slug":"stack-overflow-the-architecture-2016-edition","date":"2016-04-04T11:04:40.000Z","updated":"2017-12-10T10:17:12.033Z","comments":true,"path":"2016/04/04/stack-overflow-the-architecture-2016-edition/","link":"","permalink":"http://www.devpools.kr/2016/04/04/stack-overflow-the-architecture-2016-edition/","excerpt":"","text":"지난 2월 17일 Stack Overflow의 시스템 관리자인 Nick Craver의 블로그의 올라온 글을 번역해 보려고 합니다. [caption id=”” align=”aligncenter” width=”601”] 주인장 허락 받은 글임.[/caption] 개발바보를 devpools로 번역한 부족한 개발자인 만큼, 이상한 부분은 댓글로 달아주시면 수정하도록 하겠습니다. :) 이 번역에는 구글번역기님이 많은 도움을 주실 예정입니다. - Contents -Ground RulsTher InternetsLoad Balancers(HAProxy)Web Tier(IIS 8.5, ASP.Net MVC5.2.3, and .Net4.6.1)Service Tier(IIS, ASP.Net MVC5.2.3, .Net4.6.1, and HTTP.SYS)Cache &amp; Pub/Sub(Redis)Websockets(NetGain)Search(Elasticsearch)Database(SQL Server)Libraries &nbsp; 이 포스트는 오랜 시간에 걸처시리즈로 연재될 Stack Overflow의 아키텍처에 대한 첫번째 글입니다. 벌써 다음 글이 포스팅 되었네요. Stack Overflow : A Technical Deconstruction 그럼 이번글 번역&amp;의역&amp;리뷰 시작합니다. 이 기능의 모든것에 대한 아이디어를 얻기 위해, Stack Overflow에서 평일에 업데이트를 시작했습니다. 그래서 여러분은 2013년 11월의 이전 버전과 비교해 볼 수 있습니다. 여기 2013년 11월 12일과 비교한 2016년 2월 9일에 대한 하루동안에 통계자료가 있습니다. 209,420,973 (+61,336,090) HTTP requests to our load balancer 66,294,789 (+30,199,477) of those were page loads 1,240,266,346,053 (+406,273,363,426) bytes (1.24 TB) of HTTP traffic sent 569,449,470,023 (+282,874,825,991) bytes (569 GB) total received 3,084,303,599,266 (+1,958,311,041,954) bytes (3.08 TB) total sent 504,816,843 (+170,244,740) SQL Queries (from HTTP requests alone) 5,831,683,114 (+5,418,818,063) Redis hits 17,158,874 (not tracked in 2013) Elastic searches 3,661,134 (+57,716) Tag Engine requests 607,073,066 (+48,848,481) ms (168 hours) spent running SQL queries 10,396,073 (-88,950,843) ms (2.8 hours) spent on Redis hits 147,018,571 (+14,634,512) ms (40.8 hours) spent on Tag Engine requests 1,609,944,301 (-1,118,232,744) ms (447 hours) spent processing in ASP.Net 22.71 (-5.29) ms average (19.12 ms in ASP.Net) for 49,180,275 question page renders 11.80 (-53.2) ms average (8.81 ms in ASP.Net) for 6,370,076 home page renders 위의 통계자료를 보면, 2013년도보다 하루에 6100만건이나 더 많은 요청이 있었음에도 불구하고 ASP.Net의 급격한 처리시간 감소했다는 것에 대해 의문이 생길 것입니다. 그 이유는 2015년 하드웨어 업그레이드와 어플리케이션 내부의 많은 성능 튜닝 때문입니다. 잊지마세요! 성능도 기능입니다:) 혹시, 제가 언급한 것 이상의 하드웨어 성능이 궁금하셨다면 두려워하지 마세요. 다음 포스트는 모든 서버에 대한 하드웨어 스펙의 부록이 될 겁니다. (아마 제가 살아있는 동안 쓰긴할 거예요; 이미 작성되서 링크 걸어놨습니다^^) 그래서 지난 2년동안 무엇이 바뀌었냐구요? 몇개의 서버와 네트워크 장비를 교체한거 말고는 특별한 건 없습니다. 여기 현재 사이트에서 운영하는 하드웨어의 목록이 있습니다.(2013년 이후로 달라진 점에 주목해 주세요) 4 Microsoft SQL Servers (new hardware for 2 of them) 11 IIS Web Servers (new hardware) 2 Redis Servers (new hardware) 3 Tag Engine servers (new hardware for 2 of the 3) 3 Elasticsearch servers (same) 4 HAProxy Load Balancers (added 2 to support CloudFlare) 2 Networks (each a Nexus 5596 Core + 2232TM Fabric Extenders, upgraded to 10Gbps everywhere) 2 Fortinet 800C Firewalls (replaced Cisco 5525-X ASAs) 2 Cisco ASR-1001 Routers (replaced Cisco 3945 Routers) 2 Cisco ASR-1001-x Routers (new!) Stack Overflow를 운영하기 위해 필요한 것은 무엇일까요? 2013도 이후로 크게 변경되지는 않았습니다. 하지만 최적화와 위에 언급된 새 하드웨어들 때문에 우리는 오직 하나의 웹서버가 필요했습니다. 우리는 성공적으로 몇번에 걸처 테스트 했습니다. 명확히 말하자면, 이것이 좋은 아이디어라는 것이 아니라, 동작한다는 것입니다. 우리는 규모의 아이디어에 대한 몇가지 기준을 가지고 있어 우리가 얼마나 멋진 웹페이지를 만들수 있는지를 들여다 보겠습니다. 몇가지 시스템은 완전히 독립되어서 존재하기 때문에, 아키텍처에 대한 결정은 보통 각 부분들이 전체에 얼마나 적합한지의 큰 그림 없이 이해가 됩니다. 이후의 여러 글들은 구체적으로 깊게 파 볼겁니다. 이 글은 하드웨어의 개요가 될 것입니다; 다음 포스트는 하드웨어의 세부사항에 대해 다룰 것입니다. 지금의 하드웨어가 어떻게 생겼는지 보고싶어하는 사람들을 위해 2015년 2월 업그레이드 할 당시의 rack A의 사진이 있습니다.(이것과 같은 rack B도 있습니다.) 지금 이 사진을 보고 빠져드셨다면, 그주에 찍은 256개의 이미지 앨범이 있습니다.(이 숫자는 의도된 것은 아닙니다 ㅎㅎ) 지금부터 깊게 들여다 봅시다. 주요 시스템의 논리적 개요입니다. Ground RulEs여기 전체적으로 적용되는 몇가지 규칙이 있습니다. 그래서 모든 설정을 반복할 필요가 없습니다. 모든 것은 중복 구성됩니다. 모든 서버와 네트워크 장비는 최소한 2x 10Gbps 연결이 있습니다. 모든 서버는 2개의 전원피드와 2개의 발전기와 2개의 유틸리티 피드에 의해 돌아가는 2개의 전원 공급장치가 있습니다. 모든 서버는 rack A와 rack B사이에 중복되는 파트너가 있습니다. 비록 내가 대부분 여기 뉴욕에 있는 데이터 센터에 대하여 이야기 하지만, 모든 서버와 서비스는 또다른 데이터 센터(콜로라도)를 통해 중복해서 구성되어 있습니다. The Internets먼저 우리가 찾아야 할 것은 DNS(Domain Name System) 입니다. 우리 이것을 빨리찾게 하기 위해서 CloudFlare에 맡깁니다. CloudFlare는 더 가까운 DNS서버를 가지고 있기 떄문입니다. 그리고 우리는 API를 통해 DNS기록을 업데이트 하고 DNS로 호스팅을 수행합니다. 하지만 우리는 깊은 신뢰도 문제 때문에 여전히 DNS 서버를 가지고 있습니다. 세상에 대참사가 발생했을 때(아마 GPL, Punyon 또는 캐싱에 의한 대참사) 사람들이 여전히 프로그램을 그들의 마음에서 떠나 보낸다면, 우리는 그제서야 휙 던저버릴 것입니다. 우리의 비밀은신처를 찾은 후에 HTTP트래픽은 네가지 ISP(Level3, Zayo, Cogent, Lightower in NewYork)중에서 하나에 의해 발생하고 네가지 엣지 라우터 중 하나를 통해 흐릅니다. 우리는 트래픽의 흐름을 제어하고 가장 효율적으로 목적지에 도착하기 위해 몇가지 길을 제공하기 위해 BGP(Border Gateway Protocol)를 사용하는 ISP를 자세히 들여다 봐야 합니다. ASR-1001과 ASR-10010X라우터는 2쌍이고, 각각 2개의 ISP를 제공합니다. 비록 두개의 라우터는 모두 물리적으로 같은 10Gbps의 네트워크일지 몰라도, 외부 트레픽은 로드 밸런서가 연결하는 VLAN과 분리됩니다. 라우터를 통해서 흐른 후에 로드밸런서로 갑니다. 저는 우리가 2개의 데이터 센터 사이에 10Gbps MPLS(Multiprotocol Label Switching)를 가지고 있다고 언급할 수 있는 좋은 기회가 되었다고 생각합니다. 그러나 이것에 사이트를 제공하는데 직접 관여하진 않습니다. 저희는 만약의 돌발상황을 대비해서 데이터의 복제와 빠른 복구를 위해 이것을 사용합니다. “하지만 Nick, 그건 중복이 아니예요!” 여러분은 기술적으로 정확합니다.(the best kind of correct) 그게 유일한 실패요소입니다. 하지만 기다리세요! 우리는 ISP를 통해 2개 이상의 시스템 대체 OSPF루트를 가지고 있습니다.(MPLS가 #1이고, 비용지불에 의한 #2와 #3이 있습니다.) 각 셋은 콜로라도에 일치하는 장비에 더 빠른 연결을 요청합니다. 그리고 그것들은 트래픽을 각 장애 조차 상황 사이에 나누어 줍니다. 우리는 두가지를 연결하고 4가지 경로를 가질 수 있습니다. &nbsp; Load Balancers(HAProxy)저희는 리눅스를 선호하기 때문에 로드 밸런서는 CentOX 7기반으로 HAProxy 1.5.15를 사용하고 있습니다. TLS(SSL)도 지원합니다. HTTP/2가 지원되는 HAProxy1.7의 출시를 기다리고 있습니다. 듀얼 10Gbps LACP 네트워크 링크를 가진 다른 서버들과는 달리, 각 로드 밸런서는 10Gbps 2쌍을 가지고 있습니다: 외부 네트워크를 위한 것과 DMZ를 위한 것. 이 박스들은 64GB 실행하거나 더많이 효율화하기 위해 그 이상의 메모리를 SSL 협상을 처리합니다. 우리가 재사용 메모리에서 TLS 세션을 더 많이 캐싱할 때, 이전과 동일한 연속된 접속에 대해서는 재계산을 덜할 수 있습니다. 꽤 싼 RAM이 주어졌을 때, 이것은 쉬운 선택입니다. 로드 밸런서는 간단하게 설치할 수 있습니다. 다양한 IP의 다른 사이트와 주로 호스트헤더에 기반한 다양한 백엔드 경로를 듣고 있습니다. 우리가 여기에서 주목해야할 것은 속도제한과 HAProxy시스템로그 메시지에 있는 헤드 캡처이고 그래서 모든 단일 요청에 대해 성능메트릭스를 기록할 수 있습니다. 이것도 나중에 이야기 할 것입니다. Web Tier(IIS 8.5, ASP.Net MVC5.2.3, and .Net4.6.1)로드밸런서는 트래픽을 “primary”(01-09)라고 불리는 9개의 서버와 2개의 “dev/meta”(10-11, 스테이징 환경)로 나누어 줍니다. 프라이머리 서버는 마지막 2개의 서버에서 Stack Overflow, Career 그리고 meta.stackoverlfow.com과 meta.stackexchange.com를 제외한 Stack Exchange 사이트를 운영합니다. 프라이머리 Q&amp;A Application은 그자체로 멀티테넌시를 지원한다. 이것은 하나의 어플리케이션이 모든 Q&amp;A사이트에 대한 요청을 받는다는 것을 의미합니다. 우리는 하나의 서버에서 하나의 어플리케이션 풀의 전체의 Q&amp;A 네트워크를 실행할 수 있습니다. Career, API v2, 모바일 API 등과 같은 다른 어플리케이션은 분리됩니다. 아래는 IIS에서 primary와 dev계층의 모습입니다. Observer(내부적으로 사용하는 모니터링 대쉬보드)에서 웹계층을 가로지르는 Stack Overflow의 분포의 모습입니다. 그리고 사용관점에서 본 웹서버의 모습입니다. &nbsp; Service Tier(IIS, ASP.Net MVC5.2.3, .Net4.6.1, and HTTP.SYS)웹서버는 서비스계층과 매우 유사합니다. 또한 Windows 2012R2에서 IIS 8.5를 실행시킵니다. 이 계층은 생산웹계층과 다른 내부적시스템을 지원하기 위해 내부적 서비스를 운영해 왔습니다. 이 두가지는 태그엔진을 우녕ㅇ하고 http.sys를 기반으로 하는 Stack Server와 Providence API(IIS-based)입니다. 재미있는 사실은 2분 간격으로 질문목록을 새로고침할 때, Stack Server가 L2 와 L3를 제압하기 때문에 저는 각2개의 프로세스에서 소켓을 분리시키기 위해 관계를 세팅해야 합니다. 서비스계층은 중복성을 필요로하는 태그엔진과 벡엔드 API를 떠받치고 있지만, 모든 것을 9배 중복하는 것을 의미하진 않습니다. 예를들면 데이터베이스로부터 매n분마다 변경되는 보스트와 태그들을 로딩하는 것은 그렇게 가벼운 작업이 아닙니다. 우리는 웹계층에서 9번 로딩하는 것을 원하지 않습니다. 3이면 충분하고 우리에게 충분히 안전성을 제공합니다. 우리는 또한 태그엔진과 엘라스틱 인덱싱 작업을 최적화를 위해서 이계층의 하드웨어에서 환경을 다르게 설정합니다. 태그 엔진은 상대적으로 복잡하고 포스트에 연관성이 높습니다. /questions/tagged/java에 방문했을 때, 질문에 맞는 것을 보기 위해 태그 엔진을 검색합니다. 이것은 /search의 밖에서 태그에 부합하는 모든 것을 의미합니다. Cache &amp; Pub/Sub(REDIS) 우리는 Redis를 사용하고 Redis는 견고합니다. 한달에 1600억 ops를 처리하면서도 모든 인스턴스는 CPU를 2%이하로 사용합니다. 보통은 훨씬더 적게 사용합니다. 저희는 Redis의 L1/L2 캐쉬 시스템을 사용합니다. L1”은 웹서버 또는 어플의 HTTP캐쉬입니다. L2는 레디스로 돌아가서 값을 가져옵니다. 값은 Protobuf format에 저장됩니다. 클라이언트로 StackExchange.Redis를 사용합니다. 하나의 웹서버가 L1과 L2 둘다에서 캐쉬하는 것을 잊을 때, 이것은 소스로 부터 값을 복구합니다.(데이터베이스 쿼리, API call 등) 그리고 로컬 캐쉬와 레디스에 그결과를 넣습니다. 값을 원하는 다음 서버는 L1을 놓쳐도 됩니다. 그러나 데이터베이스 쿼리나 API call을 통해 저장한 L2/Redis에서 값을 찾을 겁니다. 우리는 또한 Q&amp;A사이트를 운영합니다. 각각의 사이트는 사이트 자체의 L1/ L2캐쉬를 가지고 있습니다. 레디스는 캐쉬로만 사용하지 않습니다. 레디스는 하나의 서버가 메시지를 출판하고 모든 다른 구독자가 그것을 받아 볼 수 있는 출판과 구독의 매커니즘을 가지고 있습니다. 우리는 웹서버를 제거할 때 이 매커니즘을 다른 서버의 L1캐쉬를 비우기 위해 사용합니다. 하지만 웹소켓이라는 또다른 방법이 있습니다. Websockets(NETGAIN)실시간 업데이트를 위해 웹소켓을 사용합니다. (예를 들면 topbar의 알림, 투표수, newnav의 수, 새 답변과 댓글 그리고 다른 몇가지들을 실시간으론 처리하기 위해 말이죠.) 웹소켓 서버는 웹티어에서 실행시키기 위해 raw 소켓(개발자가 새로운 프로토콜을 설계하여 구현하거나, 패킷을 세밀하게 조작할 때 사용하는 소켓. 커널 수준에서만 다룰 수 있었던 패킷의 헤더 등을 직접 구현하거나 조작할 수 있다.)을 사용합니다. 우리의 오픈소스 라이브러리인 StackExchange.NetGain에서 raw 소켓은 매우 가벼운 어플리케이션입니다. 동시접속자가 가장 많은 때는 약 500,000개의 웹소켓 연결이 발생합니다. 재미있는 사실은 이 브라우저중 일부는 18개월동안 열려 있다는 점입니다. 우리는 왜 그런지 확실히 모릅니다. 누군가는 .NetGain 개발자들이 여전히 활동하는지 체크해봐야 합니다. 아래는 이번주 동시접속 웹소켓 패턴의 모습입니다. 왜 웹소켓이냐구요? 웹소켓은 우리가가진 규모에서 폴링하는 것보다 훨씬 더 효율적이기 때문입니다. 우리는 단순히 더 적은 자원으로 더 많은 데이터를 밀어 넣을 수 있습니다. 반면에 사용자들은 더많은 인스턴스를 가지게 됩니다. 이 방법도 문제가 없는 것은 아닙니다. 로드 밸러서에 임시포트와 파일 처리의 고갈은 우리가 나중에 다뤄 볼 재미있는 이슈입니다. Search(Elasticsearch)스포일러 : 이 부분에서 많이 흥미로운 것은 없습니다. 웹계층은 엘라스틱서치1.4에 대항하여 고성능의 StackExchange.Elastic클라이언트를 이용하여 꽤 단순한 검색을 합니다. 대부분의 것과 달리, 우리가 가지고 있는 API의 일부를 노출하는 것이기 때문에 우리는 오픈소스에 대한 계획이 없습니다. 저는 오히려 더 많이 노출시키는 것이 개발자들을 혼란스럽게 할 것이라고 생각합니다. 각각의 엘라스틱 클러스터는 3개의 노드를 가지고 있고, 각 싸이트는 각자의 인덱스를 가지고 있습니다. Career는 추가적으로 적은 인덱스를 갖고 있습니다. 우리의 3개의 서버 클러스터는 SSD스토리지, 192GB의 RAM, 듀얼 10Gbps의 네트워크를 각각 가지고 있는 병균의 것들보다 조금 느립니다. 태그엔진을 호스팅하는 Stack서버에서 같은 어플리케이션 도메인은 엘라스틱 서치에서 아이템들을 인덱싱합니다. 우리는 여기서 ROWVERSION in SQL Server처럼 몇가지 간단한 트릭을 가지고 있습니다. 이것은 순차적인것처럼 행동하기 때문에 변화하는 아에템들을 쉽게 붙잡고 인덱싱할 수 있습니다. 우리가 SQL-full-text검색과 같은 것을 사용하지 않고 엘라스틱서치를 사용하는 주된 이유는 확장성과 메모리 할당 때문입니다. SQL CPU는 엘라스틱에 비해 비교적 비쌉니다. Solr는 왜 안되냐구요? 저희는 전체의 네트워크에서 검색하기 원합니다.(한번에 많은 인덱스를 걸어) 그리고 이것은 결정시간을 지원하지 않습니다. 우리가 2.x버전을 가직 사용하지 않는 이유는 type에 대한 주된 변화입니다. 업그레이드를 위해서는 모든 것을 다시 인덱싱하는 것이 필요합니다. 그러기에 우리는 시간이 부족합니다. Databases (SQL Server)저희는 SQL Server를 single source of truth(SSOT, 모든 핵심 데이터는 코드에서 한 번만 등장해야 한다)로 사용합니다. Elastic과 Redis의 모든 데이터는 SQL Server에서 가져옵니다. 우리는 AlwaysOn Availablility Group(데이터베이스 미러링에 대한 엔터프라이즈 수준의 대안을 제공하는 고가용성 및 재해 복구 솔루션)과 함께 2개의 SQL Server 클러스터를 실행합니다. 각 클러스터는 하나의 마스터를 가지고 뉴욕에 하나의 복제본을 가지고 있고, 또 콜로라도(우리의 DR 데이터 센터)에 또하나의 복제본을 가지고 있습니다. 모든 복제본은 동기화되어 있습니다. 첫번째 클러스터는 각 RAM 384GB, PCle SSD 4TB, 2x12 core를 가진 Dell R720xd서버 셋입니다. 이 서버는 Stack Overflow, Site(나쁜 이름입니다. 나중에 설명하겠습니다.), PRIZM, 모바일 데이터베이스를 호스팅합니다. 두번째 클러스터는 각 RAM 768GB, PCle SSD 6TB, 2x8core를 가진 Dell R730xd 서버 셋입니다. 이 클러스터는 Careers, Open ID, Chat, Exception log, 다른 모든 Q&amp;A사이트(예를 들면 Super User, Server Fault 등)를 포함하여 다른 모든 것을 실행시킵니다. 데이터베이스계층에서 CPU의 사용은 우리가 매우 적게 유지하려는 부분입니다. 그러나 사실상 캐쉬문제 때문에 순간 높아질 때가 있습니다. 지금은 NY-SQL02와 04 가 마스터이고, 01과 03가 SSD업그레이드 하는 동안 재시작되는 복제본입니다. 아래는 지난 24시간 동안의 데이터베이서 서버의 모습입니다. 우리의 SQL사용법은 꽤 단순합니다. 단순하다는 것은 빠르다는 것입니다. 비록 몇가지 쿼리가 미쳐 날뛸 순 있지만, SQL과의 상호작용은 꽤 단순합니다. 우리는 일부 과거의 시스템인 Linq2Sql를 가지고 있지만 새로운 개발은 Dapper와 우리의 오픈소스인 POCOs를 사용한 Micro-ORM을 사용합니다. Stack Overflow는 데이터베이스에서 한번만 저장하는 절차를 가지고 있는데 이것은 코드에 마지막 흔적만 이동시키려는 의도입니다. Libraries직접적으로 여러분에게 도움이되는 것은 제가 위에 언급했던 것처럼 몇가지 장비를 변경하는 것입니다. 그리고 아래는 저희가 사용하는 .Net 라이브러리들의 오픈 소스의 리스트입니다다. 아래 오픈소스들은 핵심 비지니스 가치는 없지만 전세계의 개발자들에게 는 도움을 줄 수 있기 때문에 공개합니다. 여러분이 유용함을 발견할 수 있기를 바랍니다. Dapper (.Net Core) - High-performance Micro-ORM for ADO.Net StackExchange.Redis - High-performance Redis client MiniProfiler - Lightweight profiler we run on every page (also supports Ruby, Go, and Node) Exceptional - Error logger for SQL, JSON, MySQL, etc. Jil - High-performance JSON (de)serializer Sigil - A .Net CIL generation helper (for when C# isn’t fast enough) NetGain - High-performance websocket server Opserver - Monitoring dashboard polling most systems directly and feeding from Orion, Bosun, or WMI as well. Bosun - Backend monitoring system, written in Go 다음은 우리의 코드를 실행하는 구체적인 하드웨어 리스트입니다. 그 후 우리는 다음 목록으로 넘어갈 것입니다. 지켜봐 주세요:)","categories":[{"name":"미분류","slug":"미분류","permalink":"http://www.devpools.kr/categories/미분류/"}],"tags":[]},{"title":"4월 1주차 해커뉴스 소식","slug":"4월-1주차-해커뉴스-소식","date":"2016-04-04T11:02:02.000Z","updated":"2017-12-13T00:05:28.190Z","comments":true,"path":"2016/04/04/4월-1주차-해커뉴스-소식/","link":"","permalink":"http://www.devpools.kr/2016/04/04/4월-1주차-해커뉴스-소식/","excerpt":"","text":"NPM and Left-Pad: Have We Forgotten How to Program? (haneycodes.net) “left-pad”라는 npm모듈과 React, Babel 그리고 다른 패키지들과의 의존성 때문에 많은 npm 패키지들이 깨지는 현상이 발견되었습니다. 이 문제 때문에?(덕분에?) 진행된 npm에코시스템에 대해 저자가 관찰한 사항에 대한 이야기 입니다.2. I’ve Just Liberated My Modules (medium.com) Azer Koçulu의 글인데요, 뭔가 글에서 화남이 느껴집니다. kik 이라는 이름의 npm 모듈을 만들고 있었는데 변호사에게 연락이 와서 이미 등록된 게 있으니 사용하지 말라고 압박이 들어왔습니다. 거절의사를 밝히자 @izs(npm의 CEO)는 저자의 허가 없이 모듈의 오너쉽을 바꾸는 걸 허락했네요. 정말 어처구니 없는 일이네요. 저자는 더이상 npm에서 소스를 공유할 수 없음을 판단하고 다른 모든 모듈도 npm에서 출판하지 않을 것이라고 선언했네요. 앞으로 Azer의 소스를 사용한다면 Github을 이용해 주세요:)3. That awkward moment when Apple mocked good hardware and poor people (techinasia.com) Apple이 좋은 하드웨어와 가난한 사람들을 조롱할 때 꼴사나운 순간? 정도로 번역할 수 있을까요? 이런 직역으로는 내용 파악이 바로 불가능할 것 같네요 ㅜ.ㅜ Apple의 사용자들은 upgrade를 할 필요성을 느끼지 않는다. 사용자가 upgrade를 하게 만들기 위해서는 “이유”를 만들어 주어야 한다는 내용이네요.4. Left-pad as a service (left-pad.io) 첫번째 해커뉴스와 같은 맥락의 글입니다. 아까 말했듯이 “left-pad”모듈 때문에 패키지가 깨지는 현상이 발생했습니다. nodejs는 쿨하게 “left-pad”모듈을 삭제했습니다. 역시 프로개발자는 빈틈을 놓치지 않죠!!! 한 개발자가 몇일 되지 않아 left-pad.io 라는 걸 만들어냈습니다. (라이센스 부분 읽어보면 엔터프라이즈 라이센스는 유료인 듯 합니다.)5. Docker for Mac and Windows Beta (blog.docker.com) [embed]https://youtu.be/9CuClvKMt04[/embed] 도커의 3번째 생일을 맞아 리눅스에서만 사용가능하던 Docker의 윈도우 버전과 맥버전이 출시되었습니다! 아직 베타버전이긴 하지만요 :)6. I switched to Android after 7 years of iOS (joreteg.com) 제목만 봐도 너무 궁금해 지는 이야게네요. iOS를 7년이나 사용하고 안드로이드로 바꾸려는 이유는 무엇일까요? Progress Web App의 프로토타이핑을 시연하기 위해 오래된 안드로이드 폰을 꺼내다가 자신이 현재 가지고 있는 iPhone6보다 구형의 안드로이드가 웹어플리케이션을 위한 플랫폼으로는 더 뛰어나다고 생각했다고 합니다. 관점에 따른 차이겠지만 Henric Joreteg는 요즘은 많은 앱들이 웹앱으로 변모하고 있고, 웹이야 말로 유일한 개방형 플랫폼이라고 생각해 웹앱에 초점을 두고 이야기를 한 듯 합니다.7. Citus Unforks from PostgreSQL, Goes Open Source (citusdata.com) Citus 5.0 버전이 나왔다는 기사네요. Citus는 PostgreSQL을 빅데이터 어플리케이션이 요구하는 분산 데이터베이스로 사용할 수 있게하고, 실시간 읽기/쓰기와 대용량 병렬분석 기능을 제공합니다. PostgreSQL의 최신버전 API를 직접사용하는 세계 최초 분산 데이터베이스이고 오픈소스로 github에서 확인할 수 있습니다. Require-from-Twitter (gist.github.com) github gist에 올라온 글입니다. github gist가 뭔가 했는데 repository를 만들지 않고 간단한 코드만 올릴때 사용하는 코드 게시판 같은 거였네요. 블로그에 직접 임베드 시킬 수 있습니다. require-from-twitter는 twitter 패키지 매니저입니다. 이게 왜 올라왔나 봤더니 이것도 LeftPad 가 포함되어서 그런 것 같네요.","categories":[{"name":"미분류","slug":"미분류","permalink":"http://www.devpools.kr/categories/미분류/"}],"tags":[]},{"title":"Free Code Camp Seoul MeetUp 다녀왔어요!","slug":"free-code-camp-seoul-meetup-다녀왔어요","date":"2016-04-04T11:01:37.000Z","updated":"2017-12-13T09:53:04.607Z","comments":true,"path":"2016/04/04/free-code-camp-seoul-meetup-다녀왔어요/","link":"","permalink":"http://www.devpools.kr/2016/04/04/free-code-camp-seoul-meetup-다녀왔어요/","excerpt":"","text":"지난 4월 2일 토요일! 드디어! Free Code Camp(FCC) Seoul MeetUp에 devpools가 다녀왔습니다. 만나서 어떤 일을 하나? 다들 많이 궁금해 하셨을 텐데요. (사실 저희도 그게 궁금해서 가봤습니다.) 다녀온 소감 간단하게 남겨보려고 합니다. FCC MeetUp은 여기서 자주하는 거 같습니다. 상수역 1번 출구에서 멤버들이 모여서 출발했습니다. aA 디자인 뮤지엄(박물관이 아니라 카페라는…-_-;)은 상당히 고풍스러웠습니다. 그리고 음료 가격도 비쌌죠..;; 이곳에 모여서 특별한 이벤트를 진행하는 것은 아니구요. 2,3명의 모임을 주도하는 분이 계시고 그냥 앉아서 FreeCodeCamp를 풀고 있으면 막히는 부분은 도와주고, 개발자들끼리 네트워크를 나누는 공간이었습니다. 모임을 리딩하는 한 분이 계시고, 낯선 사람들로 가득찬 모임에 나와 뻘쭘하거나 심심하지 않게 말을 걸어주시는 분이 계십니다. 참가자 대부분이 외국인들이라 초반의 낯설음은 있었지만, 우리는 혼자가 아니었기에 같이 열심히 개발에 매진했습니다. 우리끼리 남긴 후기를 볼까요? 외국인 개발자 들이 모여서 네트워크하기 정말 좋은 장소. 컨텐츠 자체가 너무 좋기에 개발을 즐긴다면 토요일에 고고~ - keen - 상수역이라는 곳이 이렇게 활기찬 곳인지 몰랐어요. 4월의 첫날 모두들 벚꽃구경가느라 바빴겠지만, 이런 아름다운 공간에서 다 같이 모여서 열공하는 분위기는 충분히 가치가 있었습니다. - Alex - 혼자라 부끄럽다면, 옆에 앉아 구경하는 것으로 시작하셔도 좋을 것 같아요. ㅎㅎ 분명 함께 하고 싶어질꺼예요 :) - Tiffany- &nbsp;","categories":[{"name":"미분류","slug":"미분류","permalink":"http://www.devpools.kr/categories/미분류/"}],"tags":[]},{"title":"4월 1주차 깃헙트렌드 Java편.","slug":"4월-1주차-깃헙트렌드-java편","date":"2016-04-04T10:59:03.000Z","updated":"2017-12-12T23:48:16.987Z","comments":true,"path":"2016/04/04/4월-1주차-깃헙트렌드-java편/","link":"","permalink":"http://www.devpools.kr/2016/04/04/4월-1주차-깃헙트렌드-java편/","excerpt":"","text":"안녕하세요. 금주에는 깃헙트렌드중 Java 라 쓰고 Android 라고 읽는다 에 올라온 핫한 Top 5를 소개시켜 드리려고 합니다. &nbsp; 1. StatusBarUtil Android 앱 UI의 완성도를 위해 건드려야할 요소가 여러가지가 있는데 그중에 은근히 건드리기 귀찮은 StatusBar의 색상이나 투명도를 설정할 수 있는 Util입니다. StatusBarUtil.setColor(Activity activity, int color); StatusBarUtil.setTranslucent(Activity activity, int statusBarAlpha) 코드에서 어떻게 사용하는지 느낌이 확 오네요. API19+에서 사용가능합니다. &nbsp; 2. WelcomeCoordinator 앱의 웰컴페이지를 손쉽게 만들수 있도록 도와주는 페이지입니다. 앱 최초 실행시 또는 인트로에 사용되는 여러 Layout을 묶어서 페이지의 이동을 편하게 도와줍니다. 오늘 소개시켜드리는 대부분의 자료들이 UI라서 직접 보는 것 만큼 좋은 설명은 필요없어 보입니다. &nbsp; 3. VideoListPlayer ListView 또는 RecyclerView에 재생을 컨트롤할 수 있는 요소를 추가시켜 마치 instagram의 List를 스크롤할때의 경험을 제공합니다. 최근 trend상위에 중국 개발자의 작품이 많이 올라오는데 이것 역시 그들의 작품이네요. 하지만 우리는 code로 communication하니까… &nbsp; 4. AndroidSpinKit 기하학적인 도형들의 디자인으로 구성된 Android Native UI Components set입니다. Button / TextView / ImageView /ProgressBar로 구성되어 있으며 그간 Material Design이 좀 지겨워지는 유저를 위한 선택이 될수 있겠네요. 이것도 역시 중국 개발자의 작품으로써 중국어를 배워야하는 것이 아닌가 하는 걱정도 슬슬 들기 시작합니다. 하지만 우리에겐 구글 번역기가 있기에… &nbsp; 5. BoomMenu 이번주 마지막으로 소개시켜드릴 내용도 역시 Android UI네요. BoomMenu라는 UI Components인데, Hamberger Button, Action Bar Menu, Floating Action Button 등을 화려하게 변신시켜 줍니다. 가이드를 아주 잘 만들어 놨네요. 부담없이 사용하셔도 될듯합니다.","categories":[{"name":"GitHub-trend","slug":"GitHub-trend","permalink":"http://www.devpools.kr/categories/GitHub-trend/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://www.devpools.kr/tags/Android/"},{"name":"Java","slug":"Java","permalink":"http://www.devpools.kr/tags/Java/"},{"name":"UI","slug":"UI","permalink":"http://www.devpools.kr/tags/UI/"}]},{"title":"Codeybot : New Robot Who Teaches Coding","slug":"codeybot-new-rob…o-teaches-coding","date":"2016-04-04T10:40:37.000Z","updated":"2017-12-13T09:23:49.238Z","comments":true,"path":"2016/04/04/codeybot-new-rob…o-teaches-coding/","link":"","permalink":"http://www.devpools.kr/2016/04/04/codeybot-new-rob…o-teaches-coding/","excerpt":"","text":"안녕하세요. 이번에 소개해드릴 KickStarter Crowdfunding Item은 Codeybot 입니다. “Codebot, The Fully Customizable Robot, Teaches Coding, Dances, Plays Music, and Shoots Lasers”이라고 처음에 소개를 해주는데요. 아이들에게 프로그래밍 코드를 재미있게 가르칠 수 있는 로봇입니다. 바퀴를 통해 자유롭게 움직 일 수 있고, 몸통에 있는 LED를 통해 다양한 표현을 할 수 있습니다. 이 Codeybot은 Codeybot App을 통해 조정 할 수 있는데요, Codeybot App은 현재 iOS 7.1 이후 버전에서만 이용가능하다고 합니다. 즉, 이 로봇을 산다고 해도 조절을 하려면 iPhone이나 iPad가 필요하다는 것입니다. 조절 패드 터치나 자이로센서를 이용해 움직일 수 있습니다. 레이저 건을 설치해 Codeybot끼리 게임도 가능합니다. 뿐만아니라 코딩을 통해 조작을 할 수 있는데요, 지난번에 소개해 드린 Cubetto보다는 조금 더 나이가 있는 아이들에게 적합하다고 생각되네요. 딱 Scratch를 배우기 시작한 아이들(7세~)이라면 쉽게 다룰 수 있을 것이라 생각됩니다. (2)의 Block들을 이용해 (4)와 같이 프로그래밍을 코딩할 수 있으며, (3) 버튼을 통해 실행, 중지 명령을 내려 Codeybot이 움직이게 됩니다. 전체적인 UI나 조작법은 Scratch와 많이 유사합니다. 하지만 실제 눈앞에 있는 로봇이 움직이기 때문에 아이들에게 더 큰 흥미와 재미를 유발 할 수 있을 것이라 생각됩니다. [embed]https://ksr-video.imgix.net/assets/005/569/243/7953d0865530add9c16043f5dcee7cce_h264_high.mp4[/embed] 목표로한 펀딩 금액은 $100,000 이며, 현재 674명의 backer , $107,987 을 펀딩 받아 큰 문제가 없다면 순조롭게 물품이 제작될 것이라 생각되네요. 5월까지 펀딩을 받으며, 8월 배송을 목표로 하고 있습니다. 그리고 Codeybot을 받을 수 있는 최소 펀딩금액은 $129 입니다. $99 earlybird는 벌써 마감이라 아쉽네요. Scratch를 통해 봉사활동을 하고 있는데, 어린 친구들을 가르치다 보면 어느새 제가 더 재밌게 게임을 만들고 있곤 하는데요, Codeybot은 제가 가르쳤던 친구들이 정말 좋아할 만한 로봇이며, 또 제 수준에도 딱 맞는다고 생각되네요. 지난번 Cubetto와 유사하게 아이들이 놀면서 자연스럽게 프로그래밍 원리를 익히게 할 수 있으며, 프로그래밍을 처음 배우는 어른들에게도 참 유용할 것이라 생각됩니다.","categories":[{"name":"미분류","slug":"미분류","permalink":"http://www.devpools.kr/categories/미분류/"}],"tags":[]},{"title":"4월 1주차 깃헙트렌드","slug":"4월-1주차-깃헙트렌드","date":"2016-04-04T10:25:21.000Z","updated":"2017-12-13T00:06:05.539Z","comments":true,"path":"2016/04/04/4월-1주차-깃헙트렌드/","link":"","permalink":"http://www.devpools.kr/2016/04/04/4월-1주차-깃헙트렌드/","excerpt":"","text":"React이번 주에는 react 관련한 프로젝트들이 생각보다 눈에 띄었습니다. 한번 살펴 볼까요? react-native-desktop이번엔 또 뭐야.라고 하실지 모르겠습니다. React는 뭐고 React Native는 뭐고 이번엔 또 React Native Desktop 이라니… 그래서 한번 정리해 봤습니다! 리뷰 보러가기 react-storybookreact storybook 은 UIHarness 에 영감을 받아 만든 프로젝트로 UI 컴포넌트와 다른 비지니스 로직을 구분해서 개발할 수 있도록 하는데 초점이 있는 프로젝트 입니다. react-basicreact-basic 프로젝트는 react 를 개발할 때 필요하지만 이해하기 어려운 컨셉들을 잘 풀어서 설명해 놓은 readme프로젝트입니다. composition, memoization, state등에 대해서 서술해 놓았습니다. 마이크로 소프트 봇 빌더BotBuilder최근 테이라는 MS에서 만든 머신러닝 봇 때문에 재밌는 에피소드들이 생겼었는데요. MS는 요즘 개발자들에게 다시 사랑받는 이름이 되어 가고 있습니다. 지금 소개해 드릴 것은 MS 에서 제공하는 서비스를 봇을 통해 작업을 할 수 있는 오픈 소스 입니다. Free Code Camp 탐방기지난주에 드디어 bootstrap을 꺾고! github All time NO.1에 올라간 FCC (FreeCodeCamp) Seoul에 devpools 3 명이 잠입했습니다! 관련 사진과 후기들을 같이 공유 합니다. 후기 보러가기","categories":[{"name":"미분류","slug":"미분류","permalink":"http://www.devpools.kr/categories/미분류/"}],"tags":[]},{"title":"MobilECG Business Card","slug":"mobilecg-business-card","date":"2016-04-04T00:06:00.000Z","updated":"2017-12-10T10:17:12.032Z","comments":true,"path":"2016/04/04/mobilecg-business-card/","link":"","permalink":"http://www.devpools.kr/2016/04/04/mobilecg-business-card/","excerpt":"","text":"저는 아니지만, 대부분의 직장인들이 매일 들고다니는 것이 있습니다. 바로 명함인데요. 이 명함 한장으로 자신을 표현하고, 다른 사람들에게 기억되길 바랍니다. 하지만, 현실은 그렇지 않습니다. 책상 서랍 한 구석에 모여서 굴러다니거나, 심지어 길거리에 굴러다니곤 합니다. 그런 명합을 주인이 본다면 많이 마음이 아플겁니다. 그래서 재미있는 아이디어가 담긴 독득한 명함들이 있죠. 이러한 명함들은 받는 사람들에겐 좀 더 강한 이미지를 주고, 주는 사람들에게는 더 오래도록 기억되리라는 기대를 주게 됩니다. http://imgur.com/a/XHBgu 지금까지 얘기한 명함이랑 IT랑은 별 관련 없지만, 이건 좀 다릅니다. 위에서 소개된 명함들과 같은 역할에 충실하면서, IT기술이 들어가 있어요. 흥미를 느끼실 수 있을 거예요. 특히 거의 매일을 책상위에서 보내는 개발자이면서, 하루이틀 나이를 먹어가는 분이시라면, 관심을 가져보세요. 무엇이냐면요. 바로 심전도를 측정할 수 있는 명함입니다. [embed]http://mobilecg.hu/images/cardvideo.mp4[/embed] 명함과 동일한 사이즈에 작은 배터리와 작은 화면 그리고 센서가 있고, 명함의 양끝에 위치한 센서에 손을 잠시 대고 있으면 가운데 있는 작은 모니터에 심전도 그래프를 보여줍니다. 이 그래프를 통해서 자신의 심장상태를 체크해볼 수 있다고 합니다. 수시로 제 심장이 건강한지 체크해 볼 수 있다는 점에서 관심이 가는 제품입니다. 그런데 아쉽지만, 당장 구입할 수 있는 제품은 아니고, 현재는 프로토타입정도가 개발되었다고 합니다. 그리고 제품 한장당 $29나 하는 비용때문에, 개인이 막 뿌리고 다니기엔 다소 부담 되는 가격이 걸림돌일 거 같습니다. 그래서 이 명함은 식당에 이벤트용으로 넣는 용도로는 사용하지 못할 거 같습니다. 관심있으신 분들은 아래 개발사 블로그에 방문하셔서 추가되는 소식을 들어보셔도 좋을 거 같습니다. &nbsp; 블로그 : http://mobilecg.hu/blog.html 깃헙 : https://github.com/xdever/MobilECG-II/tree/master/CardECG","categories":[{"name":"Gadget","slug":"Gadget","permalink":"http://www.devpools.kr/categories/Gadget/"}],"tags":[]},{"title":"[github-trend] 3월 4주차","slug":"github-trend-3월-4주차","date":"2016-03-28T10:09:34.000Z","updated":"2017-12-13T10:24:50.879Z","comments":true,"path":"2016/03/28/github-trend-3월-4주차/","link":"","permalink":"http://www.devpools.kr/2016/03/28/github-trend-3월-4주차/","excerpt":"","text":"이번주는 드디어 FreeCodeCamp가 bootstrap의 깃헙 All time No.1자리를 차지했습니다. &gt;교육, 교육, 교육언제나 github에는 교육용 프로젝트들이 넘쳐납니다. FreeCodeCamp이제 더 이상 강조하지 않아도 되는 프로젝트입니다. 서두에 말씀드린데로 All time No.1이 되었습니다. 물론 growth hacking을 한 측면이 있으니까, 팔짱을 켜고 쳐다본다고 해도, 대단함을 부정할 수는 없을 것 같습니다. 리뷰는 여러번 한것 같으니 굳이 더 링크 걸지는 않겠습니다! Alexa-avs-rasberry-piAmazon의 Alexa와 라즈베리파이를 어떻게 연동 시키는지에 대한 자세한 내용이 나와 있는 프로젝트입니다. Alexa는 아마존 에코의 Voice 서비스 이름입니다. 말하자면 애플의 시리같은 녀석입니다. 점점 많은 디바이스들을 자신들의 플랫폼을 확장하는데 쓰고 있는 아마존의 노림수들을 자세히 들여다 볼 수 있는 좋은 프로젝트입니다. public-apisweb개발에 필요한 공공 API들을 모아둔 프로젝트입니다. 대게의 많은 public-api들을 모아두고 있습니다. 마블, 스타워즈, 스팀등의 Game API를 모아둔 부분도 눈에 띕니다. HowToBeAProgrammerGitBook을 만드는 것을 토대로 하고 있는 How To Be a Programmer 프로젝트입니다. 실제로 Amazon에서 책을 살 수 있는 Robert.L READ의 커뮤니티 버전이라고 하는군요. 개발자로 첫번째로 배워야 할 것은 Debugging 이고, 약간 배우고 나면 intermediate로 필요한 것은 동기부여이며 프로페셔널이 된다는 것은 불가능한 일들을 보고 난이도가 어렵다고 이야기 하는 것이라고 합니다. 전적으로 동의합니다. &gt;Javascript요즘은 Javascript를 Front-End로만 봐야할지에 대해 판단하기가 쉽지 않습니다. 이미 최선의 플랫폼으로 자리잡은 Node와 Electron 때문일 겁니다. cash제목 한번 찰진 듯 합니다. CASH라니. 게다가 자기 소개도 도발적. 리눅스 Shell을 virtualization 하는 기술은 아니군요. Node.js 기반으로 Linux 명령어를 만들고 있습니다 Cygwin 처럼 이해하면 될 것 같은데, dll기반이 아니라는 점을 장점으로 이야기 하고 있네요. ( 자세히 리뷰 보러가기 ) hain한국인의 프로젝트를 깃헙 트렌드에서 볼 줄을 몰랐습니다. (그렇다고 국뽕은 아닙니다!) 그래도 기분이 무척 좋습니다. Alfred 는 Mac에서 상당히 유명한 애플리케이션인데요. Alt+Space 키를 가지고 앱을 실행시키는 유틸리티입니다. 리뷰 보러가기 searchkitReact 컴포넌트의 쓰임새는 많은데 이번에 소개할 프로젝트는 엘라스틱 서치의 UI의 사용성을 높여주는 React Component입니다. 리뷰 보러가기 draft-js-plugins이 프로젝트를 이해하기 위해서는 먼저 draft.js에 대해서 알아야 합니다. facebook에서 만든 editor 프로젝트인 draft.js에 플러그인을 붙이는 프로젝트입니다. 전통적인WISWYG툴은 CKEditor나 TineMCE가 있는데, 처음 draft.js를 보았을 때는 다른 WISWYG툴에서 제공해 주는 많은 플러그인들이 없어서 어떻게 하나 했는데 마침 플러그인 프로젝트가 나왔군요. 장기적으로 두고보면 다른 에디터들이 해 줄 수 있던 것 이상으로 많은 일들을 할지도 모르겠군요 draft.js 리뷰보러가기 react무슨 말을 더 할까요? React 입니다. v.15.0.0-rc버전이 태깅되면서 사람들에게 다시 이슈가 된 듯합니다. left-paddatabase 쿼리를 만들 때, lpad, rpad 를 넣어보신 분들 많을 것입니다. javascript lpad가 프로젝트로 나왔습니다. 이걸 활용할 일이 js 에서 어디에 있을지는 의문(?) 입니다만, 프로젝트를 알아둬서 나쁠 건 없어보입니다. leftpad = require('left-pad') leftpad('foo', 5) // =&gt; \" foo\" leftpad('foobar', 6) // =&gt; \"foobar\" leftpad(1, 2, 0) // =&gt; \"01\" 참 재미있는 세상입니다. 이 lpad를 리뷰할 때는 이런 깊은 사연이 있는지 몰랐으나 이제 밝혀졌네요. 블로터 : 11줄의 코드, 인터넷을 패닉에 빠뜨리다 &gt;Rust, Rust! 이번엔 Rust 관련 프로젝트가 2개나 있는데, 주목할 만한 것은 Rust로 새로운 OS를 만들어 보려는 움직임이 있다는 것입니다. redoxredox는 rust로 새로 쓰는 OS 라고 합니다. 상당히 자신만만한게 Linux를 만들 때 잘못 짜여진 부분을 자신들이 좀 더 가볍게 짜겠다고 합니다. 실제로 이미 빌드되어서 돌아갈 수 있다고 합니다. 일단 스샷만 보면 firefoxOS를 처음볼때의 느낌을 지울 수는 없네요. core-utilsPOSIX계열의 core-utils( CLI 상에서의 기본 커맨드, cp, mv등등) 을 Rust로 새로 썼다는 군요. 위에 소개된 CASH랑도 일맥상통하는 부분이 있는데, 점점 더 새로운 컨셉의 OS 및 CLI 를 기대하는 반등이라고 생각됩니다. &gt;&gt;그외transfer.sh - GoLang프로젝트를 하면서 ftp서버를 구축한다던지 혹은 파일 쉐어링을 할 일이 많은데, 뭔가 조금은 더 쉽게 하고 싶다. 혹은 더 간단한 방법이 있으면 좋겠다는 생각들 많이 하셨을 거라고 봅니다. ( 리뷰 보러가기) BottomBar - Android안드로이드 Material Design의 화두둥 하나였던 Drawer (혹은 햄버거)에 대한 논란을 대처하는 구글식 해법.( 니가 뭘 좋아하든 다 준비했지) 페이스 북 앱에 조만간 적용될 거라는 제 예상은 아직입니다만, Bottom Bar가 나왔다는 것만으로도 일단은 좋습니다. 리뷰보러가기 &nbsp; &nbsp; &nbsp;","categories":[{"name":"미분류","slug":"미분류","permalink":"http://www.devpools.kr/categories/미분류/"}],"tags":[]},{"title":"Crowdfunding with kickstarter &amp; indiegogo","slug":"crowdfunding-with-kickstarter-indiegogo","date":"2016-03-21T10:58:53.000Z","updated":"2017-12-10T10:17:12.032Z","comments":true,"path":"2016/03/21/crowdfunding-with-kickstarter-indiegogo/","link":"","permalink":"http://www.devpools.kr/2016/03/21/crowdfunding-with-kickstarter-indiegogo/","excerpt":"","text":"저희 개발바보들은 새롭게 등록된 Crowdfunding 아이템들에 대해 소개하고, 또 직접 구매한 물건들에 대해 리뷰해볼 예정입니다. 먼저 제가 주로 소개하게될 아이템들이 있는 Crowdfunding사이트는 kickstarter와 indiegogo 입니다. 많은 분들이 이미 잘 알고 계시고, 이미 수차례 Backer를 하셨던 분도 계시겠죠? 이러한 Crowdfunding 사이트는 좋은 아이디어가 있지만 자금이 부족한 사람들을 위해 소비자들을 물품 제작 전에 참여시켜 그 아이디어가 구현 될 수 있도록 돕는 시스템입니다.(물론 사이트 운영을 위해 소정의 수수료를 받습니다.) 목표 투자액이 넘어가면 금액을 먼저 지불하고 물건을 추후에 받습니다. 당연히 목표 금액을 넘지 못한다면 결재가 되지 않거나 환불이 됩니다. 감사하게 먼저 투자를 해준 분들을 위한 특별한 혜택이 있습니다. (몇 개월 이상을 기다려야 하지만..) 판매하는 가격보다 싸게 구입할 수 있고, 특별한 문구나 Backer의 이름을 각인해 주기도 하고, 사은품을 주기도 합니다. 또한 시중에 판매되기 전에 받기 때문에 early adopter 성향이 있으신 분들이라면 한 번쯤 구매를 시도해볼만 하죠. 하지만 과대평가된 물품들도 있어서 약간은 도박이 될 수도 있습니다. 때문에 물건을 구매하기 전에 판매자와 물품에 대해 잘 확인해보고 꼭 필요한 물건을 사는게 좋겠죠. 금주에 살펴볼 아이템은 CUBETTO입니다. CUBETTO는 아이들이 놀면서 프로그래밍의 원리를 쉽게 알도록 해주는 장난감입니다. 2013년 kickstarter를 통해 프로젝트가 시작되었고, 올해 디자인 등을 개선한 새로운 버전의 프로젝트가 등록이 되었습니다. 조그마한 나무상자 장난감이지만 투자된 금액을 보면 대단하다는 생각이 듭니다. 단 3일도 채 되지 않아 목표 금액 $100,000의 200%인 $200,000를 훌쩍 넘었습니다. [embed]https://youtu.be/yBJWKbv589Q[/embed] arduino zero로 구성된 본체가 A 영역에 놓여진 coding block의 순서에 따라 움직이게 됩니다. 재밌는 점은 파랑색 function block을 통해 B 영역에 놓여진 coding block을 실행 시킬 수 있는 것인데요. B영역에 다시 function block을 놓게 되면 무한루프에 빠지게 됩니다. 이렇게 놓여진 coding block에 따라 50billion 이상의 동작을 표현 할 수 있다고 합니다. &nbsp; 2018년 부터는 소프트웨어 교육이 의무화가 됩니다. 프로그래밍을 이해하고, 자기 생각을 프로그래밍 언어로 표현하고 실행할 수 있는 능력은 프로그래머가 아닌 다른 꿈을 갖은 사람에게도 좋은 가치를 줄 것이라 생각합니다. CUBETTO는 어려운 언어로 모니터를 통해 프로그래밍의 원리 배우는게 아닙니다. 놀면서 자연스럽게 익히는 것인데요. 저도 조카들을 위해 하나 구매를 할까 심각하게 고민을 하고 있습니다. &nbsp;","categories":[{"name":"Gadget","slug":"Gadget","permalink":"http://www.devpools.kr/categories/Gadget/"}],"tags":[]},{"title":"[깃헙 트렌드] 3월 셋째주 주간 깃헙트렌드","slug":"깃헙-트렌드-3월-셋째주-주간-깃헙트렌드","date":"2016-03-21T10:56:01.000Z","updated":"2017-12-13T09:30:29.539Z","comments":true,"path":"2016/03/21/깃헙-트렌드-3월-셋째주-주간-깃헙트렌드/","link":"","permalink":"http://www.devpools.kr/2016/03/21/깃헙-트렌드-3월-셋째주-주간-깃헙트렌드/","excerpt":"3월 셋째주 깃헙트렌드 Best25입니다. FreeCodeCamp / FreeCodeCamp (JavaScript • 3,613 stars this week)The http://FreeCodeCamp.com open source codebase and curriculum. Learn to code and help nonprofits. Rochester-NRT / AlphaGo (JavaScript • 2,611 stars this week)A replication of DeepMind’s 2016 Nature publication, “Mastering the game of Go with deep neural networks and tree search,” details of which can be found on their website. ryanoasis / nerd-fonts (Python • 1,582 stars this week):abcd: Collection of over 20 patched fonts (over 2,000 variations) &amp; FontForge font patcher python script for Powerline, Font Awesome, Octicons, Devicons, and Vim Devicons. Includes: Droid Sans, Meslo, Source Code, AnonymousPro, Hack, ProFont, Inconsolata, and many more feathersjs / feathers (JavaScript • 1,468 stars this week)A minimalist real-time JavaScript framework for tomorrow’s apps. roughike / BottomBar (Java • 1,318 stars this week)A custom view component that mimics the new Material Design Bottom Navigation pattern. ageitgey / amplify (CSS • 1,311 stars this week )A Jekyll html theme in the vague style of Medium.com built using Google AMP vasanthk / js-bits (JavaScript • 1,265 stars this week)JavaScript concepts with code! alexjc / neural-doodle (Python • 1,250 stars this week)Turn your two-bit doodles into fine artworks with deep neural networks! An implementation of Semantic Style Transfer. 1000ch / grd (HTML • 1,179 stars this week)A CSS grid framework using Flexbox. Only 512 bytes (Gzipped). srdja / Collections-C (C • 1,120 stars this week)A library of generic data structures. DKirwan / calendar-heatmap (JavaScript • 1,087 stars this week)A d3 heatmap representing time series data similar to github’s contribution chart Croteam-official / Serious-Engine (C++ • 968 stars this week)An open source version of a game engine developed by Croteam for the classic Serious Sam games. yenchenlin1994 / DeepLearningFlappyBird (Python • 968 stars this week)Flappy Bird hack using Deep Reinforcement Learning (Deep Q-learning). easychen / howto-make-more-money (877 stars this week)程序员如何优雅的挣零花钱 kazzkiq / balloon.css (CSS • 884 stars this week )Simple tooltips made of pure CSS marmelroy / PeekPop (Swift • 885 stars this week)Peek and Pop with backwards-compatibility airbnb / javascript (JavaScript • 724 stars this week)JavaScript Style Guide VictorBjelkholm / trymodule (JavaScript • 663 stars this week)It’s never been easier to try nodejs modules! jpmens / jo (C • 637 stars this week)JSON output from a shell facebook / react (JavaScript • 569 stars this week)A declarative, efficient, and flexible JavaScript library for building user interfaces. linagora / hublin (JavaScript • 607 stars this week)An easy and free video conference service #webrtc substance / substance (JavaScript • 614 stars this week)A JavaScript library for web-based content editing. sohutv / cachecloud (JavaScript • 526 stars this week)搜狐视频Redis私有云平台 sindresorhus / awesome (524 stars this week)A curated list of awesome lists tensorflow / tensorflow (C++ • 423 stars this week)Computation using data flow graphs for scalable machine learning &nbsp; 이번주는 언어별로 한번 정리해 볼까요?? &nbsp; Javascript FreeCodeCamp / FreeCodeCampFreeCodeCamp가 지난주에 이어 1위를 차지했습니다. 이젠 말이 필요없어, 지난주 링크에 모든 걸 맡기겠습니다. Rochester-NRT / AlphaGo지난 화요일을 마지막으로 알파고와 이세돌9단의 세기의 대결이 막을 내렸습니다. 비록 5경기중 1경기에서 승리를 거뒀지만 1920개의 CPU와 280개의 GPU를 사용하는 알파고를 상대로 이겼다는 점에서 대단하다는 생각이 듭니다. 알파고도 지난 링크로 연결로 마무리하겠습니다. feathersjs / feathers최소한의 실시간 자바스크립트 프레임워크라고 설명하고 있습니다. $ npm install -g yo generator-feathers $ mkdir my-app $ cd my-app $ yo feathers $ npm start 위와 같이 간단한 방법으로 실행시킬 수 있습니다. express와 socket.io를 wrapping했다고 하네요. 간단한 프로젝트를 만들 때 사용해 보는 것도 좋을 것 같습니다. vasanthk / js-bits자바스크립트의 개념을 코드로 설명해 놓았습니다. 코드가 있고, 윗부분의 주석으로 개념을 설명해 주네요. 사용법을 찾아 볼 때 참고하면 좋을 것 같네요. &nbsp; DKirwan / calendar-heatmap깃헙의 contribution차트 모양의 달력입니다. colorRange에 색 범위를 지정해 주면 위와 같은 차트를 볼 수 있습니다. // chart data example var chartData = [{ date: valid Javascript date object, count: Number }]; var chart1 = calendarHeatmap() .data(chartData) .selector('#chart-one') .colorRange(['#d6e685', '#1e6823']) .tooltipEnabled(true); chart1(); // render the chart airbnb / javascriptairbnb의 자바스크립트 스타일 가이드입니다. 번역본은 여기 있습니다. VictorBjelkholm / trymodule재미있는 프로젝트입니다. 간단하게 nodejs모듈을 테스트해볼 수 있는 cli tool 입니다. Readme에서는 color모듈을 가지고 테스트를 했었는데 좀더 예쁜 테스트 화면을 위해 chalk모듈을 테스트 해 보았습니다. npm으로 설치한후 npm install -g trymodule trymodule [모듈명]으로 REPL을 열어 테스트 하면 됩니다. trymodule colors facebook / react","text":"3월 셋째주 깃헙트렌드 Best25입니다. FreeCodeCamp / FreeCodeCamp (JavaScript • 3,613 stars this week)The http://FreeCodeCamp.com open source codebase and curriculum. Learn to code and help nonprofits. Rochester-NRT / AlphaGo (JavaScript • 2,611 stars this week)A replication of DeepMind’s 2016 Nature publication, “Mastering the game of Go with deep neural networks and tree search,” details of which can be found on their website. ryanoasis / nerd-fonts (Python • 1,582 stars this week):abcd: Collection of over 20 patched fonts (over 2,000 variations) &amp; FontForge font patcher python script for Powerline, Font Awesome, Octicons, Devicons, and Vim Devicons. Includes: Droid Sans, Meslo, Source Code, AnonymousPro, Hack, ProFont, Inconsolata, and many more feathersjs / feathers (JavaScript • 1,468 stars this week)A minimalist real-time JavaScript framework for tomorrow’s apps. roughike / BottomBar (Java • 1,318 stars this week)A custom view component that mimics the new Material Design Bottom Navigation pattern. ageitgey / amplify (CSS • 1,311 stars this week )A Jekyll html theme in the vague style of Medium.com built using Google AMP vasanthk / js-bits (JavaScript • 1,265 stars this week)JavaScript concepts with code! alexjc / neural-doodle (Python • 1,250 stars this week)Turn your two-bit doodles into fine artworks with deep neural networks! An implementation of Semantic Style Transfer. 1000ch / grd (HTML • 1,179 stars this week)A CSS grid framework using Flexbox. Only 512 bytes (Gzipped). srdja / Collections-C (C • 1,120 stars this week)A library of generic data structures. DKirwan / calendar-heatmap (JavaScript • 1,087 stars this week)A d3 heatmap representing time series data similar to github’s contribution chart Croteam-official / Serious-Engine (C++ • 968 stars this week)An open source version of a game engine developed by Croteam for the classic Serious Sam games. yenchenlin1994 / DeepLearningFlappyBird (Python • 968 stars this week)Flappy Bird hack using Deep Reinforcement Learning (Deep Q-learning). easychen / howto-make-more-money (877 stars this week)程序员如何优雅的挣零花钱 kazzkiq / balloon.css (CSS • 884 stars this week )Simple tooltips made of pure CSS marmelroy / PeekPop (Swift • 885 stars this week)Peek and Pop with backwards-compatibility airbnb / javascript (JavaScript • 724 stars this week)JavaScript Style Guide VictorBjelkholm / trymodule (JavaScript • 663 stars this week)It’s never been easier to try nodejs modules! jpmens / jo (C • 637 stars this week)JSON output from a shell facebook / react (JavaScript • 569 stars this week)A declarative, efficient, and flexible JavaScript library for building user interfaces. linagora / hublin (JavaScript • 607 stars this week)An easy and free video conference service #webrtc substance / substance (JavaScript • 614 stars this week)A JavaScript library for web-based content editing. sohutv / cachecloud (JavaScript • 526 stars this week)搜狐视频Redis私有云平台 sindresorhus / awesome (524 stars this week)A curated list of awesome lists tensorflow / tensorflow (C++ • 423 stars this week)Computation using data flow graphs for scalable machine learning &nbsp; 이번주는 언어별로 한번 정리해 볼까요?? &nbsp; Javascript FreeCodeCamp / FreeCodeCampFreeCodeCamp가 지난주에 이어 1위를 차지했습니다. 이젠 말이 필요없어, 지난주 링크에 모든 걸 맡기겠습니다. Rochester-NRT / AlphaGo지난 화요일을 마지막으로 알파고와 이세돌9단의 세기의 대결이 막을 내렸습니다. 비록 5경기중 1경기에서 승리를 거뒀지만 1920개의 CPU와 280개의 GPU를 사용하는 알파고를 상대로 이겼다는 점에서 대단하다는 생각이 듭니다. 알파고도 지난 링크로 연결로 마무리하겠습니다. feathersjs / feathers최소한의 실시간 자바스크립트 프레임워크라고 설명하고 있습니다. $ npm install -g yo generator-feathers $ mkdir my-app $ cd my-app $ yo feathers $ npm start 위와 같이 간단한 방법으로 실행시킬 수 있습니다. express와 socket.io를 wrapping했다고 하네요. 간단한 프로젝트를 만들 때 사용해 보는 것도 좋을 것 같습니다. vasanthk / js-bits자바스크립트의 개념을 코드로 설명해 놓았습니다. 코드가 있고, 윗부분의 주석으로 개념을 설명해 주네요. 사용법을 찾아 볼 때 참고하면 좋을 것 같네요. &nbsp; DKirwan / calendar-heatmap깃헙의 contribution차트 모양의 달력입니다. colorRange에 색 범위를 지정해 주면 위와 같은 차트를 볼 수 있습니다. // chart data example var chartData = [{ date: valid Javascript date object, count: Number }]; var chart1 = calendarHeatmap() .data(chartData) .selector('#chart-one') .colorRange(['#d6e685', '#1e6823']) .tooltipEnabled(true); chart1(); // render the chart airbnb / javascriptairbnb의 자바스크립트 스타일 가이드입니다. 번역본은 여기 있습니다. VictorBjelkholm / trymodule재미있는 프로젝트입니다. 간단하게 nodejs모듈을 테스트해볼 수 있는 cli tool 입니다. Readme에서는 color모듈을 가지고 테스트를 했었는데 좀더 예쁜 테스트 화면을 위해 chalk모듈을 테스트 해 보았습니다. npm으로 설치한후 npm install -g trymodule trymodule [모듈명]으로 REPL을 열어 테스트 하면 됩니다. trymodule colors facebook / react자바스크립트 UI 라이브러리입니다. 공식페이지에서는 특징을 3가지로 설명하고 있습니다. Just the UI Virtual DOM Data Flow 작년에 혜성같이 등장하여 해가 바뀐 올해에도 순위권에 오르고 있습니다:) 리뉴얼 전 깃헙트렌드에서 발행했었던 React Deep Dive링크로 마무리 짓겠습니다. linagora / hublin무려 무료이자 오픈소스인 비디오 컨퍼런스 서비스입니다. beta 버전으로 테스트해서 컴퓨터와 휴대폰을 연결해보았는데요, 시간차가 있고, 잡음이 좀 심하다는 느낌이 있었습니다. 뭐… 무료니까요 :) substance / substance웹기반 WYSIWYG에디터를 기반으로한 자바스크립트 라이브러리입니다. 여기에 설명이 잘 나와 있습니다. subsstance의 강점으로는 커스터마이징이 가능하고, HTML/XML로 import/export 할 수 있으며, 공동편집이 가능하다 등의 내용을 강조하고 있습니다. 기능적인 요소만 봤을 땐 ehterpad와 유사하네요. UX는 더 깔끔해서 전 이게 더 마음에 듭니다. sohutv / cachecloud클라우도 플랫폼이라고 합니다. 중국어로 된 프로젝트인데, 번역기에게 문의하여 뭐하는 프로젝트인지만 확인 해보았습니다. 자동 분할 레디 스 인스턴스의 현상을 해결하기 위해 배치 유형 ( 레디 스 독립 , 레디 스 센티넬 , 레디 스 클러스터 ) 의 다양한 달성 포괄적 인 통계 , 모니터링, 운영 및 유지 보수 기능을 제공 , 운영 및 유지 보수 비용 및 개발자 를 줄이기 위해 : CacheCloud 레디 스 클라우드 관리 플랫폼을 제공합니다 오용 , 기계 활용도를 높이고 유연한 확장 성을 제공 , 편리하게 액세스 클라이언트를 제공합니다. 네, 그렇다고 합니다. 운영, 유지보수를 위한 통계 모니터링 서비스를 제공하는 것 같습니다. HTML &nbsp; 1000ch / grd3월 10일에 처 커밋되서 이번주에 1000개 이상의 star를 받으며 깃헙트렌드로 올라온 프로젝트입니다. flexbox를 사용하는 CSS grid 프레임워크입니다. flexbox에 대한 설명은 링크를 참조해주세요. IE에서는 아직 불안정할 듯 보이네요. grd의 Readme를 참고하면 Simple, Light-weight, Flexible하다고 합니다. 전체 div에 Gird class를 부분 div에 Cell class를 추가해주면 설정 완료입니다. &lt;div class=\"Grid\"&gt; &lt;div class=\"Cell -3of12\"&gt;3of12&lt;/div&gt; &lt;div class=\"Cell -9of12\"&gt;9of12&lt;/div&gt; &lt;/div&gt; 속성클래스는 Readme(Grid modifiers, Cell modifiers 참고)에 잘 정리되어있고, 라이브데모도 존재합니다. CSS잘알못인 저도 쉽게 사용할 수 있겠네요! &nbsp; CSS ###### ageitgey / amplify저희는 wordpress를 사용하지만 Jekyll로 블로그를 하시는 분들도 많이 계시는데요, amplify는 Google AMP를 사용해 만든 Jekyll 테마입니다. 라이브 데모도 있지만 귀찮으니깐 스크린샷 하나 보여드리겠습니다. AMP(Accelerated Mobile Pages)는 지연없이 페이지에 바로 액세스 가능하게하는 프레임워크로 웹기반의 기술을 사용해 모바일 웹의 성능을 높이기 위한 목적을 가지고 있다고 합니다. Naver D2페이지에 자세히 설명되어 있네요. 그렇다면 얼마나 빠를까요? amplify데모페이지, react페이지, jekyllrb페이지를 비교해 놓았네요. kazzkiq / balloon.css 지난주에 올라왔던 순수CSS 만으로 구성된 툴팁입니다. Python &nbsp; ryanoasis / nerd-fonts개발하는데 사용되는 글꼴, 아이콘들을 패치해 놓은 프로젝트입니다. Font Awesome, Devicons, Octicons 등 다양한 아이콘들이 포함되어 있네요! alexjc / neural-doodle지난주에 이어 순위권에 있는 프로젝트 입니다. 신경망 알고리즘을 이용해서 이미지를 프로세싱합니다. yenchenlin1994 / DeepLearningFlappyBird 깃헙 프로젝트에 들어가자마자 아래와 같이 시선을 끄는 이미지가 있네요. Deep Q-learning을 사용한 Flappy Bird hack이라는 게임입니다. C ###### srdja / Collections-C리스트, 배열, 해쉬테이블, 디큐(list, array, hashtable, deque)와 같은 제너릭 데이터 구조체 라이브러리 입니다. 사용법은 docs 페이지를 참고하세요. jpmens / jojo는 json을 만들어주는 유틸리티라고 합니다. C프로젝트인 만큼 C compiler가 필요하고, 최신버전의 automake와 autoconf가 필요합니다. automake와 autoconf 설치방법은 여기를 참조하세요. brew를 사용해서 설치해서 brew install jo &nbsp; Readme에 있는 가이드를 따라해 보았습니다. 알아서 type까지 인지해서 json으로 변환하는 모양입니다. 같은 형식으로 입력했는데도, 텍스트에만 큰따옴표가 붙어 생성되었습니다. 사용 방법에 대해서는 메뉴얼이 있습니다. 메뉴얼에서는 수줍게 버그가 있다고 고백하고 있습니다. $ jo a=1.0 {&quot;a&quot;:1} $ jo a=\\&quot;1.0\\&quot; {&quot;a&quot;:&quot;1.0&quot;} C++ &nbsp; Croteam-official / Serious-Engine SeriousSAM이라는 게임 알고 계신가요? 이 프로젝트는 SeriousSAM게임을 위해 Croteam이 개발한 게임엔진의 오픈소스 버전이라고 합니다. tensorflow / tensorflow지난 주에 leaf가 나오면서 언급되었던 tensorflow 입니다. leaf와 마찬가지로 기계학습과 딥러닝을 위해 구글에서 만든 오픈소스 라이브러리입니다. 알파고가 딥마인드만의 자체기술로 모두 이루어진 것은 아니고, 구글의 텐서플로우(Tensorflow)와 텐서플로우 이전버전인 디스트빌리프(DistBelief)를 많이 이용했다고 합니다. 그런 의미에서 주목받고 있는 프로젝트인 것 같습니다. 참고링크 : 구글의 텐서플로우 공개가 중요한 4가지 이유 텐서플로우 공식홈페이지 번역 Java &nbsp; roughike / BottomBar2016년 2월 Android Support Library23.2 가 발표되었는데요 새로운 컴포넌트로 BottomSheet가 추가되었습니다. Tab과 거의 유사한 방법으로 BottomBar를 추가할 수 있어서 이전버전의 Android Support Library를 사용해 본 개발자라면 쉽게 사용할 수 있을 것 같습니다. &nbsp; Swipt &nbsp; marmelroy / PeekPopiPhone 6S 광고 기억하시나요? PeekPop은 iPhone 6S, 6S+에 소개된 손끝의 힘에 따라 미리보거나 열어볼 수 있는 기능입니다. 말로 설명하는 것보다 한번 보는게 더 멋진네요. (폰 광고는 아닙니다. 11초까지 보시면 될듯 합니다.^^;) [embed]https://youtu.be/cMRN6_bY93s[/embed] &nbsp; 안타깝지만 iOS 사용자 중 대부분이 iPhone 6S하위 버전을 사용하는 사용자라고 하네요. 그래도 하위 호환이 가능하니, 걱정 말고 개발하시면 될 것 같습니다. 코드는 번역보다 강하죠? Readme 참고하셔서 멋진 앱만드시길 바랍니다 :) &nbsp; 기타 &nbsp; easychen / howto-make-more-money어떻게 더많은 돈을 벌수 있을까? 프로그래머들의 용돈 벌이 방법쯤으로 해석됩니다. 중국어로 된 프로젝트라 해석하기 역부족이네요 ㅜ.ㅜ Readme한장으로 되어 있는 프로젝트이구요, 좀 더 많은 관심을 받아 번역본이 생기면 그 때 다시 살펴 보는걸로 하겠습니다. sindresorhus / awesome말이 필요없는 깃헙트렌드의 단골 손님이죠? 먼저 지난호 링크 투척! 오랜만에 보니 꾸준히 업데이트 되고 있네요. 올해 초와 비교해 보니 Resources카테고리가 Media로 변경되고, Content Management System 카테고리가 생겼습니다. Front-end진영과 Programming interviews쪽에 새로운 프로젝트의 등장이 눈에 띕니다. &nbsp;","categories":[{"name":"GitHub-trend","slug":"GitHub-trend","permalink":"http://www.devpools.kr/categories/GitHub-trend/"},{"name":"미분류","slug":"GitHub-trend/미분류","permalink":"http://www.devpools.kr/categories/GitHub-trend/미분류/"}],"tags":[]},{"title":"요사이 유행하는 텔레그램봇 저도 한번 만들어봤습니다.","slug":"요사이-유행하는-텔레그램봇-저도-한번-만들어봤습","date":"2016-03-21T00:31:24.000Z","updated":"2017-12-13T09:33:12.560Z","comments":true,"path":"2016/03/21/요사이-유행하는-텔레그램봇-저도-한번-만들어봤습/","link":"","permalink":"http://www.devpools.kr/2016/03/21/요사이-유행하는-텔레그램봇-저도-한번-만들어봤습/","excerpt":"","text":"최근들어 다시금 인기를 얻고 있는 텔레그램의 Bot을 한번 만들어보고자 합니다. Bot?텔레그램에서 제공하는 Bot은 텔레그램 계정 중 사람의 계정이 아닌 것을 말합니다. 쉽게 robot의 bot이라고 이해하셔도 좋을 것같습니다. Bot은 깃헙 같은 다른 서비스와 연결하여 푸시 알림이라던지, 토렌트의 다운로드가 완료되었다는 알림, 또는 가상의 게임, 소셜서비스 등, 사용자와 자동으로 상호작용할 수 있는 그런 서비스를 만들 수 있습니다. Bot 계정은 보통의 텔레그램 계정과는 다른 점이 있습니다. 예를들어 다른 사용자나 그룹에 대화를 먼저 시작할 수 없고, 계정은 반드시 Bot으로 끝나야 합니다. Bot을 만들려면 어딘가에서 사용자의 메시지를 처리할 수 있는 서버가 필요하고, BotFather라는 텔레그램의 Bot을 통해서 나의 Bot계정을 만들 수 있습니다. 더 자세한 내용은 아래 링크에서 확인하세요.텔레그램 Bot 소개 (Bots: An introduction for developers) Bot 만들기.이제 Bot을 만들어볼건데, 텔레그램 bot샘플코드를 이용해서 프로그래밍의 시작인 Hello world를 만들겠습니다.텔레그램 bot 샘플코드 먼저 준비물은 서버 Bot 이름. BotFather에게 말을 걸어야 합니다. BotFather에게 연결하기(모바일로 말을 걸 수도 있지만, 데스크탑 앱을 이용하세요. 키보드가 있으니 더 편합니다.) 말을 걸면 위와 같은 메시지를 보실 수 있습니다. BotFather가 무얼 할 수 있는지 간단한 설명을 보여주고 다음 메시지를 기다리게 됩니다. 이제 Bot계정을 만들어 보겠습니다. 친절하게도 “/“를 입력하면 사용할 수 있는 명령어 들을 보여줍니다. 지금은 새로 만들어야 하니까 “/newBot” 명령을 보내겠습니다. name과 username을 지정하고 몇가지 대화를 거쳐 쉽게 Bot계정을 생성하실 수 있습니다. name은 bot이 표시될 이름이고, username은 ID라고 생각하시면 됩니다. 즉, name의 다른 bot과 중복될 수 있지만, username은 중복될 수 없습니다. Bot계정이 정상적으로 생성되면 API키를 전달받게됩니다. 이 키는 유출되거나, 잃어버리지 않도록 잘 보관하시기 바랍니다. 저는 ruby를 이용해서 만들건데, 다른 언어도 크게 다르지는 않을겁니다. 샘플코드에서 API키를 위에서 발급받은 키를 입력하고,실행시키면 일단은 끝이 납니다. 간단하죠?https://gist.github.com/ikaruce/2ee4088438bb45d25fbd 코드를 간단히 살펴보면 텔레그램 봇 데몬을 생성하고, 메시지 수신을 대기합니다. 그리고 들어오는 메시지에서 /greet라는 명령이 전달되면 Hello ~ 라는 메시지를 보내게 되는거죠. 만약 모르는 명령이 들어오면 나는 메시지를 모른다는 메시지를 보내는 간단한 코드입니다. 실행해서 메시지를 보내보면 아래와 같이 동작을 확인하실 수 있습니다. 그럼 이제 연습삼아 생성했던 Bot은 삭제를 해야죠.‘/deletebot’이라는 명령을 전송하고 나는 이 봇을 삭제합니다. 라고 확인 메시지를 보내면 만들었던 bot 계정은 사라지게 됩니다.","categories":[{"name":"Small talk","slug":"Small-talk","permalink":"http://www.devpools.kr/categories/Small-talk/"},{"name":"미분류","slug":"Small-talk/미분류","permalink":"http://www.devpools.kr/categories/Small-talk/미분류/"}],"tags":[{"name":"telegram","slug":"telegram","permalink":"http://www.devpools.kr/tags/telegram/"},{"name":"텔레그램","slug":"텔레그램","permalink":"http://www.devpools.kr/tags/텔레그램/"}]},{"title":"주간 깃헙 트렌드 2016 년 3월 첫호","slug":"주간-깃헙-트렌드-2016-년-3월-첫호","date":"2016-03-14T10:32:22.000Z","updated":"2018-01-07T06:42:35.334Z","comments":true,"path":"2016/03/14/주간-깃헙-트렌드-2016-년-3월-첫호/","link":"","permalink":"http://www.devpools.kr/2016/03/14/주간-깃헙-트렌드-2016-년-3월-첫호/","excerpt":"","text":"&nbsp; 주간 깃헙트렌드 2016년 3월 첫호입니다. 이번주에 리뷰할 순위에 들어있는 프로젝트에는 AlphaGo 가 올라와 있습니다. ( 구글 딥마인드의 그 알파고는 아닙니다만, 같은 논문을 통해 작성되었다고 하니 관심을 가져봐도 될 것 같습니다. Machine Learning이세돌과 알파고의 대전이 많은 사람들에게 이목을 많이 집중시키고 있는 것 같습니다. 단지 우리나라에만 이 사건이 집중적인 것 같지는 않습니다. 6위 안으로 한정 시켜보면 FreeCodeCamp가 약간 like 버튼을 growth hacking 하면서 커지는 걸 감안해 보면 status page 를 포함한 두가지 말고는 모두 Machine Learning에 대한 프로젝트라고 볼 수 있습니다 @.@. AlphaGo 왠걸 이럴 줄 알았습니다. 이틀만에 AlphaGo를 오픈소스로 만들겠다는 친구가 나왔네요. 물론 제 생각엔 구글 딥마인드에서 오픈 소스로 풀어 버릴 수도 있습니다… 관련 리뷰 : https://techstory.shma.so/alphago-f2b8148c44e neural-doodle 이 gif 하나로 모든게 설명이 될 거 같습니다. 신경망 알고리즘을 이용해서 이미지를 프로세싱 해 주는 시도입니다. 설치는 python3를 통해 실행을 하고 제가 example을 따라 실행한 것은 이런 결과가 나옵니다. 실행은 간단한데 CPU를 통해서 돌릴때는 시간이 너무 오래 걸리는군요.( MBA 2012 기준 ) image-anologies위의 neural doodle 과 너무 비슷한 프로젝트 입니다. 한번 이미지를 통해 보시죠. 트럼프 미 대선후보를 이용한 이미지도 있습니다. 사실은 이게 더 … 직관적입니다. python을 이용해 만들어져 있습니다. 제대로된 GPU 가 없다면 느릴 거라고 이야기 합니다. 근데, 약간 트럼프가 뭐랄까. 까임의 아이콘인 모양이죠? 링크 : https://github.com/awentzonline/image-analogies leaf leaf는 Rust로 만들어진 머신 러닝 플랫폼입니다. 구글의 Tensorflow 보다 빠르다. 리뷰 보기 : https://techstory.shma.so/leaf-f1be6cc386d0 Front-End-Webjavascript 쪽 관련 프로젝트는 7개 정도가 올라와 있는데, 알파고는 파이썬 이라 제외하면 6개 로 압축할 수 있습니다. FreeCodeCamp뭐 이제 FreeCodeCamp를 모르시는 분은 없을 거라고 생각하는데요. 사이트에 들어가서 샘플을 해 본 분들은 아시겠지만 과정중에 github 페이지 좋아요를 누르게 되어 있습니다. github growth hacking의 좋은 예라고 볼 수 있겠습니다. 개발자들 끼리 같이 공부할 수 있는 코드캠프도 전 세계적으로 진행하고 있습니다.한국도 서울에서 진행을 하고 있네요. https://www.facebook.com/groups/free.code.camp.seoul/ 리뷰 보기 : http://tech.shma.so/post/138852047393/github-trendfreecodecamp 이전 리뷰 : https://github.com/TeamSEGO/github-trend-kr/blob/master/021_201508-weekly/021-03-freecodecamp.md #### Google-Play-Music-Desktop-Player-UnOFFICIALGoogle play music을 electron 기반의 데스크탑 애플리케이션으로 개발했네요. 사용성은 매우 훌륭합니다만, 공식 앱이 있는 마당에 어떤 부분이 더 좋은지는 의문(?)입니다. 리뷰 : https://techstory.shma.so/google-play-music-desktop-player-unofficial-fbcbb95909da parse-dashboard 한 번도 다뤄보지는 않았지만, parse 서비스가 종료를 예고 하면서 대체수단들이 많이 생기기 시작했습니다. (2017년 1월 28일까지 서비스) parse server 는 node.js/express.js 기반의 오픈소스 API 서버 입니다. parse-dashboard는 standalone parse app 들의 dashboard 오픈 소스입니다. 링크 : https://github.com/ParsePlatform/parse-dashboard ParsePlatform에서 직접 제공하니, 2017년이 오기 전에 standalone으로 parse 를 서비스 할 사람에게는 좋은 프로젝트입니다. parse server 프로젝트 : https://github.com/ParsePlatform/parse-server HiloHilo는 Alibaba그룹에서 오픈소스 프로젝트로 내 놓은 HTML5용 Game Development 툴입니다. flappy bird, 2048 같은 눈에 익은 게임들도 HTML5컨버팅을 해 놓았네요. 링크 : https://github.com/hiloteam/Hilo React-vis uber 에서 내 놓은 react visulaization 툴입니다. 아직 차트 자체는 일반적이긴 한데, 한번 두고 볼만은 해 보입니다. 링크 : https://github.com/uber-common/react-vis hamburgershamburger UX는 UX쪽에서도 효용성에 대해서 왈가왈부가 많습니다. 하지만 관련 프로젝트는 왈가왈부할 필요가 없겠지요 프로젝트 링크 : https://github.com/jonsuh/hamburgers baloon.css순수 css 만으로 툴팁을 구성했습니다. 링크 : https://github.com/kazzkiq/balloon.css rebass 며칠전 react-how-to 를 링크건 적이 있었는데요. 거기에서는 inline style 은 아주 실험적인(bleeding-edge) 기술이라고 표현했고, React자체와 ES6 같은 것들에 익숙해 지면 도전해 보라고 했습니다. (관련 리뷰 : https://github.com/ehrudxo/react-howto/blob/master/README-ko.md ) 거기서 언급한 인라인 스타일을 쉽게 해 줄 수 있는 프로젝트입니다. 링크 : https://github.com/jxnblk/rebass 리뷰 : https://techstory.shma.so/rebass-7e8baaec1bda &nbsp; 단순한 인라인 스타일 적용을 떠나서 bootstrap 정도의 완성도를 지향하고 있는 것 같은 대단한(?) 프로젝트 입니다. &nbsp;","categories":[{"name":"미분류","slug":"미분류","permalink":"http://www.devpools.kr/categories/미분류/"}],"tags":[]},{"title":"Weekly Hacker New","slug":"weekly-hacker-new","date":"2016-03-14T10:26:33.000Z","updated":"2017-12-10T10:17:12.032Z","comments":true,"path":"2016/03/14/weekly-hacker-new/","link":"","permalink":"http://www.devpools.kr/2016/03/14/weekly-hacker-new/","excerpt":"","text":"이번주 해커 뉴스의 best 10 입니다. 특히 오늘 이세돌과 알파고의 첫 바둑 경기가 있었는데요,끝난지 몇시간이 채 되지 않아 “Huge milestone in AI!”라고 외치는 달랑 사진1장의 트위터의 글이 해커뉴스의 위클리로 올라왔습니다.알고보니 알파고의 기획자 중 한사람인 Mustafa Suleyman의 트위터 글이었습니다. &nbsp; Dsxyliea (geon.github.io)위의 싸이트에 접속해 보셨나요?한 단어 안에서 알파벳이 계속 움직여 읽기 매우 힘듭니다.다행히 움직이지 않는 Readme가 존재합니다.사실은 Dsxyliea가 아니고 Dyslexia, 실독증이라는 뜻입니다.사전을 찾아보면 ‘읽기 언어 상실증’이라고 하네요.실독증인 사람이 글을 보는 시각을 코드로 재현해 놓은 듯 합니다. &nbsp; Announcing SQL Server on Linux (blogs.microsoft.com)마이크로소프트의 대부분의 제품은 윈도우 서버용으로 제작되어 왔습니다.그런데 2016년 올해! 마이크로소프트의 DBMS제품인 SQL-Server의 리눅스용이 출시된다는 소식입니다. Transmission BitTorrent app contained malware (forum.transmissionbt.com)게시글만 보고 잘 이해가 안되 검색해보니, 맥 사용자들에게 섬짓한 기사가 있네요.최근 랜섬웨어가 윈도우, 리눅스에 이어 맥 사용자들도 위협하고 있다는 내용입니다.랜섬웨어 중요 파일들을 암호화해 이를 풀어주는 대신 대가를 요구하는 악성코드를 말합니다.랜섬웨어에 감염된 트랜스미션 프로그램을 삭제하기 위해서는 ‘www.transmissionbt.com’에 접속해트랜스미션 2.92버전을 다운로드 받아 이전 버전을 삭제하고 설치하면 된다고 합니다.참고 : 관련 기사 - 애플 맥 사용자도 랜섬웨어 타깃 &nbsp; How to Pass a Programming Interview (blog.triplebyte.com)프로그래밍 인터뷰를 통과하는 방법을 쓴 글 입니다.어떻게 보면 뻔할수도 있는 내용이네요.아래는 여기서 말하는 키워드 입니다.1) 열정적인 모습을 보여라2) 일반적인 인터뷰의 개념을 공부해라3) 면접관에게 도움을 얻어라4) 장단점에 대해 이야기하라라5) 결과를 강조해라6) C대신, 동적언어를 사용해라7) 연습, 연습, 연습해라8) 자격증을 언급해라인터뷰는 기술이고, 좋은프로그래머가 아니라 준비된 사람을 뽑는다.열정을 가지고 노력해라! 정도로 요약할 수 있을 것 같습니다. &nbsp; CocoaPods downloads max out five GitHub server CPUs (github.com)CocoaPods는 깃헙에 있는 Dependency 관리 라이브러리 입니다.Spec레파지토리를 clone받는데 시간이 오래 걸리는 이슈가 있었던 모양입니다.이 글과 관련하여 mhagger라는 깃헙 인프라팀 사람이 단 댓글이 해커뉴스 순위에 올랐습니다.원인은 하나의 저장소에 극히 높은 수준의 로드가 다른 깃헙사용자들에게 영향을 미칠 수 없도록 하기 위해 서버에 자동 제한을 걸어놓은 것 때문이라고 밝혔습니다.깃헙 관리자의 빠른 사과와 대처가 인상적입니다. &nbsp; Study Finds No Gender Gap in Tech Salaries (insights.dice.com)“기술직에 있어 성별은 더이상 월급에 영향을 주지 않는다.” 라는 제목의 글이 올라왔습니다.제목만 봐서는 기술적 직업에 있어서 이제는 남녀가 평등하다는 내용일 것 같았는데,기사를 들여다 보면 월급은 같으나 보너스는 남성이 더 많이 받고, 복지는 여성이 더 많이 누린다 라는 내용입니다.Dice Salary Survey라는 기관에서 조사한“Top Motivator Employers Provided to Tech Professionals in 2015”의분석 기사입니다. &nbsp; Curl vs. Wget (daniel.haxx.se)명령행에서 컨텐츠를 다운로드를 받을 때 curl 또는 wget을 사용하는데요,둘 사이의 공통점과 차이점은 무엇일까요?번역글이 2011년에 올라온 걸 보면 꽤 오래된 글처럼 보이는데이번주 위클리 해커뉴스 순위권에 올라와 있네요.번역 블로그 첨부합니다.참고 : 번역페이지 &nbsp; FLIF – Free Lossless Image Format (flif.info)FLIF는 압축률에 대해서 PNG, FFV1, 무손실 WebP, 무손실 BPG, 무손실 JPEG2000을 능가하는 새로운 무손실 이미지 포맷이라고 합니다.최고의 압축률, 범용성, 무손실, 디자인 반응성, 무료 소프트웨어 라는 장점이 있다고 합니다.깃헙에서 바로 다운 받을 수 있습니다.참조 : 깃헙페이지 &nbsp; AlphaGo beats the world champion Lee Sedol (twitter.com)사진 한장이 붙어있는 트위터 글이 해커뉴스 상위권에 딱! 등장했네요.기사를 작성하는 오늘, 이세돌과 알파고의 첫 경기가 있었습니다.저는 이세돌 기사님을 응원했지만… 결과는 알파고 승리!바둑은 무작위 계산 보다는 직관과 느낌이 주로 사용되기 떄문에컴퓨터가 마스터하기 힘든 게임이라고 이야기합니다.인공지능의 능력이 이것을 뛰어넘은 것 같아 무섭기도, 앞으로가 기대대기도 합니다. &nbsp; Go by Example (gobyexample.com)go lang 공부하시는 분들이 참고하실만한 사이트입니다.설명보다는 코드기반으로 간단하게 설명되어 있습니다.","categories":[{"name":"미분류","slug":"미분류","permalink":"http://www.devpools.kr/categories/미분류/"}],"tags":[]},{"title":"금주 테크 핫이슈","slug":"금주-테크-핫이슈","date":"2016-03-14T10:08:24.000Z","updated":"2017-12-13T09:27:20.098Z","comments":true,"path":"2016/03/14/금주-테크-핫이슈/","link":"","permalink":"http://www.devpools.kr/2016/03/14/금주-테크-핫이슈/","excerpt":"","text":"금주 해외의 테크 핫이슈를 알아보는 시간입니다. &nbsp; The Terrifying ‘Yelp for People’ App Is Now Available이번에는 사람을 평가하는 앱이 등장하여 떠들석합니다. “Peeple”라는 앱은 일명 “Yelp for People”라는 꼬리를 가지고 지난 3월 7일 앱스토어에 런칭을 했는데, 사람이 사람을 평가한다는 점에서 논란이 커지고 있습니다. CEO인 Julia Cordray는 온라인 평판이나 자산관리 측면에서 새로운 패러다임을 열 것이라고 자신하지만, 앱스토어의 유저리뷰를 보면 많은 부정적인 멘트와 함게 낮은 별점이 쏟아지고 있으며, 주요언론들도 ‘Truly Awful’, ‘Terrifying’ 과 같은 과격한 수식어를 붙여가며 이 앱에 대한 비난을 이어가고 있습니다. 관심이 없어서 부정적인 피드백이 없는 것보다는 낫겠지만(?) “Peeple”의 미래가 그리 밝아보이지만은 않네요. &nbsp; Opera’s browser has a built-in ad blocker that works better than extensions https://www.youtube.com/watch?v=hMUw6aOwnFY 원조브라우저 Opera가 최근 개발자 버전을 통해 Built-in Ad-Blocker를 선보여 화제입니다. Opera의 desktop 총괄을 맡고 있는 Krystian Kolondra는 “광고는 우리들에게 Free internet을 영위할 수 있는 환경을 제공하지만 최근의 광고들은 너무 무겁고, 과도한 트래픽으로 인해 인터넷 속도저하의 주범이 되어버렸다. 우리는 단지 이런 것을 용납하지 못한다”며 Built-in Ad-Blocker의 개발 당위성을 언급했습니다. 위의 영상 처럼 현재 Ad block을 실시간으로 모니터링 할 수 있으며 몇개의 사이트에서 간단한 테스트 결과 40~50%의 웹페이지 속도향상을 확인할 수 있었다고 하네요. 어찌되었던 브라우저 경쟁에서 밀려나 안습의 위치로 떨어진 Opera가 Built-in Ad-Blocker를 통해 다시 날아오를수 있을지 기대되네요. (하지만 크롬이 출동한다면 어떨까) &nbsp; Medium plans publisher monetization within a month, considers paywalls and premium content 순수 블로그형태의 서비스를 제공해온 Medium이 조만간 유저들에게 자신들의 컨텐츠를 활용하여 영리활동을 할 수 있게끔하는 제도를 마련중이라고 밝혔습니다. Medium의 설립자 Evan Williams는 단순한 광고들을 덕지덕지 붙이지 않고 스폰서된 컨텐츠를 이용하여 유저의 이러한 갈증을 해결해 줄 것이라고 자신하였습니다. 기존에 광고도 없고 질 좋은 많은 글들이 Medium을 통해 발간되고 있는데 과연 이러한 결정이 유저와 방문자 모두를 만족시키게 될지 귀추가 주목되네요.","categories":[{"name":"미분류","slug":"미분류","permalink":"http://www.devpools.kr/categories/미분류/"}],"tags":[]},{"title":"[github-trend] 주간 레포트","slug":"github-trend-주간-레포트","date":"2016-03-07T10:25:41.000Z","updated":"2017-12-13T10:25:34.806Z","comments":true,"path":"2016/03/07/github-trend-주간-레포트/","link":"","permalink":"http://www.devpools.kr/2016/03/07/github-trend-주간-레포트/","excerpt":"","text":"FreeCodeCamp/FreeCodeCamp JavaScript 3327리뷰 : http://tech.shma.so/post/138852047393/github-trendfreecodecamp fulldecent/system-bus-radio C 2422리뷰 : https://techstory.shma.so/system-bus-radio-dc74709fa59a storehouse/Advance Swift 1761리뷰 : https://techstory.shma.so/advance-86b4d6840b20 jcjohnson/neural-style Lua 1643 hiloteam/Hilo JavaScript 1575 geeeeeeeeek/electronic-wechat JavaScript 1317 HelloZeroNet/ZeroNet Python 1237 usablica/intro.js JavaScript 1212리뷰 : https://techstory.shma.so/intro-js-34e123f692c4 gaearon/react-makes-you-sad 1169리뷰 : https://techstory.shma.so/react-makes-you-sad-728f7343ca9a hollance/swift-algorithm-club Swift 1102 DreaminginCodeZH/Douya Java 976 mrzool/bash-sensible Shell 938 jonsuh/hamburgers CSS 893 tripit/slate JavaScript 833 programthink/zhao Python 763 xiekw2010/react-native-gitfeed JavaScript 759 dthree/cash JavaScript 794리뷰 : https://techstory.shma.so/cash-cross-platform-linux-without-the-suck-525d7d2b27eb Microsoft/vscode-go TypeScript 748 petehunt/react-howto 729리뷰 : https://techstory.shma.so/react-howto-ebb85c297b78 Fuck-You-GFW/p2pspider JavaScript 666 ReactjsProgram/React-Fundamentals 665 hilen/TSWeChat Swift 639 ReactjsProgram/react-fundamentals-curriculum 589 facebook/draft-js JavaScript 612리뷰 : https://techstory.shma.so/github-trend-draft-js-e84a955a470 facebook/xcbuild C++ 620 &nbsp;","categories":[{"name":"미분류","slug":"미분류","permalink":"http://www.devpools.kr/categories/미분류/"}],"tags":[]}]}