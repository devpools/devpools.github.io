<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>devpools blog</title>
  <icon>https://www.gravatar.com/avatar/2c1577ef71addcca2ce3b050ef61f387</icon>
  <subtitle>개발 바보들의 놀이터</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.devpools.kr/"/>
  <updated>2017-12-13T09:22:32.357Z</updated>
  <id>http://www.devpools.kr/</id>
  
  <author>
    <name>devpools</name>
    <email>ehrudxo@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[2017-11-27] 11월 깃헙 트렌드</title>
    <link href="http://www.devpools.kr/2017/11/27/2017-11-27-11%EC%9B%94-%EA%B9%83%ED%97%99-%ED%8A%B8%EB%A0%8C%EB%93%9C/"/>
    <id>http://www.devpools.kr/2017/11/27/2017-11-27-11월-깃헙-트렌드/</id>
    <published>2017-11-27T03:42:39.000Z</published>
    <updated>2017-12-13T09:22:32.357Z</updated>
    
    <content type="html"><![CDATA[<p>11월 한달간 깃헙에 올라온 프로젝트 중 많은 호응을 얻었던 프로젝트들을 정리해 보았다.<br>여전히 자바스크립트와 딥러닝 쪽 트렌드가 초 강세를 보이고 있다. awesome 시리즈 같은 curation 프로젝트도 여전히 최상위권에 존재하는 중.<br>(curation 프로젝트라 함은 좋은 팁과 사이트들을 집합해 놓을 것을 의미함)</p><p>11월 한달(27일 기준) 가장 핫한 프로젝트 10선</p><ul><li><a href="https://github.com/k88hudson/git-flight-rules" target="_blank" rel="noopener">git-flight-rules</a></li><li><a href="https://github.com/i0natan/nodebestpractices" target="_blank" rel="noopener">nodebestpractices</a></li><li><a href="https://github.com/frappe/charts" target="_blank" rel="noopener">charts</a></li><li><a href="https://github.com/thedaviddias/Front-End-Checklist" target="_blank" rel="noopener">Front-End-Checklist</a></li><li><a href="https://github.com/tensorflow/tensorflow" target="_blank" rel="noopener">tensorflow</a>*   <a href="https://github.com/RedditSota/state-of-the-art-result-for-machine-learning-problems" target="_blank" rel="noopener">state-of-the-art-result-for-machine-learning-problems</a></li><li><a href="https://github.com/sindresorhus/awesome" target="_blank" rel="noopener">awesome</a></li><li><a href="https://github.com/ant-design/ant-design-pro" target="_blank" rel="noopener">ant-design-pro</a></li><li><a href="https://github.com/moment/luxon" target="_blank" rel="noopener">luxon</a>*   <a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">vue</a></li></ul><h2 id="git-flight-rules"><a href="#git-flight-rules" class="headerlink" title="git-flight-rules"></a><a href="http://keen.devpools.kr/2017/11/27/2017-11-27-11%EC%9B%94-%EA%B9%83%ED%97%99-%ED%8A%B8%EB%A0%8C%EB%93%9C/#git-flight-rules" title="git-flight-rules" target="_blank" rel="noopener"></a>git-flight-rules</h2><p>링크 : <a href="https://github.com/k88hudson/git-flight-rules" target="_blank" rel="noopener">git-flight-rules</a></p><p>이 프로젝트는 작명도 훌륭하지만 더 훌륭한 것은 내용이다.<br>예를 들어서 “특정한 리비전으로 파일을 리버트 하고 싶을때에는 어떻게 하지?” 라는 질문 형태의 목록들을 가지고 있다.<br>(우리가 궁금해 하는 바로 그것! 느낌!)<br>예를 들어 질문 목록을 확인해 보면 아래 그림과 같다.</p><p><img src="http://keen.devpools.kr/images/2017112701.png" alt="질문 목록"></p><p>해석해 보면</p><ul><li>방금 내가 한 커밋은 뭐였지?<em>   커밋 메세지를 잘못 입력했을 때</em>   커밋할 때 이메일과 이름을 잘못 썼다.*   커밋에서 파일 하나를 제외하고 싶을 때</li></ul><p>등등으로 실제로 필요한 일상의 개발 노하우가 잘 나타나 있다<br>물론 한글이 아니라 좀 답답하기는 한데 누군가가 한글로 금방 번역해서 올려 줄 것으로 예상된다.</p><h2 id="Node-js-Best-Practices"><a href="#Node-js-Best-Practices" class="headerlink" title="Node.js Best Practices"></a><a href="http://keen.devpools.kr/2017/11/27/2017-11-27-11%EC%9B%94-%EA%B9%83%ED%97%99-%ED%8A%B8%EB%A0%8C%EB%93%9C/#Node-js-Best-Practices" title="Node.js Best Practices" target="_blank" rel="noopener"></a>Node.js Best Practices</h2><p>최근 팀에서 코드리뷰를 하다가 자바스크립트에서 세미콜론(;)을 붙이는것을 표준으로 할 것인지 아니면 붙이지 않는 것을 표준으로 할 것인지에 대한 논쟁이 일어났다.<br>당연히 최근에 나온것이 세미콜론이 없어도 해석할 수 있다이므로 없애는 것에 한표를 던졌는데, 지지를 철회해야 할 지도 모르겠다.</p><p>링크 : <a href="https://github.com/trending?since=monthly" target="_blank" rel="noopener">Node.js Best Practice</a></p><p><img src="http://keen.devpools.kr/images/2017112702.png" alt="Node.js Best Practices"></p><p>이 프로젝트는 Node.js 의 BP들을 잘 모아둔 curation 사이트다.<br>많은 사람들이 Node.js에서 신경써야할 아키텍처와 패턴을 잘 몰라하는데 이 프로젝트는 꽤나 많은 해답을 줄 수 있을 것으로 보인다.</p><p>예를 들어 1.3의 “공용(common) 으로 사용하는 자바스크립트는 npm package로 만들어라” 부분 같은 것은 Node 패키지의 기본 컨셉을 담고 있고 2.1의 “에러 핸들링은 Async와 Await을 사용해라” 같은 부분도 최근 코드리뷰를 하면서 팀원들 끼리 옥신 각신 했던 부분인데 왜 그렇게 해야하는지도 잘 설명하고 있는것이 포인트.<br> (콜백 에러 핸들링이 콜백지옥으로 빠지는 것을 Async와 Await을 사용하면 잘 해결 되는 것을 이야기 하고 있음.)</p><h2 id="프라페-charts"><a href="#프라페-charts" class="headerlink" title="프라페 charts"></a><a href="http://keen.devpools.kr/2017/11/27/2017-11-27-11%EC%9B%94-%EA%B9%83%ED%97%99-%ED%8A%B8%EB%A0%8C%EB%93%9C/#%ED%94%84%EB%9D%BC%ED%8E%98-charts" title="프라페 charts" target="_blank" rel="noopener"></a>프라페 charts</h2><p>chartJS 가 아님. 다른 프로젝트에 디펜던시가 없는 간단한 차트 프로젝트.<br>프로젝트를 찬찬히 들여다 보면 깃헙의 히트맵과 프로그레스 바를 만들어 둔 것이 인상적이다. 관련 블로그에도 해당 내용이 적혀 있을 정도.</p><p>프로젝트 링크 : <a href="https://github.com/frappe/charts" target="_blank" rel="noopener">charts 깃헙</a><br>블로그 링크 : <a href="https://medium.com/@pratu16x7/so-we-decided-to-create-our-own-charts-a95cb5032c97" target="_blank" rel="noopener">so we decided to create our own charts</a></p><p><img src="https://github.com/frappe/charts/raw/master/.github/example.gif" alt="chart example"></p><p>블로그를 읽다가 보면 c3.js를 사용하다가 스타을 새로 준다던지, 새로운 고객들의 요구에 응하려다가 자체적으로 개발하기로 한 과정들이 나와 있고 DOM을 조작하는데 SnapSVG 나 jquery 없이 만들기 위해 어떤 고려들을 했는지, CSS3 대신에 고려할 것드을 어떻게 확인했는지 등의 이야기가 재미있게 기술되어 있다.<br>( 블로그가 훨씬 흥미로운 내용이 많은 듯 .)</p><p>jquery를 바닐라도 대체할 때 참조할 수 있는 <a href="http://youmightnotneedjquery.com/" target="_blank" rel="noopener">You might not need jQuery</a><br>라는 사이트도 참조할 만하다. ( 하지만 사이트를 보다보면 jquery 없이 어떻게 개발하지? 라는 생각이 들지도…)</p><h2 id="luxon"><a href="#luxon" class="headerlink" title="luxon"></a><a href="http://keen.devpools.kr/2017/11/27/2017-11-27-11%EC%9B%94-%EA%B9%83%ED%97%99-%ED%8A%B8%EB%A0%8C%EB%93%9C/#luxon" title="luxon" target="_blank" rel="noopener"></a>luxon</h2><p>타임스탬프 혹은 Date 라이브러리는 언제나 어렵다. 특히 MSA 같은 이기종간의 데이터를 주고 받는 요즘에 점점 중요해 지지만 매번 어렵기는 마찬가지.<br>이 문제를 해결하기 위한 가장 스마트한 방법은 그동안 모멘트 프로젝트 였는데, 오픈 소스 내부 컨트리뷰터 중에서 모멘트의 구조를 바꾸려고 하다가 프로젝트를 새로 만들었는데 사람들의 주목을 많이 받았습니다.</p><p>링크1: <a href="https://github.com/moment/moment" target="_blank" rel="noopener">모멘트 프로젝트</a></p><p>링크2: <a href="https://github.com/moment/luxon" target="_blank" rel="noopener">luxon 프로젝트</a></p><p><img src="http://keen.devpools.kr/images/2017112703.png" alt="luxon"></p><p>몇가지 눈에 띄는 다른 점을 코드를 통해 살펴보자.</p><p>가장 눈에 띄는 변화는 immutable 의 적용이다.<br>(immutable 이란 객체의 값이 변경되지 않는 것을 의미 하는 것으로 map 같은 객체가 변경이 되는 코드가 들어가면 리턴 값으로 새로운 객체를 반환해 주는 특징을 가지고 있다.)<br><a href="https://facebook.github.io/immutable-js/" target="_blank" rel="noopener">immutable.js</a> 가 가장 대표적인 라이브러리이다.</p><p>일단 모멘트의 코드부터 살펴보자</p><figure class="highlight javascript"><br><br><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> m1 = moment();</div><div class="line"><span class="keyword">var</span> m2 = m1.add(<span class="number">1</span>, <span class="string">‘hours’</span>);</div><div class="line">m1.valueOf() === m2.valueOf(); <span class="comment">//=&gt; true</span></div></pre></td></tr></table><br><br></figure><p>1시간을 더 했지만 m1 과 m2의 값이 같다니.<br>immutable 을 적용한 luxon의 코드는 다음과 같다. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var d1 = DateTime.local();</div><div class="line">var d2 = d1.plus(&#123; hours: 1 &#125;);</div><div class="line">d1.valueOf() === d2.valueOf(); //=&gt; false</div></pre></td></tr></table><p></p></figure><br>d2의 값이 변경되었다. 이렇게 함으로 의도적으로 다른 값을 할당하기 위한 객체의 deep copy를 수행할 필요가 없어진다.<p></p><p>그 외의 주요 변화는 다음과 같다.</p><ol><li>월(Month)의 인덱스가 1부터 시작을 한다.(Moment 와 네이티브 자바스크립트 Date 는 0부터)</li><li>로칼라이제이션과 타임존이 네이티브 API로 변경된다. (그 전에는 라이브러리에 포함되어 있었음.)</li><li>Duration과 Interval 타입을 전부 가진다.</li></ol><p>참고 : <a href="https://moment.github.io/luxon/docs/manual/faq/moment.html" target="_blank" rel="noopener">모멘트 개발자가 알아둬야할 부분.</a></p><h2 id="맺으며"><a href="#맺으며" class="headerlink" title="맺으며"></a><a href="http://keen.devpools.kr/2017/11/27/2017-11-27-11%EC%9B%94-%EA%B9%83%ED%97%99-%ED%8A%B8%EB%A0%8C%EB%93%9C/#%EB%A7%BA%EC%9C%BC%EB%A9%B0" title="맺으며" target="_blank" rel="noopener"></a>맺으며</h2><p>이번에 커버 되지는 않았지만 딥러닝쪽  tensorflow 와 state of art 시리즈를 볼 때 지속적으로 딥러닝 프레임워크 쪽은 들여다 볼 필요가 있을 것으로 생각이 들고 여전히 프론트 엔드쪽은 강세인데 vue.js 가 깃헙 프로젝트의 순위도 점점 평정해 가는 느낌이 강하다. 추세선으로는 react 를 조만간 뛰어넘을 기세로 보인다. 그리고 현장에서는 이미 vue가 통일을 하는 분위기로 보인다. 아직은 중요한 프로젝트들은  react로 의사 결정이 나지만 내년 하반기에는 바뀌지 않을까?</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;11월 한달간 깃헙에 올라온 프로젝트 중 많은 호응을 얻었던 프로젝트들을 정리해 보았다.&lt;br&gt;여전히 자바스크립트와 딥러닝 쪽 트렌드가 초 강세를 보이고 있다. awesome 시리즈 같은 curation 프로젝트도 여전히 최상위권에 존재하는 중.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[tip] -도커로 깃랩을 설치했을때 젠킨스 연결은 어떻게 할 것인가</title>
    <link href="http://www.devpools.kr/2017/09/14/tip-%EB%8F%84%EC%BB%A4%EB%A1%9C-%EA%B9%83%EB%9E%A9%EC%9D%84-%EC%84%A4%EC%B9%98%ED%96%88%EC%9D%84%EB%95%8C-%EC%A0%A0%ED%82%A8%EC%8A%A4-%EC%97%B0%EA%B2%B0%EC%9D%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%A0-%EA%B2%83%EC%9D%B8%EA%B0%80/"/>
    <id>http://www.devpools.kr/2017/09/14/tip-도커로-깃랩을-설치했을때-젠킨스-연결은-어떻게-할-것인가/</id>
    <published>2017-09-14T04:31:23.000Z</published>
    <updated>2017-12-13T10:33:37.045Z</updated>
    
    <content type="html"><![CDATA[<p>깃랩같은 좋은 툴은 언제나 파워풀하지만, 설치가 쉽지않다. 그래서 깃랩을 설정하기가 어려운 부분은 도커가 최근에는 대신하고 있다.<br>그런데, 도커로 설치를 하다보면 CI, CD 환경을 꾸미는 것은 어떻게 해야할지 감이 오지 않을 때가 많다.</p><p>도커로 깃랩을 설치하는 것과 관련된 글은 검색을 하면 수십개가 나오고, 젠킨스와 깃랩을 연동하는 부분도 굉장히 많이 나오지만 도커로 설치된 깃랩과 젠킨스 연동을 위한 중요한 링크가 빠져 있다.</p><p>중요한 두가지 설정 포인트가 필요하다.</p><ol><li>ssh 포트 변경된 경우 git 연결<br>~/.ssh/config 파일을 만든다.<br>ServerName, UserName, Port 은 프로젝트에 맞춰 준다.<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Host &#123;ServerName&#125;</div><div class="line">        User &#123;UserName&#125;</div><div class="line">        Port &#123;Port&#125;</div></pre></td></tr></table></figure></li></ol><p>이후 git 명령어로 프로젝트를 잘 가져오는지 확인하자.</p><figure class="highlight bash"><br><br><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$git</span> <span class="built_in">clone</span> ssh://git@server:[port]/url </div><div class="line">`</div></pre></td></tr></table><br><br></figure><ol><li>git 연결 주소 설정<br>참고로, 퍼블릭키와 프라이빗 키는 이미 잘 설정되어 있을 거라는 전제하에 얘기한다.</li></ol><p>링크 : <a href="http://egloos.zum.com/mcchae/v/11246199" target="_blank" rel="noopener">gitlab과 Jenkins연동</a></p><p>위 링크에 대해서 URL을 설정하는 부분만 아래와 같이 바꾸면 잘 해결되는 것을 확인할 수 있다.</p><p><img src="http://keen.devpools.kr/images/sourcecodemgmt.png" alt="링크 주소 설정"></p><p>이렇게 되고 나면 깃에 자유자재로 업데이트하고 긁어올 수 있음을 알 수 있다. 나머지 CI, CD 옵션은 원하는데로 구성하면 된다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;깃랩같은 좋은 툴은 언제나 파워풀하지만, 설치가 쉽지않다. 그래서 깃랩을 설정하기가 어려운 부분은 도커가 최근에는 대신하고 있다.&lt;br&gt;그런데, 도커로 설치를 하다보면 CI, CD 환경을 꾸미는 것은 어떻게 해야할지 감이 오지 않을 때가 많다.&lt;
      
    
    </summary>
    
      <category term="tip, docker, devops, git" scheme="http://www.devpools.kr/categories/tip-docker-devops-git/"/>
    
    
  </entry>
  
  <entry>
    <title>[github]Node.js 기반 헤드리스 브라우저 컨트롤 API - puppeteer</title>
    <link href="http://www.devpools.kr/2017/09/14/githubnode-js-%EA%B8%B0%EB%B0%98-%ED%97%A4%EB%93%9C%EB%A6%AC%EC%8A%A4-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%BB%A8%ED%8A%B8%EB%A1%A4-api-puppeteer/"/>
    <id>http://www.devpools.kr/2017/09/14/githubnode-js-기반-헤드리스-브라우저-컨트롤-api-puppeteer/</id>
    <published>2017-09-14T04:09:55.000Z</published>
    <updated>2017-12-13T10:30:31.014Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://keen.devpools.kr/images/puppeteer.jpg" alt="puppeteer"><br>프로젝트 링크 : <a href="https://github.com/GoogleChrome/puppeteer/" target="_blank" rel="noopener">https://github.com/GoogleChrome/puppeteer/</a><br>첫번째 프로젝트는 구글 크롬 프로젝트에서 Headless Chrome Node API 로 내 놓은 퍼펫티어다. 퍼펫이라고 하면 번역하면 인형술사이고 꼭두각시 인형을 다루는 사람을 이야기 한다. 이 프로젝트의 배경부터 이야기 하자면 올해(2017년) 4월 경 구글프로젝트에서는 크롬에 Headless 모드를 추가했다.<br>Headless 브라우저라고 하면 일반적으로 CLI환경에서 브라우저가 시각적으로 보여지지 않고 백그라운드에서 작동할 수 있는 것을 이야기 하는데, 이 전까지 가장 유명한 것은 PhantomJS라는 프로젝트였다. 크롤링을 하고 스크린 샷을 찍어서 다운로드하고 등의 일들을 할 수 있었다. 그래서 데스크탑이 아닌 서버에서 DOM을 읽어야 하는 경우 등에서 많이 사용되고는 했었다.</p><p>필자의 경우는 테스트 환경을 꾸밀 수 있지 않을까 하는 기대에 관련된 작업들을 진행해 보았고 관련되어 링크를 남기기도 했다.<br>링크 : 헤드리스 크롬과 selenium2의 조합을 사용해 보자 with node (<a href="http://keen.devpools.kr/2017/06/07/about-test/" target="_blank" rel="noopener">http://keen.devpools.kr/2017/06/07/about-test/</a> )</p><p>그런데, 8월 한달 가장 주목받은 프로젝트가 된 이 puppeteer는 Node.js에서 헤드리스 크롬을 사용할 수 있는 API들을 제공하는 것이다. Headless 모드를 발표하자마자 Phantom.JS는 더 이상 개발 안하기로 선언을 한 것과 마찬가지로 Node.js 진영에 새로운 무기가 생겨버린 셈이 되었다</p><h2 id="1-설치를-해보자"><a href="#1-설치를-해보자" class="headerlink" title="1. 설치를 해보자"></a><a href="http://keen.devpools.kr/2017/09/14/puppeteer/#1-%EC%84%A4%EC%B9%98%EB%A5%BC-%ED%95%B4%EB%B3%B4%EC%9E%90" title="1\. 설치를 해보자" target="_blank" rel="noopener"></a>1. 설치를 해보자</h2><p>먼저 프로젝트를 한번 만들어 보자.</p><figure class="highlight bash"><br><br><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$mkdir</span> puppeteer-project &amp;&amp; <span class="built_in">cd</span> puppeteer-project</div><div class="line"><span class="variable">$yarn</span> add puppeteer</div></pre></td></tr></table><br><br></figure><p>이렇게 설치를 하고 나면 프로젝트에 index.js 파일을 만든다..</p><p>&lt;코드&gt;index.js</p><figure class="highlight javascript"><br><br><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">‘puppeteer’</span>);</div><div class="line"></div><div class="line">(<span class="keyword">async</span> () =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch();</div><div class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</div><div class="line">  <span class="keyword">await</span> page.goto(<span class="string">‘<a href="http://devpools.kr" target="_blank" rel="noopener">http://devpools.kr</a>‘</span>);</div><div class="line">  <span class="keyword">await</span> page.screenshot(&#123;<span class="attr">path</span>: <span class="string">‘devpools.png’</span>&#125;);</div><div class="line"></div><div class="line">  browser.close();</div><div class="line">&#125;)();</div></pre></td></tr></table><br><br></figure><p>스크린샷을 가져 오는 코드가 작성되었다.  개발바보들 첫 페이지의 스크린 샷을 가져오는 소스 코드를 작성한 이후에 node index.js 명령어를 입력하면 다음과 같은 이미지를 가지고 오는 것을 볼 수 있다.</p><p>기본적으로 지정된 이미지 크기는 800*600으로 지정된 듯 하다. 보통 phantomJS 같은 경우는 스크롤을 다 잡아 가던 초반 모습에 비해 메모리 관리를 위한 것인지 이미지 해상도도 그렇게 좋은 거 같지는 않아 보인다.</p><p>PDF로 Export 하는 기능도 API를 통해 구현이 가능하다.</p><p><img src="http://keen.devpools.kr/images/crawled_devpools.jpg" alt="개발바보들 스크린샷"></p><h2 id="2-크롤링을-해-보자"><a href="#2-크롤링을-해-보자" class="headerlink" title="2. 크롤링을 해 보자."></a><a href="http://keen.devpools.kr/2017/09/14/puppeteer/#2-%ED%81%AC%EB%A1%A4%EB%A7%81%EC%9D%84-%ED%95%B4-%EB%B3%B4%EC%9E%90" title="2\. 크롤링을 해 보자." target="_blank" rel="noopener"></a>2. 크롤링을 해 보자.</h2><p>이번엔 find.js 라는 파일을 아래와 같이 만들어 본다. 실제로 이미지와 지금 아래 크롤링 소스는 해당 프로젝트와 내용이 거의 유사하다. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">‘use strict’</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">‘puppeteer’</span>);</div><div class="line"></div><div class="line">(<span class="keyword">async</span>() =&gt; &#123;</div><div class="line"><span class="comment">//브라우저 객체와 페이지 객체를 만들고</span></div><div class="line"><span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch();</div><div class="line"><span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</div><div class="line"></div><div class="line"><span class="comment">// 구글 검색창 방문</span></div><div class="line"><span class="keyword">await</span> page.goto(<span class="string">‘<a href="https://google.com" target="_blank" rel="noopener">https://google.com</a>‘</span>, &#123;<span class="attr">waitUntil</span>: <span class="string">‘networkidle’</span>&#125;);</div><div class="line"><span class="comment">//개발 바보들에 대한 검색어를 입력하고</span></div><div class="line"><span class="keyword">await</span> page.type(<span class="string">‘devpools’</span>);</div><div class="line"><span class="comment">// 검색버튼을 누르고</span></div><div class="line"><span class="keyword">await</span> page.click(<span class="string">‘input[type=”submit”]’</span>);</div><div class="line"><span class="comment">//검색한 결과의 타이틀을 가져와서</span></div><div class="line"><span class="comment">// Wait for the results to show up</span></div><div class="line"><span class="keyword">await</span> page.waitForSelector(<span class="string">‘h3 a’</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> links = <span class="keyword">await</span> page.evaluate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> anchors = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(<span class="string">‘h3 a’</span>));</div><div class="line">  <span class="keyword">return</span> anchors.map(<span class="function"><span class="params">anchor</span> =&gt;</span> anchor.textContent);</div><div class="line">&#125;);</div><div class="line"><span class="comment">//콘솔에 출력한다.</span></div><div class="line"><span class="built_in">console</span>.log(links.join(<span class="string">‘\n’</span>));</div><div class="line">browser.close();</div><div class="line">&#125;)();</div></pre></td></tr></table><p></p></figure><br>소스 코드에 대한 설명은 주석에 달아 둔데로 브라우저 객체와 페이지 객체를 만들고 구글 검색창을 방문해서 개발 바보들에 대한 검색어를 입력하고 검색버튼을 누른 뒤 검색된 결과의 타이틀을 가져와서 콘솔에 출력한다.<p></p><p>그 결과는 다음과 같다. 이 과정 중에 어떤 브라우저의 인터렉션도 필요 없었고 (내부적으로는 크롬 헤드리스 브라우저가 작동을 했지만) 사용자의 경우는 결과만 가져올 수 있다.</p><p><img src="http://keen.devpools.kr/images/searchresults.jpg" alt="devpools 검색결과"></p><h2 id="맺음말"><a href="#맺음말" class="headerlink" title="맺음말"></a><a href="http://keen.devpools.kr/2017/09/14/puppeteer/#%EB%A7%BA%EC%9D%8C%EB%A7%90" title="맺음말" target="_blank" rel="noopener"></a>맺음말</h2><p>왜 구글은 이런 제품을 내놓고 있는 걸까? 워낙 혁신적인 기업이라 속내를 다 살펴볼 수는 없지만 지속적으로 API를 내놓고 있는 것은 웹의 많은 부분이 자동화로 돌아설 것이고 그 중심에 인공지능이 있지 않을까 하는 생각이 들어 잠시 한번 고민을 해 보았다. 아마도 텐서플로가 조만간 DOM 기반의 러닝 모델을 공개하는 날이 오지 않을까?</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://keen.devpools.kr/images/puppeteer.jpg&quot; alt=&quot;puppeteer&quot;&gt;&lt;br&gt;프로젝트 링크 : &lt;a href=&quot;https://github.com/GoogleChrome/puppeteer/
      
    
    </summary>
    
      <category term="github-trend, github" scheme="http://www.devpools.kr/categories/github-trend-github/"/>
    
    
  </entry>
  
  <entry>
    <title>딥러닝 무식하게 정리해 보기 01</title>
    <link href="http://www.devpools.kr/2017/09/08/deeplearning-basic01/"/>
    <id>http://www.devpools.kr/2017/09/08/deeplearning-basic01/</id>
    <published>2017-09-08T02:44:06.000Z</published>
    <updated>2017-12-13T09:32:36.914Z</updated>
    
    <content type="html"><![CDATA[<p>딥러닝, 인공지능 이야기를 하면 CNN, RNN 같은 알고리즘에 관한 글만 굉장히 많아서 조금 탑뷰에서 바라볼 수 있는 관점에서 전체 기술과 활용처를 분류하고 딥러닝 프레임워크에 대해서 알아 보았다. 딥러닝 프레임워크는 같이 프로젝트를 하고 있는 팀 로자미아 가 같이 정리를 해 주었다. Mabel, Jin, Alex 에게 감사를 드린다.</p><h2 id="AI-기술의-응용-분야"><a href="#AI-기술의-응용-분야" class="headerlink" title="AI 기술의 응용 분야"></a><a href="http://keen.devpools.kr/2017/09/08/deeplearning-basic01/#AI-%EA%B8%B0%EC%88%A0%EC%9D%98-%EC%9D%91%EC%9A%A9-%EB%B6%84%EC%95%BC" title="AI 기술의 응용 분야" target="_blank" rel="noopener"></a>AI 기술의 응용 분야</h2><p>딥러닝은 여러가지 알고리즘을 가지고 있지만 결국 하고자 하는 대부분의 일들이 군집(clustering)과 분류(classification) 라는 관점으로 귀결된다.<br>그에 따라 AI 기술 스택을 분류하는 방법은 여러가지가 있고 활용되는 분야도 다양하지만 아래와 같이 분류를 해보았다.<br>먼저 챗봇과 번역등에 사용되는 NLU등을 사용하는 Conversational AI.<br>두번째는 개와 고양이 구분하기 등에 많이 사용되는 Visual AI 분야.<br>마지막으로는 전통적으로 진행하던 데이타 분석을 하는 Analytic AI.</p><h3 id="Conversational-AI"><a href="#Conversational-AI" class="headerlink" title="Conversational AI"></a><a href="http://keen.devpools.kr/2017/09/08/deeplearning-basic01/#Conversational-AI" title="Conversational AI" target="_blank" rel="noopener"></a>Conversational AI</h3><p><img src="http://keen.devpools.kr/images/playmobil-451203_640.jpg" alt="conversation goes on"></p><p>Conversational AI 에는 기본적으로 NLU(Naturla Language Understanding)을 그 근간으로 한다. 오픈 소스중에선 Rasa.ai 같은 프레임워크가 존재하고 오픈 서비스로는 wit.ai 와 api.ai 가 있고 제품으로 유명한 것은 IBM의 conversational 엔진이 유명하다. 일반적인 개발자들이 가장 많이 만나는 것은 페이스북을 가지고 챗봇을 한번 만들어보다가 만나게 되는 것이 NLU 와의 처음 만남이 된다고 볼 수 있다. 이 NLU 엔진은 여러가지 기능을 가지는데 기본적으로 전체의 맥락을 판단하고 키워드를 뽑아내는 게 으뜸된 기능인데 이것을 인텐트와 엔터티라는 업계 용어로 지칭한다.<br>맥락 혹은 화행에는 기본적으로 의도가 들어가 있고 감정이 들어가 있어서 이런 감성을 파악해 내는 데 word2vec doc2vec 같은 툴들이 사용된다. 한글의 경우는 영어와 다른 구조를 가지고 있기 때문에 형태소를 분석해야 하고 mecab-ko 나 은전한잎 같은 툴들이 이용된다.</p><p>여기까지는 일반적인 NLU에 대한 이야기만 한 것이고, 챗봇을 위해서는 다이알로그의 룰이 존재하기 마련이라 룰 매니저 혹은 다이알로그 매니저들이 존재한다. 얘룰 들면 페이스북 챗봇을 만들 때 이런 말이 들어오면 이렇게 대답해야지.. 라고 만드는 대화 구성이 그런 역할을 하는 것이다. 이런 다이알로그 개념이 들어가면 한 문장의 문맥이 아닌 전체 문맥을 파악해야하는 기능과 랭킹 시스템을 구축해야 한다.</p><p>조금 더 나아가면 보통 STT(Speech To Text), TTS(Text To Speech) 로 알고 있는 음성자동 시스템이랑 연결해서 사용자의 음성을 듣고 텍스트로 변환해 준 뒤에 그것을 구축해 놓은 챗봇 시스템과 연결해 구축하는 작업들이 생겨나고 있다.</p><h3 id="AI-for-media"><a href="#AI-for-media" class="headerlink" title="AI for media"></a><a href="http://keen.devpools.kr/2017/09/08/deeplearning-basic01/#AI-for-media" title="AI for media" target="_blank" rel="noopener"></a>AI for media</h3><p><img src="http://keen.devpools.kr/images/abstract-1233873_640.jpg" alt="AI for media"></p><p>얼굴 인식, 피플 카운팅 등에 사용되는 Face Recognition 과 딥러닝 기반의 Object Recognition 은 미디어들을 통해 사람을 인식하거나 장면등을 파악해서 시스템과 연결하는 일들을 할 때 많이 사용된다. 딥러닝 기반 객체 인식은 보통 CNN 알고리즘으로 유명한데 최근에는 여러가지 알고리즘이 더 들어간 경우가 많고 YOLO Darknet 같은 경우는 인식률과 속도에서 다른 범용 툴을 압도한다.<br>피플 카운팅을 응용하면 히트맵 히트존 등의 기술등으로 확장이 가능하다.<br>OCR 프로그램은 기존에도 존재했던 것들인 많은데, 딥러닝 기반으로 프로젝트들이 변경되고 있다. 구글 tesseract 도 LSTM 알고리즘의 4.0 버전을 테스트 중이다.</p><h3 id="Analytics"><a href="#Analytics" class="headerlink" title="Analytics"></a><a href="http://keen.devpools.kr/2017/09/08/deeplearning-basic01/#Analytics" title="Analytics" target="_blank" rel="noopener"></a>Analytics</h3><p>기존의 데이터들을 분석하는 툴 기반이라 딥러닝 보다는 기존 스파크와 하둡 기반의 빅데이터 툴들이 더 많은 일들을 해 주는 부분들이다.</p><h2 id="AI-기반-기술-스택-별로-알아보자-1"><a href="#AI-기반-기술-스택-별로-알아보자-1" class="headerlink" title="AI 기반 기술 스택 별로 알아보자 (1)"></a><a href="http://keen.devpools.kr/2017/09/08/deeplearning-basic01/#AI-%EA%B8%B0%EB%B0%98-%EA%B8%B0%EC%88%A0-%EC%8A%A4%ED%83%9D-%EB%B3%84%EB%A1%9C-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90-1" title="AI 기반 기술 스택 별로 알아보자 (1)" target="_blank" rel="noopener"></a>AI 기반 기술 스택 별로 알아보자 (1)</h2><h3 id="인공지능을-위한-프로세서의-발전"><a href="#인공지능을-위한-프로세서의-발전" class="headerlink" title="인공지능을 위한 프로세서의 발전"></a><a href="http://keen.devpools.kr/2017/09/08/deeplearning-basic01/#%EC%9D%B8%EA%B3%B5%EC%A7%80%EB%8A%A5%EC%9D%84-%EC%9C%84%ED%95%9C-%ED%94%84%EB%A1%9C%EC%84%B8%EC%84%9C%EC%9D%98-%EB%B0%9C%EC%A0%84" title="인공지능을 위한 프로세서의 발전" target="_blank" rel="noopener"></a>인공지능을 위한 프로세서의 발전</h3><p><img src="http://keen.devpools.kr/images/nvidia-1201077_640.jpg" alt="템빨은 언제나 진리"></p><p>딥러닝은 기본적으로 다층 레이어의 많은 학습을 요구하기 때문에 단순한 계산이 순식간에 많이 일어나는 것을 특징으로 한다. 그렇기에 병렬처리 컴퓨팅이 가장 중요한 핵심기능이 되어서 기존 CPU이외의 다른 대안들이 필요하다.<br>그런 의미에서 프로세서 유니트(코어) 각각의 성능은 떨어지지만 프로세서 유니트 수가 압도적으로 많은 GPU 가 각광을 받았다. 특히 엔비디아 CUDA (병렬컴퓨팅 플랫폼의 API모델) 의 등장은 프로세서 경쟁에 불을 붙였다.<br>참조 : <a href="http://www.epnc.co.kr/news/articleView.html?idxno=75603" target="_blank" rel="noopener">http://www.epnc.co.kr/news/articleView.html?idxno=75603</a></p><h4 id="GPGPU-General-Purpose-GPU"><a href="#GPGPU-General-Purpose-GPU" class="headerlink" title="GPGPU - General Purpose GPU"></a><a href="http://keen.devpools.kr/2017/09/08/deeplearning-basic01/#GPGPU-General-Purpose-GPU" title="GPGPU - General Purpose GPU" target="_blank" rel="noopener"></a>GPGPU - General Purpose GPU</h4><p>범용 GPU를 이야기 하는 것으로 AI 용으로만 사용될 때는 TPU라는 이름을 쓰기도 한다.(Tensor Processing Unit) NVIDIA의 GPGPU를 극대화 하기 위한 CUDA 기술을 공개했고 동시에 범용 GPU 기능이 주목 받기 시작했다</p><h4 id="GPGPU를-넘어서"><a href="#GPGPU를-넘어서" class="headerlink" title="GPGPU를 넘어서"></a><a href="http://keen.devpools.kr/2017/09/08/deeplearning-basic01/#GPGPU%EB%A5%BC-%EB%84%98%EC%96%B4%EC%84%9C" title="GPGPU를 넘어서" target="_blank" rel="noopener"></a>GPGPU를 넘어서</h4><p>구글의 딥러닝의 학습속도를 향상시키기 위해 자체 디자인한 반도체 칩셋(ASIC)를 적용되면서 더 각광 받기 시작함. 구글의 ASIC를 TPU(Tensor Processing Unit) 이라 부르고 GPGPU의 범주에 놓기도 한다.<br>MS는 같은 목적으로 FPGA 칩을 클라우드 데이타 센터에 탑재해 Azure 서비스에도 이용하고 있는데, FPGA는 저전력의 강점도 가지고 있다.</p><h4 id="Neuromorphic-Processor"><a href="#Neuromorphic-Processor" class="headerlink" title="Neuromorphic Processor"></a><a href="http://keen.devpools.kr/2017/09/08/deeplearning-basic01/#Neuromorphic-Processor" title="Neuromorphic Processor" target="_blank" rel="noopener"></a>Neuromorphic Processor</h4><p>신경구조와 유사한 프로세서가 차후 프로세서로 각광을 받고 있고 IBM 같은 회사들이 준비하고 있다.<br>링크 : <a href="http://www.research.ibm.com/cognitive-computing/neurosynaptic-chips.shtml#fbid=rXQq5aX-WkP" target="_blank" rel="noopener">http://www.research.ibm.com/cognitive-computing/neurosynaptic-chips.shtml#fbid=rXQq5aX-WkP</a></p><h3 id="딥러닝-서비스를-위한-인프라"><a href="#딥러닝-서비스를-위한-인프라" class="headerlink" title="딥러닝 서비스를 위한 인프라"></a><a href="http://keen.devpools.kr/2017/09/08/deeplearning-basic01/#%EB%94%A5%EB%9F%AC%EB%8B%9D-%EC%84%9C%EB%B9%84%EC%8A%A4%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%9D%B8%ED%94%84%EB%9D%BC" title="딥러닝 서비스를 위한 인프라" target="_blank" rel="noopener"></a>딥러닝 서비스를 위한 인프라</h3><p><img src="http://keen.devpools.kr/images/server-2160321_640.jpg" alt="요즘엔 서버실에 갈 일이 있어야지"></p><p>크게 딥러닝 전용 인프라는 클라우드와 판매형 인프라로 나뉘어서 볼 수 있을 것 같은데 기존의 아마존 AWS, 마이크로소프트의 Azure, 구글 클라우드 같은 빅3는 이미 클라우드 인프라를 가지고 있다.<br>AWS의 경우는 클라우드 AMI(Amazon Machin Image)도 제공하고 있어서 굉장히 편리하게 쓸 수 있다. AMI라는 것은 미리 만들어진 이미지 같은 개념으로 볼 수 있다. NVidia 의 경우는 자사의 GPU를 이용한 클라우드 서비스를 하고 있는 것이 흥미롭다.<br>판매형 인프라는 기존의 서버 벤더들과 비슷한 형태를 취하고 있는데 웨이브 컴퓨팅은 하나의 모델을 제안하는 데 텐서플로 같은 소프트웨어에 특화되어 만들어져 있다.이에 비해 Penguin computing 은 몇가지 옵션들을 더 제공하고 있다.</p><h2 id="맺으며"><a href="#맺으며" class="headerlink" title="맺으며"></a><a href="http://keen.devpools.kr/2017/09/08/deeplearning-basic01/#%EB%A7%BA%EC%9C%BC%EB%A9%B0" title="맺으며" target="_blank" rel="noopener"></a>맺으며</h2><p>딥러닝, 인공지능 등을 바라볼때 탑뷰로 어떤 기술이 있는지를 알아보는 과정을 거치고 있다. 다음 번엔 개발자에게는 가장 중요한 딥러닝 프레임워크들을 다뤄보도록 하겠다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;딥러닝, 인공지능 이야기를 하면 CNN, RNN 같은 알고리즘에 관한 글만 굉장히 많아서 조금 탑뷰에서 바라볼 수 있는 관점에서 전체 기술과 활용처를 분류하고 딥러닝 프레임워크에 대해서 알아 보았다. 딥러닝 프레임워크는 같이 프로젝트를 하고 있는
      
    
    </summary>
    
      <category term="deep learning" scheme="http://www.devpools.kr/categories/deep-learning/"/>
    
    
  </entry>
  
  <entry>
    <title>헤드리스 크롬과 selenium2의 조합을 사용해 보자 with node</title>
    <link href="http://www.devpools.kr/2017/06/07/%ED%97%A4%EB%93%9C%EB%A6%AC%EC%8A%A4-%ED%81%AC%EB%A1%AC%EA%B3%BC-selenium2%EC%9D%98-%EC%A1%B0%ED%95%A9%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%B4-%EB%B3%B4%EC%9E%90-with-node/"/>
    <id>http://www.devpools.kr/2017/06/07/헤드리스-크롬과-selenium2의-조합을-사용해-보자-with-node/</id>
    <published>2017-06-07T04:31:34.000Z</published>
    <updated>2017-12-13T09:51:30.298Z</updated>
    
    <content type="html"><![CDATA[<p>최근에 headless chrome 이 나름 화제가 되어서 돌았는데 이 headless 라는 의미가 어떻게 쓰이는지 잘 모르는 사람들을 위해 이야기를 하고 넘어갈까 한다.</p><h2 id="headless-browser"><a href="#headless-browser" class="headerlink" title="headless browser"></a><a href="http://keen.devpools.kr/2017/06/07/about-test/#headless-browser" title="headless browser" target="_blank" rel="noopener"></a>headless browser</h2><p>headless browser는 기본적으로 GUI 없는 웹 브라우저를 의미한다.</p><blockquote><p>“A headless browser is a web browser without a graphical user interface.”<br>출처 : <a href="http://blog.arhg.net/2009/10/what-is-headless-browser.html" target="_blank" rel="noopener">What is a headless browser?</a></p></blockquote><p>즉 CLI(Command Line interface)에서만 다루는 브라우저를 이야기 한다.유명한 헤드리스 브라우저로는  phantomJS 가 있다.</p><p>헤드리스 브라우저가 사용되는 예는 여러가지가 있는데 좋은 예로는 테스트 자동화를 할 수 있고 데이타를 긁어오기(scraping) 하는 데 사용되고 스크린샷을 뜨는데에도 손쉽게 사용된다. 웹페이지 반응을 자동으로 스크립팅할 수 있는 부분도 존재한다.나쁜 예로는 DDOS 공격을 하는데 사용되기도 하고, 자동화를 좋지 않은데에 쓰이기도 한다는 것이다.</p><h2 id="selenium은-어떻게-다른가"><a href="#selenium은-어떻게-다른가" class="headerlink" title="selenium은 어떻게 다른가"></a><a href="http://keen.devpools.kr/2017/06/07/about-test/#selenium%EC%9D%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8B%A4%EB%A5%B8%EA%B0%80" title="selenium은 어떻게 다른가" target="_blank" rel="noopener"></a>selenium은 어떻게 다른가</h2><p>셀레니엄은 태생 자체가 다르다고 보면 된다. 헤드리스 브라우저는 범용적인 목적에 따라 CLI환경에서 브라우저 환경을 에뮬레이션 하는 것이라고 하면 selenium은 브라우저 플러그인을 넣고 테스트를 실행시킨다. 서버 사이드에서 테스트에 관련된 실행을 시킬 수 있는 리모트 컨트롤러가 존재하고 다양한 브라우저를 지원하기 위해 드라이버들을 제공하는데 webdriver 라고 불려진다. 이후 버전이 업데이트 되었다.</p><p>클라이언트 서버 구조로 서버 사이드와 RC(Remote Control)로 구성되어 있던 것을 webdriver와 결합하면서 현재의 selenium2가 된 것이다.</p><p><img src="http://keen.devpools.kr/images/seleniumhq.jpg" alt="selenium1 + webdriver = selenium2"></p><p>즉 CLI 툴로 사용할 수 있는 헤드리스 크롬의 경우는 다양한 브라우저를 테스트의 목적으로 사용해야 하는 범용 테스트 목적 보다는 다른 용도로 많이 사용될 것으로 보인다. <del>DDOS machine?</del></p><h2 id="자-그러면-node-환경에서-selenium2를-사용해-보자"><a href="#자-그러면-node-환경에서-selenium2를-사용해-보자" class="headerlink" title="자 그러면 node 환경에서 selenium2를 사용해 보자."></a><a href="http://keen.devpools.kr/2017/06/07/about-test/#%EC%9E%90-%EA%B7%B8%EB%9F%AC%EB%A9%B4-node-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-selenium2%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4-%EB%B3%B4%EC%9E%90" title="자 그러면 node 환경에서 selenium2를 사용해 보자." target="_blank" rel="noopener"></a>자 그러면 node 환경에서 selenium2를 사용해 보자.</h2><p>nightwatch 혹은 webdriverio는 node 환경에서 selenium2를 사용할 수 있게 해 준다. 옵션과 홈페이지, 구글 트렌드를 생각하면 nightwatch를 이용해야겠지만 일단 간단하게 사용하기 위해 webdriver로 실행을 해 보자.(robotframework도 같이 고려)</p><p>전역 옵션으로 webdriverio를 아래와 같이 설치한다.(nightwatch의 경우도 같이 진행할 수 있음.)</p><figure class="highlight plain"><br><br><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;npm install -g webdriverio</div></pre></td></tr></table><br><br></figure><p>selenium2는 다음과 같은 명령으로 내려받을 수 있다.</p><figure class="highlight plain"><br><br><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;curl -O <a href="http://selenium-release.storage.googleapis.com/3.0/selenium-server-standalone-3.4.0.jar" target="_blank" rel="noopener">http://selenium-release.storage.googleapis.com/3.0/selenium-server-standalone-3.4.0.jar</a></div></pre></td></tr></table><br><br></figure><p>크롬용 웹드라이버 -chromedriver를 받아서 압축을 풀고 PATH에 적용 시켜 준다.</p><figure class="highlight plain"><br><br><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;curl -O <a href="https://chromedriver.storage.googleapis.com/index.html?path=2.29/chromedriver_mac64.zip" target="_blank" rel="noopener">https://chromedriver.storage.googleapis.com/index.html?path=2.29/chromedriver_mac64.zip</a></div></pre></td></tr></table><br><br></figure><h2 id="headless-chrome-을-설치-한다"><a href="#headless-chrome-을-설치-한다" class="headerlink" title="headless chrome 을 설치 한다."></a><a href="http://keen.devpools.kr/2017/06/07/about-test/#headless-chrome-%EC%9D%84-%EC%84%A4%EC%B9%98-%ED%95%9C%EB%8B%A4" title="headless chrome 을 설치 한다." target="_blank" rel="noopener"></a>headless chrome 을 설치 한다.</h2><p>이 경우는 며칠전만 해도 canary를 쓴다고 했지만 지금은 크롬 최신버전이면 다음의 옵션만으로 실행할 수 있다.(MacOS 의 경우)</p><figure class="highlight plain"><br><br><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; chrome –headless –disable-gpu –screenshot &quot;<a href="http://devpools.kr&amp;quot" target="_blank" rel="noopener">http://devpools.kr&amp;quot</a>;</div></pre></td></tr></table><br><br></figure><h2 id="테스트-코드-작성"><a href="#테스트-코드-작성" class="headerlink" title="테스트 코드 작성"></a><a href="http://keen.devpools.kr/2017/06/07/about-test/#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1" title="테스트 코드 작성" target="_blank" rel="noopener"></a>테스트 코드 작성</h2><p>아래와 같이 테스트 코드를 작성하고 나면 일단은 selenium2 기반의 테스트 프레임워크의 시작을 했다고 보면 된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//test.js</span></div><div class="line"><span class="keyword">var</span> webdriverio = <span class="built_in">require</span>(<span class="string">‘webdriverio’</span>);</div><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">    <span class="attr">desiredCapabilities</span>: &#123;</div><div class="line">        <span class="attr">browserName</span>: <span class="string">‘chrome’</span>,</div><div class="line">        <span class="attr">chromeOptions</span>: &#123;</div><div class="line">            <span class="attr">args</span>: [</div><div class="line">                   <span class="string">‘headless’</span>,</div><div class="line">                   <span class="string">‘disable-gpu’</span>,</div><div class="line">               ],</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">webdriverio</div><div class="line">    .remote(options)</div><div class="line">    .init()</div><div class="line">    .url(<span class="string">‘<a href="http://www.devpools.kr">http://www.devpools.kr</a>‘</span>)</div><div class="line">    .getTitle().then(<span class="function"><span class="keyword">function</span>(<span class="params">title</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">‘Title was: ‘</span> + title);</div><div class="line">    &#125;)</div><div class="line">    .end();</div></pre></td></tr></table><p></p></figure><br>결과는 다음과 같다.<p></p><p><img src="http://keen.devpools.kr/images/headlessscraping.jpg" alt="개발바보들의 타이틀을 긁어왔다"></p><p>해당 소스는 깃헙의 다음 링크에서 받아볼 수 있다.<br><a href="https://github.com/ehrudxo/headlesssample" target="_blank" rel="noopener">https://github.com/ehrudxo/headlesssample</a></p><p>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;최근에 headless chrome 이 나름 화제가 되어서 돌았는데 이 headless 라는 의미가 어떻게 쓰이는지 잘 모르는 사람들을 위해 이야기를 하고 넘어갈까 한다.&lt;/p&gt;
&lt;h2 id=&quot;headless-browser&quot;&gt;&lt;a href=&quot;#h
      
    
    </summary>
    
      <category term="web test, test suite, headless chrome, selenium" scheme="http://www.devpools.kr/categories/web-test-test-suite-headless-chrome-selenium/"/>
    
    
  </entry>
  
  <entry>
    <title>챗봇 프로젝트를 진행하면서 알게 된 사실들</title>
    <link href="http://www.devpools.kr/2017/05/30/%EC%B1%97%EB%B4%87-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EB%A5%BC-%EC%A7%84%ED%96%89%ED%95%98%EB%A9%B4%EC%84%9C-%EC%95%8C%EA%B2%8C-%EB%90%9C-%EC%82%AC%EC%8B%A4%EB%93%A4/"/>
    <id>http://www.devpools.kr/2017/05/30/챗봇-프로젝트를-진행하면서-알게-된-사실들/</id>
    <published>2017-05-30T14:19:43.000Z</published>
    <updated>2017-12-13T09:48:27.368Z</updated>
    
    <content type="html"><![CDATA[<h3 id="챗봇-프로젝트를-진행하면서-알게-된-사실들"><a href="#챗봇-프로젝트를-진행하면서-알게-된-사실들" class="headerlink" title="챗봇 프로젝트를 진행하면서 알게 된 사실들"></a><a href="http://keen.devpools.kr/2017/05/30/%5B2017-05-30%2023:19:43%5D%E1%84%8E%E1%85%A2%E1%86%BA%E1%84%87%E1%85%A9%E1%86%BA%20%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%8C%E1%85%A6%E1%86%A8%E1%84%90%E1%85%B3%E1%84%85%E1%85%B3%E1%86%AF%20%E1%84%8C%E1%85%B5%E1%86%AB%E1%84%92%E1%85%A2%E1%86%BC%E1%84%92%E1%85%A1%E1%84%86%E1%85%A7%E1%86%AB%E1%84%89%E1%85%A5%20%E1%84%8B%E1%85%A1%E1%86%AF%E1%84%80%E1%85%A6%20%E1%84%83%E1%85%AC%E1%86%AB%20%E1%84%89%E1%85%A1%E1%84%89%E1%85%B5%E1%86%AF%E1%84%83%E1%85%B3%E1%86%AF/#%EC%B1%97%EB%B4%87-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EB%A5%BC-%EC%A7%84%ED%96%89%ED%95%98%EB%A9%B4%EC%84%9C-%EC%95%8C%EA%B2%8C-%EB%90%9C-%EC%82%AC%EC%8B%A4%EB%93%A4" title="챗봇 프로젝트를 진행하면서 알게 된 사실들" target="_blank" rel="noopener"></a>챗봇 프로젝트를 진행하면서 알게 된 사실들</h3><p><img src="https://cdn-images-1.medium.com/max/1600/0*cUkbr04Um53uekAF.jpg" alt="AI vs Human Brain"></p><p>AI vs Human Brain<br>최근 급하게 프로젝트에 두달간 투입이 되면서 블로그 포스팅을 할 여유가 전혀 없었다.<br>좀 반성하는 차에 진행한 프로젝트에서 얻은 인사이트를 공유하고자 한다.</p><h4 id="챗봇을-위한-디자인-원칙들이-속속-나오고-있다"><a href="#챗봇을-위한-디자인-원칙들이-속속-나오고-있다" class="headerlink" title="챗봇을 위한 디자인 원칙들이 속속 나오고 있다."></a><a href="http://keen.devpools.kr/2017/05/30/%5B2017-05-30%2023:19:43%5D%E1%84%8E%E1%85%A2%E1%86%BA%E1%84%87%E1%85%A9%E1%86%BA%20%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%8C%E1%85%A6%E1%86%A8%E1%84%90%E1%85%B3%E1%84%85%E1%85%B3%E1%86%AF%20%E1%84%8C%E1%85%B5%E1%86%AB%E1%84%92%E1%85%A2%E1%86%BC%E1%84%92%E1%85%A1%E1%84%86%E1%85%A7%E1%86%AB%E1%84%89%E1%85%A5%20%E1%84%8B%E1%85%A1%E1%86%AF%E1%84%80%E1%85%A6%20%E1%84%83%E1%85%AC%E1%86%AB%20%E1%84%89%E1%85%A1%E1%84%89%E1%85%B5%E1%86%AF%E1%84%83%E1%85%B3%E1%86%AF/#%EC%B1%97%EB%B4%87%EC%9D%84-%EC%9C%84%ED%95%9C-%EB%94%94%EC%9E%90%EC%9D%B8-%EC%9B%90%EC%B9%99%EB%93%A4%EC%9D%B4-%EC%86%8D%EC%86%8D-%EB%82%98%EC%98%A4%EA%B3%A0-%EC%9E%88%EB%8B%A4" title="챗봇을 위한 디자인 원칙들이 속속 나오고 있다." target="_blank" rel="noopener"></a>챗봇을 위한 디자인 원칙들이 속속 나오고 있다.</h4><p>어떤 절대적인 가이드라인은 사실 없기 때문에 마음대로 만들 수는 있고 마음대로 기획할 수는 있지만 많은 경우에 지금 활용할 수 있는 가이드라인들은 존재한다. 이른바 먼저 가본 사람들이 적어 놓은 가이드 라인들이 있다.</p><p>여기 가장 유명한 두개의 가이드라인만 소개를 할까 한다.</p><ol><li><a href="https://medium.muz.li/the-ultimate-guide-to-chatbots-why-theyre-disrupting-ux-and-best-practices-for-building-345e2150b682" target="_blank" rel="noopener">궁극가이드 — 9가지 원칙이라고 국내에는 알려져 있는…</a></li></ol><ul><li>사용자에게 거짓말하지 않는다 (봇이라고 알려라!)</li><li>대화를 유도하라</li><li>사용자의 감성을 고려해 디자인한다</li><li>대화에 제한을 두지 않는다(지속적으로 개선하라!)</li><li>경계를 만든다 (사람들이 몰입할 수 있는 경계를 쳐 주라)</li><li>사람들을 실망시킬 때는 조심하라</li><li>모든 인터랙션은 의미가 있다.(사용자가 이탈하는 부분을 정확히 트래킹하라)</li><li>사용자를 잘 도와줘야 시스템이 도움을 받는다.</li><li>사용자의 감정을 확인하고 감정을 목표점으로 한다.</li></ul><ol><li><a href="http://refreshstudio.tistory.com/entry/%EB%B4%87-%EB%94%94%EC%9E%90%EC%9D%B8bot-design%EC%9D%98-8%EA%B0%80%EC%A7%80-%EC%9B%90%EC%B9%99" target="_blank" rel="noopener">디자인 8원칙</a></li></ol><ul><li><strong>인간인 척 하지 말기</strong></li><li>단순함을 극도로 유지하기</li><li>채팅이라는 표현수단 이해하기</li><li>최종 사용자에게 맞추기</li><li>간단하게 응답하기</li><li>봇으로 안될 경우를 대비할 것</li><li>가능하면 구조적인 입력을 만들것</li><li>모두가 같은 것을 볼 것 (응답이 제각각이지 않을 것)</li></ul><p>이 중에서 가장 첫번째 원칙인 인간인척 하지 않는 것. 즉 사용자에게 사람인척 하지 않는 것이 중요한데 사람은 챗봇이라고 생각할 때와 사람이라고 생각할 때에 다르게 행동(입력)하고 기대하는 바도 매우 다르기 때문이다. 그래서 사람이 아닌 챗봇이라 버튼을 활용한다던지 다른 인터페이스에 대한 디자인을 하는 것은 무척이나 중요하다.</p><h4 id="인공지능에-대한-이해-보다-중요한-게-있다"><a href="#인공지능에-대한-이해-보다-중요한-게-있다" class="headerlink" title="인공지능에 대한 이해 보다 중요한 게 있다."></a><a href="http://keen.devpools.kr/2017/05/30/%5B2017-05-30%2023:19:43%5D%E1%84%8E%E1%85%A2%E1%86%BA%E1%84%87%E1%85%A9%E1%86%BA%20%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%8C%E1%85%A6%E1%86%A8%E1%84%90%E1%85%B3%E1%84%85%E1%85%B3%E1%86%AF%20%E1%84%8C%E1%85%B5%E1%86%AB%E1%84%92%E1%85%A2%E1%86%BC%E1%84%92%E1%85%A1%E1%84%86%E1%85%A7%E1%86%AB%E1%84%89%E1%85%A5%20%E1%84%8B%E1%85%A1%E1%86%AF%E1%84%80%E1%85%A6%20%E1%84%83%E1%85%AC%E1%86%AB%20%E1%84%89%E1%85%A1%E1%84%89%E1%85%B5%E1%86%AF%E1%84%83%E1%85%B3%E1%86%AF/#%EC%9D%B8%EA%B3%B5%EC%A7%80%EB%8A%A5%EC%97%90-%EB%8C%80%ED%95%9C-%EC%9D%B4%ED%95%B4-%EB%B3%B4%EB%8B%A4-%EC%A4%91%EC%9A%94%ED%95%9C-%EA%B2%8C-%EC%9E%88%EB%8B%A4" title="인공지능에 대한 이해 보다 중요한 게 있다." target="_blank" rel="noopener"></a>인공지능에 대한 이해 보다 중요한 게 있다.</h4><p><img src="https://cdn-images-1.medium.com/max/1600/0*rYIrAKa51Aw1PBte.jpg" alt="사람"></p><p>사람<br>디자인 원칙에서 보았듯이 가장 중요한 원칙은 사람에 대한 이해다.<br>사용자가 어떻게 챗봇을 활용할 지를 이해하지 못하면 서비스가 제대로 쓸모 없는 서비스를 하게 마련이다. 그런 의미에서 아직은 인공지능과 사람의 인터페이스는 투박하다.<br>사용자가 어떻게 챗봇을 쓸 것인지를 정의하려면 내가 하려는 서비스가 어떤 것인지를 명확하게 정의해야 하고 어떤 기능을 대체를 하려는지를 기획자 혹은 개발자 스스로가 알고 있어야 한다.</p><h4 id="챗봇에-대한-기대는-굉장히-천차-만별이다"><a href="#챗봇에-대한-기대는-굉장히-천차-만별이다" class="headerlink" title="챗봇에 대한 기대는 굉장히 천차 만별이다."></a><a href="http://keen.devpools.kr/2017/05/30/%5B2017-05-30%2023:19:43%5D%E1%84%8E%E1%85%A2%E1%86%BA%E1%84%87%E1%85%A9%E1%86%BA%20%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%8C%E1%85%A6%E1%86%A8%E1%84%90%E1%85%B3%E1%84%85%E1%85%B3%E1%86%AF%20%E1%84%8C%E1%85%B5%E1%86%AB%E1%84%92%E1%85%A2%E1%86%BC%E1%84%92%E1%85%A1%E1%84%86%E1%85%A7%E1%86%AB%E1%84%89%E1%85%A5%20%E1%84%8B%E1%85%A1%E1%86%AF%E1%84%80%E1%85%A6%20%E1%84%83%E1%85%AC%E1%86%AB%20%E1%84%89%E1%85%A1%E1%84%89%E1%85%B5%E1%86%AF%E1%84%83%E1%85%B3%E1%86%AF/#%EC%B1%97%EB%B4%87%EC%97%90-%EB%8C%80%ED%95%9C-%EA%B8%B0%EB%8C%80%EB%8A%94-%EA%B5%89%EC%9E%A5%ED%9E%88-%EC%B2%9C%EC%B0%A8-%EB%A7%8C%EB%B3%84%EC%9D%B4%EB%8B%A4" title="챗봇에 대한 기대는 굉장히 천차 만별이다." target="_blank" rel="noopener"></a>챗봇에 대한 기대는 굉장히 천차 만별이다.</h4><p>사용자들과 인터뷰를 하다보면 정작 사용할 사용자들은 챗봇에게 큰 기대를 하지 않는다. 마치 우리가 시리와 빅스비에게 심드렁한 것 처럼. 하지만 기획단계에서의 기획자와 발안자들은 굉장히 많은 기대를 가지고 프로젝트에 접근한다.</p><p><strong>심지어 챗봇을 위한 디자인 원칙들을 읽어 보지도 않고 말이다.</strong> 챗봇들이 무엇인가 세상을 바꿀 것 처럼 굉장히 멋진 장표들과 아키텍처들을 보고 있지만 정작 이것이 어떤 문제를 해결할 지 알고 있는 사람은 없다.</p><p>개발을 진행하면서 이 프로젝트들이 꽤나 많은 분야의 인력에 대한 감축을 전제로 하고 그런 미래가 바로 닥쳐 있다는 사실을 부정할 수는 없지만 굉장한 청사진 또한 동의할 수 없다. 그래서 현실적이지 않은 요구사항들을 사용자 인터뷰와 가이드라인을 기준으로 다 잘라내고 있지만 의사 결정자들 마저도 굉장한 기대감을 가지고 있다는 사실은 어떻게 보면 슬픈 일이다.</p><p>하지만 심지어 페이스북과 같이 작업을 했던 항공 티케팅 분야의 챗봇 담당자는 이렇게 이야기 한다<br>“아무도 챗봇으로 티켓을 사려고 하지는 않아요.”</p><h4 id="개발의-대부분은-인공지능과-관련이-없다"><a href="#개발의-대부분은-인공지능과-관련이-없다" class="headerlink" title="개발의 대부분은 인공지능과 관련이 없다."></a><a href="http://keen.devpools.kr/2017/05/30/%5B2017-05-30%2023:19:43%5D%E1%84%8E%E1%85%A2%E1%86%BA%E1%84%87%E1%85%A9%E1%86%BA%20%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%8C%E1%85%A6%E1%86%A8%E1%84%90%E1%85%B3%E1%84%85%E1%85%B3%E1%86%AF%20%E1%84%8C%E1%85%B5%E1%86%AB%E1%84%92%E1%85%A2%E1%86%BC%E1%84%92%E1%85%A1%E1%84%86%E1%85%A7%E1%86%AB%E1%84%89%E1%85%A5%20%E1%84%8B%E1%85%A1%E1%86%AF%E1%84%80%E1%85%A6%20%E1%84%83%E1%85%AC%E1%86%AB%20%E1%84%89%E1%85%A1%E1%84%89%E1%85%B5%E1%86%AF%E1%84%83%E1%85%B3%E1%86%AF/#%EA%B0%9C%EB%B0%9C%EC%9D%98-%EB%8C%80%EB%B6%80%EB%B6%84%EC%9D%80-%EC%9D%B8%EA%B3%B5%EC%A7%80%EB%8A%A5%EA%B3%BC-%EA%B4%80%EB%A0%A8%EC%9D%B4-%EC%97%86%EB%8B%A4" title="개발의 대부분은 인공지능과 관련이 없다." target="_blank" rel="noopener"></a>개발의 대부분은 인공지능과 관련이 없다.</h4><p>우리는 구글이 아니다. 이걸 인정하면 마음은 굉장히 편해지지만 대부분의 어른들(?)은 그걸 인정하기가 아들 딸 성적표보다 어려운 모양이다. 하지만 우리에게도 희망은 있다. 챗봇의 아키텍처에서 인공지능이 차지하는 부분은 우리가 기대하는 부분보다 굉장히 작다. 오히려 룰을 어떻게 만들고 어떻게 처리할 것인가 하는 부분이 훨씬 중요한 문제로 다가오게 된다.</p><h4 id="개발자는-그래서-또-너무나-중요하다"><a href="#개발자는-그래서-또-너무나-중요하다" class="headerlink" title="개발자는 그래서 또 너무나 중요하다."></a><a href="http://keen.devpools.kr/2017/05/30/%5B2017-05-30%2023:19:43%5D%E1%84%8E%E1%85%A2%E1%86%BA%E1%84%87%E1%85%A9%E1%86%BA%20%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%8C%E1%85%A6%E1%86%A8%E1%84%90%E1%85%B3%E1%84%85%E1%85%B3%E1%86%AF%20%E1%84%8C%E1%85%B5%E1%86%AB%E1%84%92%E1%85%A2%E1%86%BC%E1%84%92%E1%85%A1%E1%84%86%E1%85%A7%E1%86%AB%E1%84%89%E1%85%A5%20%E1%84%8B%E1%85%A1%E1%86%AF%E1%84%80%E1%85%A6%20%E1%84%83%E1%85%AC%E1%86%AB%20%E1%84%89%E1%85%A1%E1%84%89%E1%85%B5%E1%86%AF%E1%84%83%E1%85%B3%E1%86%AF/#%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%8A%94-%EA%B7%B8%EB%9E%98%EC%84%9C-%EB%98%90-%EB%84%88%EB%AC%B4%EB%82%98-%EC%A4%91%EC%9A%94%ED%95%98%EB%8B%A4" title="개발자는 그래서 또 너무나 중요하다." target="_blank" rel="noopener"></a>개발자는 그래서 또 너무나 중요하다.</h4><p>위의 주제의 연속이다. 챗봇의 대부분은 소프트웨어 엔지니어의 영역이다. 그래서 챗봇 엔진을 잘 만들기 위해서는 좋은 엔지니어와 좋은 아키텍트가 당연히 필요하다. 물론 NLU라던지 딥러닝을 잘 하면 할 수록 더욱 좋다. 하지만 좋은 개발만큼 중요한 부분은 없다.</p><p>좋은 개발자는 여러가지 복잡하게 얽혀있는 챗봇의 어려움들을 풀어줄 시작과 마지막이다. 점점 인공지능의 세상이 오면 올 수록 사용자의 입장에서 이해하는 개발자가 더 중요해 질 것이다.</p><h4 id="우리는-기존의-레거시를-대체해야-한다"><a href="#우리는-기존의-레거시를-대체해야-한다" class="headerlink" title="우리는 기존의 레거시를 대체해야 한다."></a><a href="http://keen.devpools.kr/2017/05/30/%5B2017-05-30%2023:19:43%5D%E1%84%8E%E1%85%A2%E1%86%BA%E1%84%87%E1%85%A9%E1%86%BA%20%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%8C%E1%85%A6%E1%86%A8%E1%84%90%E1%85%B3%E1%84%85%E1%85%B3%E1%86%AF%20%E1%84%8C%E1%85%B5%E1%86%AB%E1%84%92%E1%85%A2%E1%86%BC%E1%84%92%E1%85%A1%E1%84%86%E1%85%A7%E1%86%AB%E1%84%89%E1%85%A5%20%E1%84%8B%E1%85%A1%E1%86%AF%E1%84%80%E1%85%A6%20%E1%84%83%E1%85%AC%E1%86%AB%20%E1%84%89%E1%85%A1%E1%84%89%E1%85%B5%E1%86%AF%E1%84%83%E1%85%B3%E1%86%AF/#%EC%9A%B0%EB%A6%AC%EB%8A%94-%EA%B8%B0%EC%A1%B4%EC%9D%98-%EB%A0%88%EA%B1%B0%EC%8B%9C%EB%A5%BC-%EB%8C%80%EC%B2%B4%ED%95%B4%EC%95%BC-%ED%95%9C%EB%8B%A4" title="우리는 기존의 레거시를 대체해야 한다." target="_blank" rel="noopener"></a>우리는 기존의 레거시를 대체해야 한다.</h4><p><img src="https://cdn-images-1.medium.com/max/1600/0*5vgnyq-ln8SBEbYO.jpg" alt="이렇게 죽어있는 레거시는 곤란하다"></p><p>이렇게 죽어있는 레거시는 곤란하다</p><p>상담이라던지, 견적이라던지 모든 챗봇이 풀고자 하는 문제들은 기존의 시스템이 자리잡고 있다. 그럼 이 레거시들을 어떻게 유기적으로 풀고 어떻게 서비스를 대체할 수 있을까? 마이크로 서비스 아키텍처는 그 중의 좋은 대답이 될 수 있다. 하지만 이것은 만병통치약은 아니다. 가장 중요한 것은 기존 레거시 함수를 묶어주는 표준을 만들어 주는 것이고 그 레거시를 어떻게 접근할지에 대한 해답은 챗봇이 가지고 있어야 한다.</p><p>그렇다면 사용자의 자연어와 레거시간의 연계는 어떻게 이루어 질 것인가. 여기에는 기존에 없던 인공지능 분야의 기술이 필요하다.</p><h4 id="과소-평가해서도-곤란하다"><a href="#과소-평가해서도-곤란하다" class="headerlink" title="과소 평가해서도 곤란하다."></a><a href="http://keen.devpools.kr/2017/05/30/%5B2017-05-30%2023:19:43%5D%E1%84%8E%E1%85%A2%E1%86%BA%E1%84%87%E1%85%A9%E1%86%BA%20%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%8C%E1%85%A6%E1%86%A8%E1%84%90%E1%85%B3%E1%84%85%E1%85%B3%E1%86%AF%20%E1%84%8C%E1%85%B5%E1%86%AB%E1%84%92%E1%85%A2%E1%86%BC%E1%84%92%E1%85%A1%E1%84%86%E1%85%A7%E1%86%AB%E1%84%89%E1%85%A5%20%E1%84%8B%E1%85%A1%E1%86%AF%E1%84%80%E1%85%A6%20%E1%84%83%E1%85%AC%E1%86%AB%20%E1%84%89%E1%85%A1%E1%84%89%E1%85%B5%E1%86%AF%E1%84%83%E1%85%B3%E1%86%AF/#%EA%B3%BC%EC%86%8C-%ED%8F%89%EA%B0%80%ED%95%B4%EC%84%9C%EB%8F%84-%EA%B3%A4%EB%9E%80%ED%95%98%EB%8B%A4" title="과소 평가해서도 곤란하다." target="_blank" rel="noopener"></a>과소 평가해서도 곤란하다.</h4><p><img src="https://cdn-images-1.medium.com/max/1600/0*EHAkE0QhpD2tOPTZ.jpg" alt="stay tuned"></p><p>stay tuned<br>이 쪽은 지속적으로 계속 발전할 것이다. 그렇다는 것은 지금 발을 들이기에 무척이나 좋은 시기라는 것이다.<br>아무래도 발전에 대한 틀은 대부분이 갖춰지는 것 같다.<br>누군가가 기가막힌 사용자 인터페이스를 제시할 것이고 그 때 쯤이면 아직까지는 기대할 것 없는 챗봇 분야의 인공지능도 수준이 많이 올라갈 것이다.<br>언제나 관심을 기울이고 있어야 한다는 이야기다.</p><hr><p><em>Originally published at </em><a href="http://devpools.kr/2017/05/30/%EC%B1%97%EB%B4%87-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EB%A5%BC-%EC%A7%84%ED%96%89%ED%95%98%EB%A9%B4%EC%84%9C-%EC%95%8C%EA%B2%8C-%EB%90%9C-%EC%82%AC%EC%8B%A4%EB%93%A4/" target="_blank" rel="noopener"><em>개발바보들</em></a><em>.</em></p><p>By <a href="https://medium.com/@keendev" target="_blank" rel="noopener">Keen Dev</a> on <a href="https://medium.com/p/179d67a9e2af" target="_blank" rel="noopener">May 30, 2017</a>.</p><p>Exported from <a href="https://medium.com/" target="_blank" rel="noopener">Medium</a> on May 31, 2017.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;챗봇-프로젝트를-진행하면서-알게-된-사실들&quot;&gt;&lt;a href=&quot;#챗봇-프로젝트를-진행하면서-알게-된-사실들&quot; class=&quot;headerlink&quot; title=&quot;챗봇 프로젝트를 진행하면서 알게 된 사실들&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://k
      
    
    </summary>
    
      <category term="github, github-trend, tech-trend" scheme="http://www.devpools.kr/categories/github-github-trend-tech-trend/"/>
    
    
  </entry>
  
  <entry>
    <title>엑셀의 분석도구를 이용한 간단한 선형 회귀분석 실습</title>
    <link href="http://www.devpools.kr/2017/05/16/%EC%97%91%EC%85%80%EC%9D%98-%EB%B6%84%EC%84%9D%EB%8F%84%EA%B5%AC%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%84%A0%ED%98%95-%ED%9A%8C%EA%B7%80%EB%B6%84%EC%84%9D-%EC%8B%A4/"/>
    <id>http://www.devpools.kr/2017/05/16/엑셀의-분석도구를-이용한-간단한-선형-회귀분석-실/</id>
    <published>2017-05-16T10:41:37.000Z</published>
    <updated>2017-12-13T09:42:46.833Z</updated>
    
    <content type="html"><![CDATA[<p>선형 회귀분석(Linear Regression)은 머신러닝을 공부할때 가장 첫번째 배우는 예측분석 모델입니다. 머신러닝 또는 딥러닝을 배우는 입장에서는 처음에 Python, Tensorflow, Keras, R, Matlab 등의 낯선 학습환경을 본인의 PC에 구성해서 하게 되지만 간단한 선형 회귀분석 정도는 마이크로소프트의 밥줄(….), Office의 Excel에서도 아주 손쉽게 구현하여 결과를 확인하고 분석을 진행할 수 있습니다.</p><h3 id="분석도구-활성화"><a href="#분석도구-활성화" class="headerlink" title="분석도구 활성화"></a>분석도구 활성화</h3><p>기본적으로 Excel내의 분석도구는 비활성화 되어 있습니다. 이 분석도구를 활성화 시키기 위해서는 Excel의 버전에 따라 다른 방법으로 분석모델을 활성화시켜줘야 합니다. 과거의 Office버전에서는 기본적으로 <code>파일메뉴 - 옵션 - (좌측)추가기능메뉴 - 분석도구 - 확인클릭</code>순으로 분석도구를 활성화할 수 있습니다. 하지만 저는 최신의 Mac용 Office를 사용하기 때문에 다른 경로로 분석도구를 활성화 시켜줘야 합니다. <code>(상단)도구 - 추가기능 - 분석기능 체크 - 확인</code> 이렇게 하면 <code>데이터</code>탭 우측 상단에 <code>데이터 분석</code>도구가 있음을 확인할 수 있습니다.</p><p><img src="http://alex.devpools.kr/img/2017/0417.01.addAnalysisTool.png" alt="01"></p><h3 id="데이터-분석"><a href="#데이터-분석" class="headerlink" title="데이터 분석"></a>데이터 분석</h3><p>분석도구를 설치했으니, 이제 선형 회귀분석을 위한 데이터를 로드를 합니다. 우리가 작업할 데이터는 중고차의 가격과 킬로수가 함께 나온 데이터로써, 주행거리(Odometer)와 중고차 가격(Price)간 상관관계를 구하고 이를 예측하기 위해 분석을 진행할 것입니다. 상단의 <code>데이터 - 데이터분석</code>으로 시작합니다. 팝업에 나오는 메뉴중에 <code>Regression(회귀분석)</code>을 선택합니다.</p><p><img src="http://alex.devpools.kr/img/2017/0417.02.DataAnalysis.png" alt="02"></p><p>독립변수 X값과 종속변수 Y값에 대해 해당 셀을 Block지정합니다. 그리고 라벨을 체크합니다.</p><p><img src="http://alex.devpools.kr/img/2017/0417.03.Regression.png" alt="03"></p><p>데이터의 분석결과가 별도의 시트로 추가가 되며, 우리가 분석한 주행거리별 중고차 가격에 대한 분석은 아래와 같습니다. 중요하게 체크해야할 항목에 녹색표시를 해두었습니다.</p><p><img src="http://alex.devpools.kr/img/2017/0417.04.summary.png" alt="04"></p><p><code>R Square(설명력)</code>의 값은 입력한 X값(주행거리)가 Y값(중고값)을 결정하는데 65%의 영향력을 끼친다는 것을 의미합니다. 또한 하단의 <code>Intercept(Y절편)</code> 와 Price항목은 선형 회귀분석 모델의 수식인 <code>Y = aX + b</code>를 완성하는데 쓰입니다. 이는 차트를 통해 확인을 하도록 합니다.</p><h3 id="차트-추가"><a href="#차트-추가" class="headerlink" title="차트 추가"></a>차트 추가</h3><p>차트를 추가하려면 차트버튼을 클릭하면 간단하게 차트를 추가할 수 있습니다.</p><p><img src="http://alex.devpools.kr/img/2017/0417.05.AddChart.png" alt="04"></p><p>차트의 데이터를 하나 클릭하여 우클릭을 하면 추세선을 추가할 수 있고, 추세선 서식 옵션의 <code>수식을 차트에 표시</code>를 체크함으로써 분석한 데이터의 선형 회귀분석 모델의 수식을 쉽게 구할 수 있습니다.</p><p><img src="http://alex.devpools.kr/img/2017/0417.06.ModifyChartOption.png" alt="04"></p><p>분석된 데이타를 통해 도출된 선형 회귀분석 모델의 공식은 “y = -10.433x + 190655”로 쉽게 확인할 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;선형 회귀분석(Linear Regression)은 머신러닝을 공부할때 가장 첫번째 배우는 예측분석 모델입니다. 머신러닝 또는 딥러닝을 배우는 입장에서는 처음에 Python, Tensorflow, Keras, R, Matlab 등의 낯선 학습환경을
      
    
    </summary>
    
      <category term="미분류" scheme="http://www.devpools.kr/categories/%EB%AF%B8%EB%B6%84%EB%A5%98/"/>
    
    
      <category term="Excel" scheme="http://www.devpools.kr/tags/Excel/"/>
    
      <category term="회귀분석" scheme="http://www.devpools.kr/tags/%ED%9A%8C%EA%B7%80%EB%B6%84%EC%84%9D/"/>
    
  </entry>
  
  <entry>
    <title>제1회 re:View 참석 후기</title>
    <link href="http://www.devpools.kr/2017/03/27/%EC%A0%9C1%ED%9A%8C-review-%EC%B0%B8%EC%84%9D-%ED%9B%84%EA%B8%B0/"/>
    <id>http://www.devpools.kr/2017/03/27/제1회-review-참석-후기/</id>
    <published>2017-03-26T15:19:46.000Z</published>
    <updated>2017-12-13T09:43:20.749Z</updated>
    
    <content type="html"><![CDATA[<h2 id="들어가기에-앞서서…"><a href="#들어가기에-앞서서…" class="headerlink" title="들어가기에 앞서서…"></a>들어가기에 앞서서…</h2><p>지난 3월 22일 수요일 오후 늦은 7시, 잠실에 있는 삼성SDS 지하에서는 동회사에 근무하시는 신상재님께서 주관하셨던 코드리뷰관련 Meetup, “제1회 re:View”가 열렸습니다.  re:View의 <a href="https://reviewmeetup.wordpress.com/" target="_blank" rel="noopener">공식사이트</a>, <a href="https://www.facebook.com/groups/reviewmeetup/" target="_blank" rel="noopener">Facebook</a>, <a href="https://reviewmeetup.slack.com/" target="_blank" rel="noopener">Slack</a>, <a href="https://twitter.com/reviewmeetup/" target="_blank" rel="noopener">Twiter</a>의 운영과 개인별 문자/메일 발송 등의 멀티채널을 통한 참가자들의 압박(…)은 그 많은 인원이 평일 오후에 참석할 수 있었던 큰 원동력이 된 것 같습니다. 이뿐만 아니라 <strong>컨트롤이 힘든 자녀를 둔 맞벌이 개발자와 취업에 고군분투하고 있는 취업준비생을 위한 배려</strong>는 그동안 제가 참석한 다양한 Meetup에서는 단 한번도 보지 못한 멋진 운영중 하나였습니다. 이 글을 통해 준비해주셨던 모든 분들께 감사의 말씀을 드립니다.</p><p>행사는 1부 서지연님 발표, 2부 김헌기님 발표, 3부 QnA로 구성되어 있었으며 발표중 질문이나 요청은 Slack채널의 운영으로 현장에서 온라인을 통한 참석자들의 참여가 있었습니다.</p><p><img src="https://labyrins.github.io/img/20170322_review_title.JPG" alt="Forest"></p><h2 id="1부-코드리뷰를-시작하려는-그대에게-서지연-카카오"><a href="#1부-코드리뷰를-시작하려는-그대에게-서지연-카카오" class="headerlink" title="1부 : 코드리뷰를 시작하려는 그대에게(서지연@카카오)"></a>1부 : 코드리뷰를 시작하려는 그대에게(서지연@카카오)</h2><p>카카오 서지연님의 사외 발표는 지난 나프다 컨퍼런스를 포함 2번였고 저는 운좋게 그 두번의 발표를 모두 라이브로 들을 수 있었습니다. 나긋나긋하며 또박또박한 발음으로 발표하시는 서지연님의 발표는 내용이 재미있어서 다행이지 따분한 내용의 발표였다면 청중의 수면을 유도하기 참 좋은(…) 목소리인 것 같습니다. 각설하고, 서지연님은 사내에서 경험한 본인의 코드리뷰를 바탕으로 이야기를 풀어나가셨습니다.</p><h4 id="왜-코드리뷰를-시작하려-하는가"><a href="#왜-코드리뷰를-시작하려-하는가" class="headerlink" title="왜 코드리뷰를 시작하려 하는가?"></a>왜 코드리뷰를 시작하려 하는가?</h4><p>내 코드가 부끄럽습니다. 이는 주니어뿐만 아니라 시니어들도 가지고 있는 생각일 것입니다. 보잘것 없는 코드가 타인에 의해 드러나는 것도, 의견을 주고 싶은데 잔소리로 오해 받을까봐 걱정되는 것도, 코드리뷰를 경험해보지 않은 인력들에게는 모두 걱정입니다. <strong>코드리뷰란 코드로 대화하는 팀원간의 커뮤니케이션</strong>입니다. 부끄러움은 짧고 코드의 히스토리를 길다는 점을 명심해주세요. <strong>잘못된 코드는 누군가에게 레거시코드</strong>가 되어 영원한 고통을 안겨줄 수 있습니다. 덮어놓고 코드를 작성하다 보면 장애의 위협은 항상 우리를 괴롭힐 것입니다.</p><h4 id="상처를-주거나-받거나하지-말자"><a href="#상처를-주거나-받거나하지-말자" class="headerlink" title="상처를 주거나 받거나하지 말자"></a>상처를 주거나 받거나하지 말자</h4><p>자칫 잘못하면 꼰대가 될 수 있음에 주의해야지만, 내가 아는 것을 모르는 사람에게 알려주는 것은 잘못된 것이 아닙니다. 이런 상황에서 온라인으로 진행하는 코드리뷰가 가지는 장점이 여기서 드러납니다. 목소리가 아닌 글로 격려와 칭찬을 하면서 진행하면 이러한 오해를 줄이는데 큰 도움이 됩니다. 코드는 본인이 아닙니다. <strong>나에 대한 평가가 아닌 나의 코드에 대한 리뷰를 받는 것</strong>임을 생각하며 진행하도록 합니다.</p><h4 id="할-수-있는-만큼만"><a href="#할-수-있는-만큼만" class="headerlink" title="할 수 있는 만큼만"></a>할 수 있는 만큼만</h4><p>프로젝트 초반에는 모두 코드리뷰에 대한 열정에 어마어마한 리뷰 요청이 들어오게 됩니다. 하지만, 이를 다 받아주면 내가 해야할 일에 병목이 생기고 번아웃이 되기 쉽습니다. <strong>팀원이 요청한 모든 리뷰에 피드백을 줄 필요는 없습니다.</strong> 본인의 업무와 조율하며 코드리뷰 실행을 조절하되 정말 하고 싶거나 또는 좋은 의견을 주고 싶은 리뷰라면 나중에 하기로 약속하는 것도 좋은 방법입니다.</p><h4 id="나의-의견을-고수"><a href="#나의-의견을-고수" class="headerlink" title="나의 의견을 고수"></a>나의 의견을 고수</h4><p>코드를 통한 협업에서는 가이드라인(Code Fomatting, Naming Rule 등)이 필수이지만 <strong>개발자의 취향은 존중받아야</strong>함이 마땅합니다. 리뷰어가 해당 코드에 대한 반대의 의견이 있을때는 요청자를 위해 목소리를 내어줘야하고, 요청자 역시 반대의 의견을 듣는 것을 두려워하지 말아야 합니다. 하지만 타당한 이유로 반박해야할 내용이 있다면, 왜 내가 이렇게 작성을 했는지에 대한 설명을 해줘야합니다. <strong>해당코드에 대한 고민은 내가 가장 많이 했으니까요.</strong></p><h4 id="도입초반이-중요"><a href="#도입초반이-중요" class="headerlink" title="도입초반이 중요"></a>도입초반이 중요</h4><p>초기에는 코드리뷰리더 역할을 가진 멤버가 필요합니다. 코드리뷰 리더는 반드시 개발을 잘하거나 연차가 높은 사람일 필요가 없습니다. 가장 중요한 자질은 <strong>적극적으로 코드리뷰를 참여하고 멤버들을 독려할 수 있는 열정을 소유</strong>하는 것입니다. 그 후, 메일이나 Slack을 통한 Notification 환경을 구축하고, 칭찬할 내용에 대해서는 아낌없는 따봉을 팍팍 줌으로써 서로 격려하는 문화를 만들어 나갑니다. 정기적인 오프라인 미팅운영도 큰도움이 됩니다. <strong>아낌없는 격려와 칭찬.</strong> 이것은 코드리뷰를 도입하는데 있어 큰 밑거름이 됨을 잊지마시길 바랍니다.</p><h4 id="나는-무엇이-바뀌었는가"><a href="#나는-무엇이-바뀌었는가" class="headerlink" title="나는 무엇이 바뀌었는가?"></a>나는 무엇이 바뀌었는가?</h4><p>이전에는 본인 개성을 베이스로 자유로운 코드가 가득했던 반면, 코드리뷰를 통해 타인이 볼 것이라는 압박때문이라도 코드를 한번 더 생각해보는 습관이 생깁니다. 이를 위해서는 적절한 협업도구의 사용이 성공유무를 가르게 될 수 있습니다. 다같이 즐겁게 코딩하는 것이 코드리뷰의 궁극적인 목표임을 다시 한번 상기합시다. 꾸준한 코드리뷰를 통해 팀원들과 협업하는 재미가 생기는 것을 자신을 발견할 수 있을 것입니다.</p><p>사내 코드리뷰 경험을 공유해 주신 서지연님의 발표에서 그녀가 대한민국에서 얼마나 행복한 개발자인가를 알 수 있었으며, 그와는 별개로 발표용 키노트에 기가 막힌 타이밍에 삽입한 탁월한 짤방이 청중에게 큰 공감을 가져오게한 능력이 돋보인 발표였습니다.</p><h2 id="2부-코드품질-개선을-위한-GS-SHOP-고군분투기-김헌기-GS-SHOP"><a href="#2부-코드품질-개선을-위한-GS-SHOP-고군분투기-김헌기-GS-SHOP" class="headerlink" title="2부 : 코드품질 개선을 위한 GS SHOP 고군분투기(김헌기@GS SHOP)"></a>2부 : 코드품질 개선을 위한 GS SHOP 고군분투기(김헌기@GS SHOP)</h2><p>행사를 준비하며 온라인에서 보여주신 신상재님과 김헌기님의 모습은 한때 시대를 풍미했던 서수남과 하청일, 서경석과 이윤석처럼 ‘이런 것이 Meetup을 준비하는 자들의 호흡이다!’를 온몸으로 외치는 듯 했습니다. 더불어, <strong>40대 개발자는 이런 자세를 견지해야 팀내의 젊은 후배들과 활기찬 협업을 할 수 있다</strong>라는 것을 30대 후반의 미천한 능력을 지닌 저에게 알려주셨습니다. 김헌기님의 직장생활 기간의 희열차트로 시작한 발표는 깨알같은 아들 자랑을 은근 슬쩍하시더니 본인 회사의 자랑을 본격적으로 대놓고 하시는 모습을 보며, 무언가 심상치 않은 발표가 될 것이라 예상했습니다. 홈쇼핑을 통해 물건을 구매하지 않는 저로써는 GS SHOP이 어떤 회사인지, 어떤 비지니스 물밑에서 하고 있는지 몰랐는데, 이런 오프라인 모임을 통해 커머스 비지니스를 하는 IT회사들은 어떤 환경을 가지고 어떤일을 하고 있는지에 대해 조금이나마 알게 되었습니다. 김헌기님이 발표하신 내용을 좀 정리해보자면…</p><h4 id="엔터프라이즈-영역에서의-개발"><a href="#엔터프라이즈-영역에서의-개발" class="headerlink" title="엔터프라이즈 영역에서의 개발"></a>엔터프라이즈 영역에서의 개발</h4><p>과거에는 회사가 위험요소가 있는 곳은 애당초 가지 않았는데 이제는 이런 위험요소를 탐지하는 것 자체가 어려워졌습니다. 그래서 민첩함을 키워야했고, 현재는 팀장이 직접 코딩도 하고 사내에서 개발관련 지식을 공유하는 세미나도 주관하는 상황에 이르렀습니다. 이는 변화에 적응하기 위해 <strong>현업들과 코드로 대화를 해야하는 것</strong>이 필요하다는 것을 몸소 깨달았기 때문입니다. 우리모두 변화에 적응하는 유연성을 기르도록 합시다.</p><h4 id="레거시-코드와의-사투"><a href="#레거시-코드와의-사투" class="headerlink" title="레거시 코드와의 사투"></a>레거시 코드와의 사투</h4><p>GS eShop에서 사용하는 엔터프라이즈 시스템에는 어마어마한 레거시 코드들이 아직도 있습니다. 자바코드 44000줄, A4로 뽑을 경우 670장이나 되는 거대한 양의 코드입니다. 메소드에 파라메터가 20개 이상인 것도 부지기수이고 또한, 개발 기준없이 개발자들마다 본인의 개성에 맞는 스타일로 작업을 하다보니 상황은 점점 절망적이 되어갔습니다. 이런 절망적인 상황에서 이를 해결하기 위해 내부에서 자발적인 고민을 하기 시작합니다. 더러운 코드로 인해 악순환이 계속되는 구조를 <strong>클린코드를 유입시키고 이를 통해 테스트 오류를 감지할 수 있는 선순환구조로 바꾸기</strong> 위해…</p><h4 id="무엇을-했는가"><a href="#무엇을-했는가" class="headerlink" title="무엇을 했는가?"></a>무엇을 했는가?</h4><p>측정가능한 투명한 품질활동을 위해 관리자와 테스트 전문가가 프레임 워크를 제작하기로 했습니다. Python과 django사용를 사용하여 제작을 했는데 어느 프로젝트나 마찬가지지만 새로운 언어로 개발을 한다는 것은 쉬운일이 아니였습니다. 우리는 <strong>방향을 잡을 수 있는 목표</strong>와 <strong>보여줄수 있는 가치</strong>를 현실화 하기 위해 리더/엔지니어/테스트전문가/보안전문가로 구성된 팀을 꾸렸고, 영어 닉네임을 사용했습니다. 꾸준한 리뷰를 통해 잘못된 코드의 작성자는 즉시 담당자에게 호출되었고, 모의해킹/기능테스트/해킹테스트와 같은 품질향상을 위한 작업 역시 꾸준히 이루어졌습니다. 이리하여 배포품질관리시스템 “de:light”가 탄생되었습니다. 하지만 프로세스와 플랫폼으로 살림살이가 바로 나아지지가 않았습니다. <strong>코드리뷰 문화의 확산 필요</strong>해졌습니다. 우선 사내커뮤니티 활성화하고 목표는 유지보수 가능한 코딩 기술을 전수하자는 미명하에 다양한 행사나 사내 Meetup/Hackerthon 등을 진행하였습니다. <strong>코드리뷰는 품질개선의 건전한 활동이자 개발문화</strong>입니다.</p><h4 id="무엇이-변했는가"><a href="#무엇이-변했는가" class="headerlink" title="무엇이 변했는가?"></a>무엇이 변했는가?</h4><p>애자일을 시도했지만 우리에게는 이 방식이 불가능 하다고 판단을 하였습니다. 하지만 애자일의 아이템중 취해야 할 것은 과감히 채택하여 적용하였습니다. 특히, 커뮤니케이션 방식의 변화를 위해 <strong>주기적으로 업무를 끊고 갈수 있는 스프린트 방식</strong>을 도입했습니다. 각자 본인이 한달에 할 수 있는 범위를 정하고 이는 수단과 방법을 가리지 않고 실행하며, <strong>한주의 스프린트 결과를 별거 없거나 아주 작은 내용이라도 팀원들에게 공유</strong>해야하는 그라운드룰을 운영했습니다. 이것을 우리가 원하는 상황으로 가고 있지 않을때 <strong>플랜B를 갈지 판단할 수 있는 판단의 근거</strong>로 작용하게 되었습니다. 관리만 할 줄 아는 사람들이 직접 참여하며 느끼는 것이 있었습니다.</p><p>발표전 김헌기님께서는 서지연님과의 발표를 듣고 본인이 속았다라고 볼멘소리로 주최측에 항의하셨으나 발표의 내용을 모두 들어봤을때, 사내외행사를 통한 경험을 토대로 이번 Meetup의 발표을 위해 큰 그림을 그려오셨다는 생각만이 머리속에 맴돌았습니다.</p><h2 id="3부-대담식-질의-응답"><a href="#3부-대담식-질의-응답" class="headerlink" title="3부 : 대담식 질의 응답"></a>3부 : 대담식 질의 응답</h2><p>슬랙을 통한 질의가 행사진행중 계속되었는데 많은 분들의 질문, 특히 본인의 업과 관련된… 업무에서 많은 고민을 해왔고 이 자리를 빌어 조언을 구하고 싶은 듯한 날카로운 질문들에 대해 김현기님과 서지연님이 혼을 다해 답변을 해주셨습니다. 슬랙을 통해 올라온 많은 질문들을 시간관계상 답변을 해드리지 못한 것은 발표자나 참가자들에게 모두 아쉬운 점이였다고 생각합니다.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>이렇게 평일 오후라는 제한적인 시간에 많은 분들이 모여 코드리뷰라는 주제로 뜻깊은 시간을 가졌습니다. 서지연님과 김헌기님의 성공사례를 보며, 코드리뷰라는 것은 단순히 남의 코드를 다른 사람이 검사해준다는 느낌보다는 개발을 업으로 삼고 있는 사람들의 업무방식을 변화시켜줄 수 있는 문화라는 것을 모두가 공감했을 것입니다. 차기 Meetup에서도 곳곳에 숨어있는 다른 개발자분들의 다양한 경험담을 공유할 수 있길 바래봅니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;들어가기에-앞서서…&quot;&gt;&lt;a href=&quot;#들어가기에-앞서서…&quot; class=&quot;headerlink&quot; title=&quot;들어가기에 앞서서…&quot;&gt;&lt;/a&gt;들어가기에 앞서서…&lt;/h2&gt;&lt;p&gt;지난 3월 22일 수요일 오후 늦은 7시, 잠실에 있는 삼성SDS 지
      
    
    </summary>
    
      <category term="Meetup" scheme="http://www.devpools.kr/categories/Meetup/"/>
    
    
      <category term="re:View" scheme="http://www.devpools.kr/tags/re-View/"/>
    
      <category term="코드리뷰" scheme="http://www.devpools.kr/tags/%EC%BD%94%EB%93%9C%EB%A6%AC%EB%B7%B0/"/>
    
  </entry>
  
  <entry>
    <title>Jekyll Page에 기능 추가하기</title>
    <link href="http://www.devpools.kr/2017/03/26/Jekyll-Page%EC%97%90-%EA%B8%B0%EB%8A%A5-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/"/>
    <id>http://www.devpools.kr/2017/03/26/Jekyll-Page에-기능-추가하기/</id>
    <published>2017-03-26T00:00:00.000Z</published>
    <updated>2017-12-13T10:31:17.928Z</updated>
    
    <content type="html"><![CDATA[<p>Markdown 형태의 정적인 페이지가 너무 밋밋하고 피드백을 받을 수 있는 영역이 없을 뿐더러 나중에 글이 늘어나면 포스트 관리의 어려움도 걱정되는 터라 몇개의 기능을 추가해보려 합니다.</p><h4 id="페이스북-소셜플러그인-댓글기능-추가"><a href="#페이스북-소셜플러그인-댓글기능-추가" class="headerlink" title="페이스북 소셜플러그인 - 댓글기능 추가"></a>페이스북 소셜플러그인 - 댓글기능 추가</h4><p>페이지 하단의 페이스북 댓글 창을 추가하기 위해서 해야할 작업은 그리 어렵지 않습니다. 우선 <a href="https://developers.facebook.com/docs/plugins/comments/#configurator" target="_blank" rel="noopener">페이스북 개발자 소셜 플러그인 패아자</a>내의 “댓글 플러그인 코드 생성 도구”를 통해 쉽게 코드를 얻어올 수 있습니다. <code>url</code>항목은 어차피 Liquid태그로 수정을 해야하니 대충 넣고, <code>너비</code>는 Responsive한 웹을 위해 100%, <code>게시물</code> 수는 입맛에 맞게 넣습니다. 저는 default로 되어 있는 ‘5’를 사용했습니다. 3개의 항목을 채우고 해당 서식 바로 아래 있는 <code>코드받기</code>를 통해 두개의 코드를 받아옵니다.</p><figure class="highlight"><br><br>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">“fb-root”</span><span class="nt">&gt;&lt;/div&gt;</span><br>    <span class="nt">&lt;script&gt;</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="nx">s</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span> <span class="p">{</span><br>      <span class="kd">var</span> <span class="nx">js</span><span class="p">,</span> <span class="nx">fjs</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="nx">s</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span><br>      <span class="k">if</span> <span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">id</span><span class="p">))</span> <span class="k">return</span><span class="p">;</span><br>      <span class="nx">js</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span> <span class="nx">js</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="nx">id</span><span class="p">;</span><br>      <span class="nx">js</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s2">“//connect.facebook.net/ko_KR/sdk.js#xfbml=1&amp;version=v2.8”</span><span class="p">;</span><br>      <span class="nx">fjs</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">js</span><span class="p">,</span> <span class="nx">fjs</span><span class="p">);</span><br>    <span class="p">}(</span><span class="nb">document</span><span class="p">,</span> <span class="s1">‘script’</span><span class="p">,</span> <span class="s1">‘facebook-jssdk’</span><span class="p">));</span><span class="nt">&lt;/script&gt;</span>`<br><br>    </figure><pre><code>첫번째의 코드는 페이지내의 `&amp;lt;body&amp;gt;`태그 바로 뒤에 붙이라고 가이드가 되어 있습니다. 그렇다면 우리는 `_layout/default.html`의 `&amp;lt;body&amp;gt;`태그 뒤에 바로 붙여줍니다. 그리고 두번째로 주어지는 페이스북 댓글창으로 사용될 코드인데, 댓글은 각 페이지의 주소마다 다르게 보여집니다. 따라서 `data-href`의 값으로 고정주소를 선언하게 되면 블로그내의 모든 포스팅에서 모두 동일한 페이스북 댓글창을 사용하게 됩니다. 따라서 Liquid문법을 이용하여 현재 페이지의 url을 동적으로 생성하고 이렇게 만든 두번째 html코드를 `_include/post.html`에사용하도록 합니다.&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;`&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fb-comments&quot;&lt;/span&gt;      &lt;span class=&quot;na&quot;&gt;data-href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{ <span class="na">site</span><span class="err">.</span><span class="na">url</span> <span class="err">|</span> <span class="na">append:</span> <span class="na">page</span><span class="err">.</span><span class="na">url</span> <span class="err">}}&lt;/span&gt;     &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100%&quot;&lt;/span&gt;      &lt;span class=&quot;na&quot;&gt;data-numposts=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;</span></code></pre><p></p><p>웹에서의 페이스북 소셜플러그인 댓글 기능의 사용은 별도의 App-id가 필요없이 현재 포스트에 대한 url을 해당 <code>data-href</code>에 어떻게 지정할지만 고민을 하면 아주 손쉽게 붙일 수 있습니다.</p><hr><h4 id="TAG-기능"><a href="#TAG-기능" class="headerlink" title="TAG 기능"></a>TAG 기능</h4><p>TBD</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Markdown 형태의 정적인 페이지가 너무 밋밋하고 피드백을 받을 수 있는 영역이 없을 뿐더러 나중에 글이 늘어나면 포스트 관리의 어려움도 걱정되는 터라 몇개의 기능을 추가해보려 합니다.&lt;/p&gt;
&lt;h4 id=&quot;페이스북-소셜플러그인-댓글기능-추가
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[기행문] AWSomeDay 다녀왔습니다.</title>
    <link href="http://www.devpools.kr/2017/03/19/%EA%B8%B0%ED%96%89%EB%AC%B8-awsomeday-%EB%8B%A4%EB%85%80%EC%99%94%EC%8A%B5%EB%8B%88%EB%8B%A4/"/>
    <id>http://www.devpools.kr/2017/03/19/기행문-awsomeday-다녀왔습니다/</id>
    <published>2017-03-19T12:50:00.000Z</published>
    <updated>2017-12-13T09:27:50.979Z</updated>
    
    <content type="html"><![CDATA[<p>어제(2017.03.18)는 저번달에 회사 동료가 소개해 줘서 아무 생각없이 신청했던, AWSomeDay행사에 다녀왔습니다. ( 정작 소개해준 동료는 다른 일이 있다고 참석하지 않았습니다. 항상 이런식… ) AWSomeDay는 세종대학교 광개토관 지하2층에서 열렸습니다. 이 장소는 작년 GoogleIO Extends와 그 외 다른 행사 때문에 몇번 찾아왔던 터라 어렵지 않게 찾아갈 수 있었습니다. 토요일이고 아직 오전 9시도 안된 시각이었는데, 많은 사람들이 학교로 가고있길래 세종대 학생들은 부지런하구나 생각했지만, 대부분 광개토관으로 향하고 있었습니다. 이런 모습을 보니 AWS 행사에 많은 사람들이 관심을 가지고 있다는 것을 알 수 있었습니다.</p><figure class="graf graf--figure"><img src="https://cdn-images-1.medium.com/max/1600/1*EAaOeH-f9hLz8qFMlNpz5Q.png" alt=""><br><br><figcaption class="imageCaption">&lt;AWSomeDay 안내 입간판&gt;</figcaption><br><br></figure><br><figure class="graf graf--figure"><img src="https://cdn-images-1.medium.com/max/1600/1*4DtglNlylwJHTU5xXozM4A.png" alt=""><br><br><figcaption class="imageCaption">&lt;AWSomeDay 등록 데스크&gt;</figcaption><br><br></figure><p>9시 부터 등록시작이라고 했지만, 이미 등록을 시작하고 있었고 몇몇 분들이 파트너사의 홍보 부스를 구경하면서 사은품을 받아가고 있었습니다. ( 저도 역시.. 행사의 꽃은 사은품이니까요. )</p><figure class="graf graf--figure"><img src="https://cdn-images-1.medium.com/max/1600/1*sI0oxjCnRFTGJReeVSSBOw.png" alt=""><br><br><figcaption class="imageCaption">&lt;AWSomeDay에서 받은 사은품&gt;</figcaption><br><br></figure><p>색연필과 응급처치킷, ( 행사의 꽃인 ) 티셔츠를 받았습니다. 보통 반팔을 주시는 데, 특이하게 긴팔 티를 주셨습니다. 그리고 사진에는 없지만, 에코백, 수첩, 아마존 용어집 핸드북, 그리고 엄청나게 커다란 안경 닦는 수건도 받았습니다. ( 위 사진에 있는 마이보틀은 행사 종료후 아마존에서 참가기념으로 나눠준 사은품입니다) 잠시 사은품에 홀렸던 정신을 바로 잡고 행사 등록하고 참가 확인 배지를 받았습니다.</p><figure class="graf graf--figure"><img src="https://cdn-images-1.medium.com/max/1600/1*dxt1g0oWrkIqwxm9IKPvxg.png" alt=""><br><br><figcaption class="imageCaption">&lt;AWSomeDay 배지(참가 확인용)&gt;</figcaption><br><br></figure><p>9시 40분부터 입장이 시작된다고 했지만, 20분 전부터 입구에는 입장하려는 사람들이 줄을 서기 시작했으며, 입장이 시작되고 나서 빠르게 자리가 사라졌습니다. 나중에는 자리가 없어서 서서 계시는 분들도 계셨습니다. 발표장은 많은 참가자를 대상으로 하고 있어서 세군데에 대형 스크린이 설치되어 있었습니다. 주위를 둘러보니 저같이 개발자로 보이는 분 계시고, 대학생으로 보이는 분, 나이 지긋하신 아키텍쳐 또는 사장님으로 보이는 분도 계셨고 아직 많이 어려보이는 중,고등학생으로 보이는 분들도 종종 눈에 띠었습니다.</p><figure class="graf graf--figure"><img src="https://cdn-images-1.medium.com/max/1600/1*XgVAqUXm4Rr9ZXhHMjVQmQ.png" alt=""><br><br><figcaption class="imageCaption">&lt;AWSomeDay 무대&gt;</figcaption><br><br></figure><p>AWSomeDay는 아마존 웹서비스의 다양한 기능과 기본적인 서비스의 사용법을 익히는 수업인 “AWS 기술 에센셜” 과정과 동일한 내용이라는 설명으로 시작했습니다. 물론 참가 인원이 많아서 실습은 진행하지 않고, 강사분과 질의응답을 할 기회가 거의 없기 때문에 위 정규과정과는 차이가 있다고 합니다.</p><p>10시 부터 시작된 오전 세션에서는 AWS를 사용하는 주요 기업의 사례와 AWS의 인프라과 신규 기능을 소개하는 기조연설을 시작으로 아마존의 대표 서비스인 EC2( Elastic Compute Cloud )와 오프젝트 스토리지 서비스인 S3( Simple Storage Service )에 대한 사용법, 기능 및 주의점에 대한 설명을 들었고, 어떻게 사용하면 되고, 과금은 어떤 식으로 이루어지는지에 대해서 자세한 설명이 있었습니다.</p><figure class="graf graf--figure"><img src="https://cdn-images-1.medium.com/max/1600/1*a4Gx1GWdrHV89xtCBN6sGA.png" alt=""><br><br><figcaption class="imageCaption">&lt;점심 도시락 &gt;</figcaption><br><br></figure><p>이후 12시부터 점심시간이었습니다. 세종대학교 주변에 식사할 곳이 마땅치 않은데, AWSomeDay에서는 감사하게도 참가자 전원에게 맛있는 도시락이 제공되었습니다. 다만, 참가자가 많아 이마저도 뒤에 앉으신 분들은 본 도시락으로 드셨습니다.</p><p>한시간의 점심시간이 끝나고 1시부터 블록스토리지 서비스인 EBS( Elastic Block Storage ), 네트워크 구성과 관련된 VPC ( Virtual Private Cloud ), 보안관련 IAM( Identity and Access Management ), NoSql DB인 DynamoDB, 관계형 데이터베이스인 RDS ( Relational Database Service )에 대한 설명이 이어진 후 잠시 휴식시간을 가졌습니다. 각 서비스에 대한 설명이후에는 설명한 것에 대한 시연 영상이 보여져서 설명을 이해하는 데 도움이 되었습니다.</p><p>이후 20분 정도의 휴식시간이 주어졌고, 참가자가 많았기에 간단한 과자와 음료수가 제공되었는데, 순식간에 동이나는 광경을 목격할 수 있었습니다. 미리 사전등록을 받을 때, 인원에 제한을 두었더라면 조금은 덜 혼잡했을텐데, 조금 아쉬웠습니다. 현장등록도 가능한 것으로 보아 참가인원에 제한은 없었던 것으로 보입니다.</p><p>휴식이후 ELB( Elastic Load Balancing ), CloudWatch, Auto Scaling에 대해서 설명을 들었으며, Scale up / down 에 대한 동작 원리, 구현 방법에 대해서 이해할 수 있었습니다. 특히 HA 구성을 할 때, 여러 AZ(가용영역)에 걸쳐서 구성할 때, 어떤 점을 고민해야하는지 설명을 해주셔서 나중 서비스를 구성할 때 도움이 될 것 같습니다. 이후 Trusted Advisor 기능 설명을 들었습니다.</p><p>모든 세션이 끝나고 경품추첨을 마지막으로 기념품인 마이보틀을 받고 모든 행사가 종료되었습니다. 아마존이라는 회사가 클라우드 서비스를 주로 하기 때문에 이런 행사를 통해서 고객을 늘린다는 목적도 있겠지만, 고객들이 본인들의 서비스를 좀 더 잘 알고 더 효율적으로 사용할 수 있도록 (큰 비용을 들여서 ) 스스로 알리고 있다는 점에서 ( 물론 프리티어 사용자 이지만 ) 한 사람의 고객으로써 감사한 마음을 가졌습니다. 지금 서비스를 위해서 사용하는 모 기업의 클라우드와 비교해보면 동일하게 클라우드를 서비스하고 있다고 주장하지만, 내부의 네트워크 구성이나 서비스 구성법을 전혀 알려주지 않고, 심지어 상품안내 조차 없는 것 등 많은 점이 비교되었고, 아마존과 비교해보면 그들이 하는 클라우드 서비스 수준은 IDC를 통해 온프라미스 서버를 구성하는 것과 크게 다르지 않음을 알 수 있었고 진정한 클라우드 서비스는 ( 시작도 다르고 추구하는 방향도 다르겠지만 ) 아직 멀었다고 말해주고 싶습니다.</p><p>집에와서 찾아보니 “AWS 기술 에센셜” 교육은 1일과정에 44만원이라 하는 과정이라 개인이 듣기에는 부담되는 과정이기에 이번 행사는 아마존 웹서비스를 처음 사용하거나, 저처럼 (몰라서) 단순히 프리티어 EC2정도만 사용하는 사람에게는 하루 정도를 투자할 가치가 충분하다고 생각되는 행사였습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;어제(2017.03.18)는 저번달에 회사 동료가 소개해 줘서 아무 생각없이 신청했던, AWSomeDay행사에 다녀왔습니다. ( 정작 소개해준 동료는 다른 일이 있다고 참석하지 않았습니다. 항상 이런식… ) AWSomeDay는 세종대학교 광개토관
      
    
    </summary>
    
      <category term="Meetup" scheme="http://www.devpools.kr/categories/Meetup/"/>
    
    
      <category term="AWSomeDayKR" scheme="http://www.devpools.kr/tags/AWSomeDayKR/"/>
    
  </entry>
  
  <entry>
    <title>패턴인식 개요</title>
    <link href="http://www.devpools.kr/2017/03/18/%ED%8C%A8%ED%84%B4%EC%9D%B8%EC%8B%9D-%EA%B0%9C%EC%9A%94/"/>
    <id>http://www.devpools.kr/2017/03/18/패턴인식-개요/</id>
    <published>2017-03-18T05:56:34.000Z</published>
    <updated>2017-12-13T09:50:26.678Z</updated>
    
    <content type="html"><![CDATA[<h3 id="패턴인식-개요"><a href="#패턴인식-개요" class="headerlink" title="패턴인식 개요"></a><a href="http://keen.devpools.kr/2017/03/18/%5B2017-03-18%2014:56:34%5D%E1%84%91%E1%85%A2%E1%84%90%E1%85%A5%E1%86%AB%E1%84%8B%E1%85%B5%E1%86%AB%E1%84%89%E1%85%B5%E1%86%A8%20%E1%84%80%E1%85%A2%E1%84%8B%E1%85%AD/#%ED%8C%A8%ED%84%B4%EC%9D%B8%EC%8B%9D-%EA%B0%9C%EC%9A%94" title="패턴인식 개요" target="_blank" rel="noopener"></a>패턴인식 개요</h3><h3 id="패턴-인식"><a href="#패턴-인식" class="headerlink" title="패턴 인식"></a><a href="http://keen.devpools.kr/2017/03/18/%5B2017-03-18%2014:56:34%5D%E1%84%91%E1%85%A2%E1%84%90%E1%85%A5%E1%86%AB%E1%84%8B%E1%85%B5%E1%86%AB%E1%84%89%E1%85%B5%E1%86%A8%20%E1%84%80%E1%85%A2%E1%84%8B%E1%85%AD/#%ED%8C%A8%ED%84%B4-%EC%9D%B8%EC%8B%9D" title="패턴 인식" target="_blank" rel="noopener"></a>패턴 인식</h3><p>주어진 데이터의 집합에 대해 입력값을 바탕으로 하는 Classification. MNIST 처럼 이미지에서 숫자를 도출하는 것도 좋은 예</p><ul><li>구조적 방법 : 1은 하나의 직선에 가깝고 8은 원 두개.</li><li>템플릿 매칭 : 패턴의 원형을 저장해 두고 데이타간의 거리를 계산</li><li>기계학습</li></ul><h4 id="패턴-인식과-관련된-개념"><a href="#패턴-인식과-관련된-개념" class="headerlink" title="패턴 인식과 관련된 개념"></a><a href="http://keen.devpools.kr/2017/03/18/%5B2017-03-18%2014:56:34%5D%E1%84%91%E1%85%A2%E1%84%90%E1%85%A5%E1%86%AB%E1%84%8B%E1%85%B5%E1%86%AB%E1%84%89%E1%85%B5%E1%86%A8%20%E1%84%80%E1%85%A2%E1%84%8B%E1%85%AD/#%ED%8C%A8%ED%84%B4-%EC%9D%B8%EC%8B%9D%EA%B3%BC-%EA%B4%80%EB%A0%A8%EB%90%9C-%EA%B0%9C%EB%85%90" title="패턴 인식과 관련된 개념" target="_blank" rel="noopener"></a>패턴 인식과 관련된 개념</h4><h4 id="1-분류와-군집화"><a href="#1-분류와-군집화" class="headerlink" title="1. 분류와 군집화"></a><a href="http://keen.devpools.kr/2017/03/18/%5B2017-03-18%2014:56:34%5D%E1%84%91%E1%85%A2%E1%84%90%E1%85%A5%E1%86%AB%E1%84%8B%E1%85%B5%E1%86%AB%E1%84%89%E1%85%B5%E1%86%A8%20%E1%84%80%E1%85%A2%E1%84%8B%E1%85%AD/#1-%EB%B6%84%EB%A5%98%EC%99%80-%EA%B5%B0%EC%A7%91%ED%99%94" title="1\. 분류와 군집화" target="_blank" rel="noopener"></a>1. 분류와 군집화</h4><p><strong>분류( Classification ) : MNIST로 숫자를 맞추는 형태</strong></p><ul><li>베이지안 분류기, K 근접 이웃, 다층 퍼셉트(MLP), 서포트 벡터 머신</li><li>지도학습</li></ul><p><strong>군집화( Clustering ) : 특성 고객층을 하나의 기준으로 분류하기 보다는 여러가지 기준이지만 뭉뚱그리는 것</strong></p><ul><li>K 편균 클러스터링, 계층적 군집화, 자기조직화 특징맵(SOM)</li><li>비지도 학습</li></ul><h4 id="2-데이터와-데이터-분포"><a href="#2-데이터와-데이터-분포" class="headerlink" title="2. 데이터와 데이터 분포"></a><a href="http://keen.devpools.kr/2017/03/18/%5B2017-03-18%2014:56:34%5D%E1%84%91%E1%85%A2%E1%84%90%E1%85%A5%E1%86%AB%E1%84%8B%E1%85%B5%E1%86%AB%E1%84%89%E1%85%B5%E1%86%A8%20%E1%84%80%E1%85%A2%E1%84%8B%E1%85%AD/#2-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%99%80-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B6%84%ED%8F%AC" title="2\. 데이터와 데이터 분포" target="_blank" rel="noopener"></a>2. 데이터와 데이터 분포</h4><blockquote><p>여러가지 데이터들은 결국 컴퓨터에서 다루어질 수 있게 수치로 표현 되어야 한다. 이 숫자들을 1차원으로 나열하면 벡터, 차원이 높아지면 행렬이 되는데 이런 모임을 Tensorflow에서는 tensor 라고 지칭하고 딥러닝의 과정이 이 tensor가 움직이면서 나타나서 Tensorflow 를 이루게 된다.</p></blockquote><ul><li>표본집합 추출</li><li>특징추출</li><li>분류와 결정경계</li></ul><h4 id="분류율과-오차"><a href="#분류율과-오차" class="headerlink" title="분류율과 오차"></a><a href="http://keen.devpools.kr/2017/03/18/%5B2017-03-18%2014:56:34%5D%E1%84%91%E1%85%A2%E1%84%90%E1%85%A5%E1%86%AB%E1%84%8B%E1%85%B5%E1%86%AB%E1%84%89%E1%85%B5%E1%86%A8%20%E1%84%80%E1%85%A2%E1%84%8B%E1%85%AD/#%EB%B6%84%EB%A5%98%EC%9C%A8%EA%B3%BC-%EC%98%A4%EC%B0%A8" title="분류율과 오차" target="_blank" rel="noopener"></a>분류율과 오차</h4><p>학습 오차 : 학습데이타에 대하여 분류 오차를 계산한 것</p><p>테스트 오차 : 실제 데이타의 오차</p><p>일반화 오차 : 확률분포함수를 이용한 분포에 따른 평균 오차값. 테스트 오차가 절대값 수치 미적용에 따른 왜곡을 가질 수 있으므로 사용한다</p><p>교차검증법을 통해 오차값을 얻어내기도 한다</p><h4 id="3-과다-적합-overfitting"><a href="#3-과다-적합-overfitting" class="headerlink" title="3. 과다 적합(overfitting)"></a><a href="http://keen.devpools.kr/2017/03/18/%5B2017-03-18%2014:56:34%5D%E1%84%91%E1%85%A2%E1%84%90%E1%85%A5%E1%86%AB%E1%84%8B%E1%85%B5%E1%86%AB%E1%84%89%E1%85%B5%E1%86%A8%20%E1%84%80%E1%85%A2%E1%84%8B%E1%85%AD/#3-%EA%B3%BC%EB%8B%A4-%EC%A0%81%ED%95%A9-overfitting" title="3\. 과다 적합(overfitting)" target="_blank" rel="noopener"></a>3. 과다 적합(overfitting)</h4><ul><li>Classifier가 학습데이타에 대해서만 지나치게 적합한 형태로 결정경계를 형성하는 경우. train데이타의 범주를 벗어나는 경우는 제대로 분류하지 못하는 경우.</li><li><a href="http://sanghyukchun.github.io/59/" target="_blank" rel="noopener">Machine Learning 스터디 (3) Overfitting</a></li></ul><p><img src="https://cdn-images-1.medium.com/max/1600/0*G9gNynok0IWGFWsX." alt=""></p><h4 id="4-활용분야"><a href="#4-활용분야" class="headerlink" title="4. 활용분야"></a><a href="http://keen.devpools.kr/2017/03/18/%5B2017-03-18%2014:56:34%5D%E1%84%91%E1%85%A2%E1%84%90%E1%85%A5%E1%86%AB%E1%84%8B%E1%85%B5%E1%86%AB%E1%84%89%E1%85%B5%E1%86%A8%20%E1%84%80%E1%85%A2%E1%84%8B%E1%85%AD/#4-%ED%99%9C%EC%9A%A9%EB%B6%84%EC%95%BC" title="4\. 활용분야" target="_blank" rel="noopener"></a>4. 활용분야</h4><ul><li>문자 인식</li><li>생체인식</li><li>금융데이터</li><li>생물정보</li><li>뇌 신호 처리</li><li>영상처리</li><li>뇌 신호 처리</li></ul><p>By <a href="https://medium.com/@keendev" target="_blank" rel="noopener">Keen Dev</a> on <a href="https://medium.com/p/81a1fd6ca86a" target="_blank" rel="noopener">March 18, 2017</a>.</p><p>Exported from <a href="https://medium.com/" target="_blank" rel="noopener">Medium</a> on May 31, 2017.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;패턴인식-개요&quot;&gt;&lt;a href=&quot;#패턴인식-개요&quot; class=&quot;headerlink&quot; title=&quot;패턴인식 개요&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://keen.devpools.kr/2017/03/18/%5B2017-03-18%2014:56
      
    
    </summary>
    
      <category term="github, github-trend, tech-trend" scheme="http://www.devpools.kr/categories/github-github-trend-tech-trend/"/>
    
    
  </entry>
  
  <entry>
    <title>jekyll로 Github Page 만들기</title>
    <link href="http://www.devpools.kr/2017/03/16/jekyll%EB%A1%9C-Github-Page-%EB%A7%8C%EB%93%A4%EA%B8%B0/"/>
    <id>http://www.devpools.kr/2017/03/16/jekyll로-Github-Page-만들기/</id>
    <published>2017-03-16T00:00:00.000Z</published>
    <updated>2017-12-13T10:31:34.825Z</updated>
    
    <content type="html"><![CDATA[<p>Markdown문서로 문서를 작성하고, 이를 자동으로 정적인 페이지로 변환시켜주는 <a href="https://jekyllrb-ko.github.io/" target="_blank" rel="noopener">Jekyll</a>을 사용하여 손쉬운 블로그를 만들어 보도록 합시다. 이에 Gitbub Page는 Jekyll을 통해 서비스가 가능한 최고의 선택이 됩니다. Jekyll과 Github Page의 조합은 많은이들에게 사용된지 상당히 오래되었으므로, 본 포스팅에서는 현재의 페이지가 어떤 과정으로 생성되었는지에 대한 과정을 서술합니다.</p><p><a href="http://blog.saltfactory.net/upgrade-github-pages-dependency-versions/" target="_blank" rel="noopener">송성광님의 포스트</a>를 참고하여 초기에 세팅을 진행했습니다. Ruby를 베이스로 한 Jekyll을 사용하기 위해서는 다양한 설정이 필요한데, 위의 포스팅은 초보자도 어려움 없이 맥에서 Jekyll환경을 세팅하기 위한 아주 자세한 설명이 담겨있습니다. 작성글대로 한다면 큰 어려움 없이 Github Page에 글을 작성하기 위한 준비를 하실 수 있을 것입니다.</p><p>Jekyll은 전세계 개발자들이 미리 만들어 놓은 좋은 테마를 무료(또는 유료?)로 사용이 가능합니다. <a href="http://themes.jekyllrc.org/" target="_blank" rel="noopener">themes.jekyllrc.org</a>, <a href="http://jekyllthemes.org/" target="_blank" rel="noopener">jekyllthemes.org</a> 등을 통하여 본인의 취향에 맞는 테마를 선택하도록 합시다. 글쓴이는 <a href="http://steinvc.github.io/holo-alfa/" target="_blank" rel="noopener">holo-alfa</a>라는 단순하고 깔끔한 테마를 선택하여 진행을 하였습니다. <code>fork</code>를 떠서 본인의 repository에 옮긴뒤 약간의 커스터마이징을 가미하도록 합시다.</p><h4 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h4><p>Jekyll내의 모든 설정은 <code>_config.yml</code>을 통해서 관리합니다. 선택한 테마에서 데모를 위해 설정되어 있는 내용을 이 블로그를 위해 수정을 하도록 합시다.</p><figure class="highlight"><br><br>    <span class="s">name</span><span class="pi">:</span> <span class="s">배움과 경험을 정리하는 삶</span><br>    <span class="s">author</span><span class="pi">:</span><br>      <span class="s">name</span><span class="pi">:</span> <span class="s">Hongsik Alex Lee</span><br>      <span class="s">email</span><span class="pi">:</span> <span class="s">labyrins@gmail.com</span><br>    <span class="s">url</span><span class="pi">:</span> <span class="s"><a href="http://labyrins.github.io" target="_blank" rel="noopener">http://labyrins.github.io</a></span><br>    <span class="s">baseurl</span><span class="pi">:</span> <span class="s2">“</span><span class="s">“</span><br><br>    <span class="c1"># Footer에 넣을 소셜아이콘들을 위해 설정</span><br>    <span class="s">facebook</span><span class="pi">:</span> <span class="s2">“</span><span class="s"><a href="https://www.facebook.com/hongsik.lee" target="_blank" rel="noopener">https://www.facebook.com/hongsik.lee</a>“</span><br>    <span class="s">github</span><span class="pi">:</span> <span class="s2">“</span><span class="s"><a href="https://github.com/Labyrins" target="_blank" rel="noopener">https://github.com/Labyrins</a>“</span>`<br><br>    </figure><pre><code>#### CSS/Font 추가영문으로 쓴다면 테마에서 지정한 font로도 큰 문제가 없지만 한글로 작성할 블로그이니 font를 추가하고, 소셜 아이콘으로 쓸 이미지가 담긴 font-awesome을 추가한뒤 `style.css`를 수정하여 적용합니다.&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;`&lt;span class=&quot;c&quot;&gt;&amp;lt;!--header.html--&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ site.baseurl }}/css/font-awesome.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://fonts.googleapis.com/earlyaccess/jejugothic.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://fonts.googleapis.com/earlyaccess/nanumgothic.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;`&lt;/pre&gt;&lt;/figure&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;`&lt;span class=&quot;c&quot;&gt;/* style.css */&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;/* 본문 텍스트로 쓰일 font는 클래스 수정 */&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&apos;Nanum Gothic&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;/* footer용 font로 쓰일 클래스는 신규추가 */&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.footer-text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&apos;Jeju Gothic&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;`&lt;/pre&gt;&lt;/figure&gt;#### Footer링크를 위한 소셜아이콘의 추가와 간단한 문구가 담긴 Footer를 위해 `footer.html`를 아래와 같이 수정합니다.&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;`&lt;span class=&quot;nt&quot;&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;inner&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;footer-text&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;2017, Hongsik Alex Lee&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ site.facebook }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;                &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fa-stack fa-sm&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;i&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fa fa-circle fa-stack-2x&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;i&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fa fa-facebook fa-stack-1x fa-inverse&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ site.github }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;                &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fa-stack fa-sm&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;i&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fa fa-circle fa-stack-2x&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;i&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fa fa-github fa-stack-1x fa-inverse&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;`&lt;/pre&gt;&lt;/figure&gt;#### jekyll의 빌드와 구동 그리고 draft모드포스트의 작성은 `_posts` 디렉토리에 `YYYY-MM-DD-Title.md`형식의 이름을 가진 markdown 파일을 작성함으로써 이루어집니다. 해당 파일이 `_posts`로 들어오면 Jekyll에 의해 정적인 웹페이지로 변환되며, 이는 `_site`에 날짜별 디렉토리로 작성되어 있음을 확인할 수 있습니다. 우선, 우리가 선택한 테마에는 템플릿용으로 `_posts`에 md파일이 있으니 삭제하고 빌드를 해줍니다.&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;`jekyll build`&lt;/pre&gt;&lt;/div&gt;빌드를 진행하면 현재 `_posts`디렉토리에 있는 md파일을 기준으로 `_site`내의 정적파일이 생성됩니다. 이제 Jekyll을 구동하여 작성한 페이지를 확인하도록 합시다. 기동이 완료되면 `localhost:4000`을 통해 확인가능합니다.&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;`jekyll serve`&lt;/pre&gt;&lt;/div&gt;한번에 글을 작성하기 어려운 분들을 위한 Draft모드도 있습니다. 프로젝트 루트에 `_drafts`를 생성한뒤 임의의 md파일을 넣고 draft모드로 서버를 구동하면 `_draft`내의 md파일이 현재의 날짜로 세팅이 되어 페이지를 통해 확인이 가능할 수 있습니다. Draft모드로의 서버구동은 아래와 같습니다.&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;`jekyll serve --drafts`&lt;/pre&gt;&lt;/div&gt;* * *이로써 정적인 포스트를 작성하기 위한 모든 작업을 마쳤습니다. Jekyll에서의 포스트 작성은 기본적으로 Markdown의 문법을 사용하지만 Liquid를 사용한 확장표현이 가능합니다. 아래에는 Markdown의 기본문법을 벗어난 좀더 다양한 방법을 통한 사용예제를 소개합니다.#### code snippet아래와 같이 liquid에서 제공하는 `hilight`과 `endhilight`으로 코드를 감싸 표기할 수 있습니다.&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;`&lt;span class=&quot;nt&quot;&gt;nav&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;.72&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;nav&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.current&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;.72&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.subtitle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;`&lt;/pre&gt;&lt;/figure&gt;#### 타이틀 이미지 설정페이지 상단에 멋진 이미지를 삽입하여 페이지의 품격을 높이기 위해서는 프로젝트 루트의 `/img/covers/`디렉토리 안에 원하는 이미지를 넣은뒤 Markdown문서 상단 페이지 속성에 `cover-image : 이미지 파일명`을 선언합니다. 본 페이지 상단과 같이, 삽입된 이미지는 자동으로 하단으로 갈수록 이미지가 fadeout 됩니다.#### 이미지 삽입모든 이미지는 `img`디렉토리에서 관리합니다. 여타의 Markdown문법과 같이 사용하고, URL선언을 현재 프로젝트 내의 파일로 지정하면 손쉽게 이미지를 삽입할 수 있습니다. `site.baseurl`은 `_config.yml`에 선언되어 있음을 확인합시다. 출처를 명시할 때는 `&amp;lt;small&amp;gt;&amp;lt;/small&amp;gt;`를 사용합니다.&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;`![Forest]({{ site.baseurl }}/img/howtoyoutubeimport.png)`&lt;/pre&gt;&lt;/div&gt;#### 인용문 삽입사용하려는 인용문을 `&amp;gt;`로 감싸 표기합니다. 이미지의 삽입과 마찬가지고 인용절 뒤에 `&amp;lt;small&amp;gt;&amp;lt;/small&amp;gt;`을 통해 출처 등을 남길 수 있습니다.&gt; It’ll be nipper heaps trent from punchy oldies. Trent from punchy no dramas when flat out like a tucker-bag. He hasn’t got a piker flamin frog in a sock.</code></pre><blockquote><pre><code>&lt;small&gt;— [Bogan Ipsum](http://boganipsum.com/)&lt;/small&gt;</code></pre></blockquote><pre><code>#### Youtube 영상 삽입Youtube영상을 삽입하기 위한 [FitVids.js](http://fitvidsjs.com/)가 추가되어 있습니다. `iframe`을 사용하여 삽입을 합니다. 아래와 같이 유튜브 영상페이지로부터 삽입할 소스코드는 손쉽게 구할 수 있습니다.![Forest](http://labyrins.github.io/img/howtoyoutubeimport.png)&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/i1n_1jrUEjU&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;#### Tables 삽입Table의 삽입은 [Github-Flavored-Markdown](https://help.github.com/articles/github-flavored-markdown/#tables)에 기반한 Markdown문법을 사용합니다. 자세한 문법은 위의 링크를 참고바랍니다.&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;`| Left-Aligned  | Center Aligned  | Right Aligned || :------------ |:---------------:| -----:|| col 3 is      | some wordy text | $1600 || col 2 is      | centered        |   $12 || zebra stripes | are neat        |    $1 |</code></pre><p></p><table><br>  <thead><br>    <tr><br>      <th style="text-align: left">Left-Aligned</th><br>      <th style="text-align: center">Center Aligned</th><br>      <th style="text-align: right">Right Aligned</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <td style="text-align: left">col 3 is</td><br>      <td style="text-align: center">some wordy text</td><br>      <td style="text-align: right">$1600</td><br>    </tr><br>    <tr><br>      <td style="text-align: left">col 2 is</td><br>      <td style="text-align: center">centered</td><br>      <td style="text-align: right">$12</td><br>    </tr><br>    <tr><br>      <td style="text-align: left">zebra stripes</td><br>      <td style="text-align: center">are neat</td><br>      <td style="text-align: right">$1</td><br>    </tr><br>  </tbody><br></table><p>이로써 페이지의 Jekyll - Github Page를 통한 블로그 준비와 포스트 작성에 관한 모든 것이 정리 되었습니다. Tag기능과 SEO를 위한 설정은 추후에 세팅을 하도록 하고 이제부터는 지식을 쌓기만 하면 됩니다. 강철의 근성이 공부를 하는 여러분들에게 가호를 내리기 바라며..</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Markdown문서로 문서를 작성하고, 이를 자동으로 정적인 페이지로 변환시켜주는 &lt;a href=&quot;https://jekyllrb-ko.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Jekyll&lt;/a&gt;을 사용하여 손쉬
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Lottie로 개발자와 친해지기</title>
    <link href="http://www.devpools.kr/2017/03/08/lottie%EB%A1%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%99%80-%EC%B9%9C%ED%95%B4%EC%A7%80%EA%B8%B0/"/>
    <id>http://www.devpools.kr/2017/03/08/lottie로-개발자와-친해지기/</id>
    <published>2017-03-08T00:50:55.000Z</published>
    <updated>2017-12-13T10:31:53.057Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://airbnb.design/lottie/static/images/lottie.png" alt=""></p><p>‘마이크로 인터랙션’이라는 단어가 2015년부터 UX 디자인에서 조명받기 시작하면서<br>(마이크로 인터랙션의 효과에 대한 글은 <a href="https://visualhierarchy.co/blog/micro-interactions-what-they-are-how-they-work-and-best-practices/" target="_blank" rel="noopener">이 곳을 참조</a>)<br>우리는 Behance나 Dribbble에서 아름다운 UI 모션 GIF들을 어렵지 않게 발견할 수 있다.</p><p>&nbsp;</p><p>[caption id=”” align=”alignnone” width=”800”]<img src="https://t1.daumcdn.net/thumb/R1280x0/?fname=http://t1.daumcdn.net/brunch/service/user/1d4s/image/m9-mFChtXzv8T0FExV1Ou2PD8ac.gif" alt="항공표와 좌석을 예매하는 시스템 이미지"> 출처 : <a href="https://dribbble.com/eleken[/caption" target="_blank" rel="noopener">https://dribbble.com/eleken[/caption</a>]</p><p> 그러나 실제 프로젝트에 이런 것들을 적용하려고 하면 다음과 같은 장벽에 부딪치게 된다.</p><h3 id="1-디자이너가-원하는-모션을-만들-줄-모른다"><a href="#1-디자이너가-원하는-모션을-만들-줄-모른다" class="headerlink" title=" 1. 디자이너가 원하는 모션을 만들 줄 모른다. "></a><strong> 1. 디자이너가 원하는 모션을 만들 줄 모른다. </strong></h3><p>디자이너가 원하는 모션을 만들기 위해서는 AfterEffect와 같은 전문 모션 툴을 사용할 줄 알아야 하는데,<br>제대로 쓰기 위해 상당히 많은 배움이 요구된다. 그렇기 때문에 본인이 원하는 모션과 가장 유사한 레퍼런스를 찾아 개발자에게 “비슷하게 해주세요~” 해야 하는데.. 개발자들은 멘붕이 올 수밖에 없다.</p><p>&nbsp;</p><p><img src="https://t1.daumcdn.net/thumb/R1280x0/?fname=http://t1.daumcdn.net/brunch/service/user/1d4s/image/9lA13_r-XDmNT7Mq4cvw4hjcUPw.gif" alt="김정은 도리도리하는 모습"></p><p>위의 이미지를 개발자들에게 들이 댔을때 표정</p><h3 id="2-개발자는-디자이너가-원하는-모션이-무엇인지-정확히-모른다"><a href="#2-개발자는-디자이너가-원하는-모션이-무엇인지-정확히-모른다" class="headerlink" title=" 2. 개발자는 디자이너가 원하는 모션이 무엇인지 정확히 모른다. "></a><strong> 2. 개발자는 디자이너가 원하는 모션이 무엇인지 정확히 모른다. </strong></h3><p>마침 디자이너가 AE를 다룰 줄 알아서 개발자에게 GIF 파일을 만들어줬다고 하자. 개발자들은 이미지만 보고 ‘알아서’ 그 모션을 구현해야 한다. 위의 이미지를 예로 들면 리스트가 펼쳐질 때의 시간, 크기, 투명도를 스스로 체크하거나 디자이너에게 수치를 받아서 모든 액션을 다시 구현해야 하는 ‘낭비’가 발생하게 되는 것이다.</p><p>대안으로 디자이너가 만들어준 GIF 파일을 코드에 직접 삽입하는 방법이 있는데,  <a href="https://medium.com/@soeunlee/web%EC%97%90%EC%84%9C-png-gif-jpeg-svg-%EC%A4%91-%EC%96%B4%EB%96%A4-%EA%B2%83%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%84%EA%B9%8C%EC%9A%94-6937300e776e#.s9y9amz6b" target="_blank" rel="noopener">GIF는 태생적으로 한계를 가진 이미지 포맷</a>이고 용량, 디바이스 해상도 대응 이슈 등 극복해야 할 단점들이 많다.</p><h3 id="3-모두가-힘들어지는데-굳이-해야-하나"><a href="#3-모두가-힘들어지는데-굳이-해야-하나" class="headerlink" title=" 3. 모두가 힘들어지는데 굳이 해야 하나?"></a><strong> 3. 모두가 힘들어지는데 굳이 해야 하나?</strong></h3><p>이런 이유들로 시간과 비용을 따져보면 UI에 모션을 넣는 애니메이션 작업은 팀 전체 관점에서 결코 효율적인 작업은 아니다.</p><p>특히 팀 속도와 낭비제거를 중점으로 삼는 Agile 프로세스 내 User Story 기반 작업에서 우선순위가 낮을 수밖에 없다. 결국 디자이너가 원하는 마이크로 인터랙션들을 넣기 위해서는 디자이너가 만든 이미지와 모션을 다시 개발자가 코드화 하는 낭비를 줄일 수 있는 방법이 있어야 한다는 것이다.</p><h3 id="4-Airbnb의-‘Lottie’"><a href="#4-Airbnb의-‘Lottie’" class="headerlink" title=" 4. Airbnb의 ‘Lottie’"></a><strong> 4. Airbnb의 ‘Lottie’</strong></h3><p> 그런 가려운 부분을 긁어주기 위해 출시된 라이브러리가 <a href="https://github.com/airbnb/lottie-react-native" target="_blank" rel="noopener">Airbnb의 Lottie</a>라는 것이다. 자세한 내용은 <a href="http://devpools.kr/2017/02/09/%EA%B9%83%ED%97%99%ED%8A%B8%EB%A0%8C%EB%93%9C-lottie/" target="_blank" rel="noopener">이전 글을 참조</a>해보자.</p><p>요컨대, 디자이너가 AE로 만든 모션을 바로 JSON파일로 Export 하고 그것을 다시 개발 코드에 삽입할 수 있게 된다는 것이다. 설치와 사용 방법은 <a href="https://github.com/bodymovin/bodymovin" target="_blank" rel="noopener">Github</a>에 상세히 써져 있으니 참고하도록 하자</p><h3 id="5-Lottie의-적용"><a href="#5-Lottie의-적용" class="headerlink" title=" 5. Lottie의 적용"></a><strong> 5. Lottie의 적용</strong></h3><p>마침 지금 살짝 도와주고 있는 토이 프로젝트가 있어서 간단한 스플래시 화면을 위한 AE 프로젝트를 만들어 개발자에게 전달해보았다.</p><p>[caption id=”” align=”alignnone” width=”288”]<img src="https://t1.daumcdn.net/thumb/R1280x0/?fname=http://t1.daumcdn.net/brunch/service/user/1d4s/image/-1XTNiwfPpI14qPudZ9sVwVgc8U.gif" alt="아저씨가 웃고 있는 모바일 앱의 스플래시 화면"> 일 안하고 놀고 있다는 것을 들키고 말았다..[/caption]</p><p>하지만 실제 코드에 삽입했을 때는 프레임 드랍 현상이 발생하며, AE의 Repeater로 만든 애니메이션은 반영되지 않았다. 관련하여 Github에 <a href="https://github.com/bodymovin/bodymovin/issues/209" target="_blank" rel="noopener">Repeater</a>, <a href="https://github.com/airbnb/lottie-android/issues/151" target="_blank" rel="noopener">Frame Drop </a>에 대한 이슈가 등록되어 있다. 결론적으로 무작정 시도해봤었는데 현재 Bodymovin에서 Json 파일로 추출할 수 있는 AE 플러그인에는 한계가 있으며, 버전업을 통해 그 범위를 차차 늘려가고 있는 중인 것으로 보인다. 현재 이슈로 등록되어있는 내용을 정리하면 다음과 같다.</p><p>1. <a href="https://github.com/bodymovin/bodymovin/issues/295" target="_blank" rel="noopener">Edge 브라우저에서 Luma와 Alpha 마스크가 적용되지 않는 현상</a></p><p>2. <a href="https://github.com/bodymovin/bodymovin/issues/287" target="_blank" rel="noopener">Trim path로 그렸을 때 정확한 위치를 가져오지 못하는 현상</a></p><p>3. <a href="https://github.com/bodymovin/bodymovin/issues/283" target="_blank" rel="noopener">Blur 적용 문제</a></p><p>4. <a href="https://github.com/bodymovin/bodymovin/issues/260" target="_blank" rel="noopener">3D 카메라 적용 버그</a></p><p>5. <a href="https://github.com/bodymovin/bodymovin/issues/215" target="_blank" rel="noopener">Glow effect 미지원</a></p><p>6. <a href="https://github.com/airbnb/lottie-ios" target="_blank" rel="noopener">Repeater Effect 미지원</a> (곧 지원 예정)</p><p>다른 이슈들도 상당히 많이 등록되어 있고 활발한 토론이 이뤄지고 있지만 코드 차원의 문제가 아니라 AE 자체 이펙트를 지원하지 않는 것은 거의 위와 같은 마스크와 스트로크(<span style="text-decoration: line-through;">사실 이게 핵심이긴 한데..</span>) 유형이었다.</p><p>그럼에도 불구하고, 애니메이션을 만들고 개발자에게 전달하여 구현까지 상당히 빠른 시간 내에 적용해볼 수 있었다. (30분도 안 걸린 것 같다…!!) 이전에 영상파일로 전달하여 구현한 파일을 몇 번이나 확인하며 수정과정을 거쳤던 예전과 비교해 볼 때, json 파일만 전달하면 되기 때문에 나는 더 이상 애니메이션에 대해 개발자랑 토론할 필요도 없었다. (내가 만든 애니메이션을 코드로 이해해야 하는 것도 부담이었다.)</p><p>[caption id=”” align=”alignnone” width=”250”]<img src="https://t1.daumcdn.net/thumb/R1280x0/?fname=http://t1.daumcdn.net/brunch/service/user/1d4s/image/1jikcKe6UrMh-bOm41bErpIqMV8.gif" alt="낄낄 웃고있는 외국배우"> 개발자에게 결과물을 받아보는 나의 모습[/caption]</p><h3 id="결론"><a href="#결론" class="headerlink" title="결론 "></a><strong>결론 </strong></h3><p>위에 언급한 대로 디자이너는 사용자에게 더 많은 것을 보여주고 싶어 한다. 하지만 실제 프로젝트에서는 시간과 인력으로 대표되는 한정된 자원을 가지고 있기 때문에 내가 원하는 애니메이션까지 구현하는 것은 거의 불가능에 가까웠었다. 그러나 이렇게 효율적으로 애니메이션을 구현할 수 있는 라이브러리가 등장함에 따라 이제 앞으로는 Dribbble이나 Behance에서 볼 수 있는 화려한 애니메이션들이 실제 제품에 적용되어 출시될 수 있는 길이 열린 것 같다.</p><p>흔히 시간과 인력으로 대표되는 한정된 자원이라는 관점에서 이렇게 효율적으로 작업할 수 있는 방법이 지속적으로 개선되고 있다는 것은 디자이너로서 또 한 번 반길 일이 아닐 수 없으며, 고이 책장에 모셔<span style="text-decoration: line-through;">(쳐 박아)</span> 두었던, 모션그래픽 관련 책들을 다시 들춰봐야 할 때가 아닌가 싶다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://airbnb.design/lottie/static/images/lottie.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;‘마이크로 인터랙션’이라는 단어가 2015년부터 UX 디자인에서 조명받기 시작하면서&lt;br&gt;(마이크로 인터
      
    
    </summary>
    
      <category term="UX/UI" scheme="http://www.devpools.kr/categories/UX-UI/"/>
    
    
      <category term="lottie" scheme="http://www.devpools.kr/tags/lottie/"/>
    
  </entry>
  
  <entry>
    <title>ES2015 리팩토링 - 1. 몸풀기</title>
    <link href="http://www.devpools.kr/2017/03/06/ES2015%20%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81-1.%EB%AA%B8%ED%92%80%EA%B8%B0/"/>
    <id>http://www.devpools.kr/2017/03/06/ES2015 리팩토링-1.몸풀기/</id>
    <published>2017-03-06T08:19:24.000Z</published>
    <updated>2018-01-07T06:42:35.334Z</updated>
    
    <content type="html"><![CDATA[<p>ES2015는 프론트엔드 개발자들에게 많은 화두를 던졌고 아주 진지하게 자바스크립트(JavaScript)가 세상을 집어삼킬 거라는 포부를 던지고 있다. 가지고 있던 언어적인 난해함을 벗어던지고 더 많은 개발자들이 좀 더 손쉽게 Java와 C 처럼 개발할 수 있도록 많은 개념들을 제시했다. 여타 다른 객체언어처럼 클래스(class)를 도입하고 화살(arrow)함수를 도입한게 그 좋은 예라고 볼 수 있을 것이다.</p><p>&nbsp;</p><p>지금부터 시작하는 시리즈는  ES2015가 가고자 하는 방향에 맞춰 예전에 만들었던 많은 프로젝트들을 리팩토링 해 볼 것이다. 순서는 아마도 다음과 같이 진행이 될 것이다. (중간에 순서와 목차는 바뀔 수 있다)</p><ol><li>몸풀기</li><li>빠레꽁(var let const)</li><li>함수와 모듈화가 JavaScript에 당췌 왜 필요할까</li><li>Promise 혹은 Async. 그래도 콜백지옥은 피할 수 없어</li><li>JavaScript로 바라보는 함수형 프로그래밍의 미래</li><li>이터레이터를 어떻게 쓸까</li><li>타입스크립트 도입은 바람직할까</li></ol><p>&nbsp;</p><h1 id="몸풀기"><a href="#몸풀기" class="headerlink" title="몸풀기"></a>몸풀기</h1><p>시작하기 전에ES2015를 지금 당장 시작할 수 있을까 하는 생각을 하고 있는 사람이 있을텐데 지금은 어느덧 2017년. 이미 스펙은 오래전부터 안정화 되어 있다.</p><p><img src="/images/2017/03/20170306_083618.jpg" alt=""></p><p>링크 : <a href="https://kangax.github.io/compat-table/es6/" target="_blank" rel="noopener">https://kangax.github.io/compat-table/es6/</a></p><h2 id="트랜스파일러를-선택하자-꼬오오오오옥이요"><a href="#트랜스파일러를-선택하자-꼬오오오오옥이요" class="headerlink" title="트랜스파일러를 선택하자. 꼬오오오오옥이요."></a>트랜스파일러를 선택하자. <del>꼬오오오오옥이요</del>.</h2><p>위의 사이트 통계에 따르면 사파리는 100%, Edge14는 93%, chrome은 97%, FireFox는 94% 정도의 compatibility를 보장하고 있으니 최신 브라우저를 사용한다고 하면 대부분은 그냥 쓸 수 있다고 보면 될 것으로 보인다. 그럼에도 불구하고 ES2015를 쓰려고 하면 필자가 세가지 정도 이유에서 아직은 babel 같은 transpiler를 써야하는데 첫번째는 가장 중요한 것으로 보이는 모듈화에 대한 스펙이 ES2015에는 올라왔지만 번들링이슈를 포함한 개발환경과 브라우저에 동작하는 것이 다른 부분에 대한 어려움 때문이고 두번째는 아직 Internet Explorer를 많이 쓰고 있는 한국 환경이 걸림돌이고 마지막으로는 성능이슈이다.</p><p>첫번째 이야기 모듈에 대한 이야기는 좀 복잡한데 간단하게 설명하자면 ES2015 개발 환경이라면 아래 처럼 코드는 사용될 것이다</p><p>import somemodule from ‘ModuleFile’</p><p>이런 식이라면 아래 그림처럼 상대 경로를 통해 해당 함수에 대한 로딩이 이루어져하는데 현재 번들링하는 관점에서는 비효율적으로 동작할 것이다.</p><p><img src="/images/2017/02/importing-1024x485.png" alt=""></p><p>Button 액션을 담당하는 파일을 로딩해서 그 함수를 사용하게 되는 것이지만 일반적으로 작성하는  HTML을 생각해 보면 보통 JavaScript를 저렇게 로딩하고 있지 않고 아래처럼 script 태그를 이용해서 로딩을 시도하게 된다.</p><p>&lt;script src=”someScript.js”/&gt;</p><p>이렇게 소스코드를 만들 때에는 보통 번들링이라는 형태로 여러파일들을 하나로 묶거나 (unify)  줄이는 ( uglify)를 하게 되는데 이런 과정을 거치는 이유는 js 파일을 다운로드 받는 속도의 문제와 보안문제 때문이다.</p><p>또 한꺼번에  js 파일들을 모두 로딩하는 것이 비효율적이라는 생각을 가지고 AMD 스펙같은데에서는 다이나믹 로딩을 사용하고 있다. 마침 dynamic import 에 대한 spec 또한 tc39의 3단계까지 올라가 있다</p><p><a href="https://github.com/tc39/proposal-dynamic-import" target="_blank" rel="noopener">https://github.com/tc39/proposal-dynamic-import</a></p><p>아무래도 이게 정해지고 나면 import 에 대한 브라우저들의 지원이 확실해 질 듯하고 아마 모듈 로딩에 대해서도 코드 표준들이 바뀔 수 있을 것으로 보인다.</p><p>두번째 이유는 <del>더이상 자세한 설명은 생략한다</del></p><p>세번째는 ES2015의 Iterator라던지 변수 scope등은 이전까지 JavaScript에 대해 잘 알지 못하던 사람들이 실수하던 코드를 다른 언어처럼 짤 수 있게 한 부분이 많아서 왠만한 개발자들이 짜던 것보다 코드 품질이 좋게 변환을 해 준다.</p><p>[contentcards url=”<a href="http://sculove.github.io/blog/2016/07/26/Babel-%EB%84%88-%EB%AF%BF%EC%9D%84%EC%88%98-%EC%9E%88%EB%8B%88/" target="_blank" rel="noopener">http://sculove.github.io/blog/2016/07/26/Babel-%EB%84%88-%EB%AF%BF%EC%9D%84%EC%88%98-%EC%9E%88%EB%8B%88/</a>“ target=”_blank”]</p><p>관련 블로그를 링크를 거는데 중요한 문단은 다음과 같다.</p><blockquote><h4 id="“한마디로-정리한다면…-안타깝지만-Babel-은-저-보다-코드를-더-잘짰습니다-ㅠㅠ”"><a href="#“한마디로-정리한다면…-안타깝지만-Babel-은-저-보다-코드를-더-잘짰습니다-ㅠㅠ”" class="headerlink" title="“한마디로 정리한다면… 안타깝지만, Babel 은 저 보다 코드를 더 잘짰습니다. ㅠㅠ”"></a>“한마디로 정리한다면… 안타깝지만, Babel 은 저 보다 코드를 더 잘짰습니다. ㅠㅠ”</h4></blockquote><p>&nbsp;</p><h2 id="그럼-어떤-트랜스파일러를-사용할-것인가"><a href="#그럼-어떤-트랜스파일러를-사용할-것인가" class="headerlink" title="그럼 어떤 트랜스파일러를 사용할 것인가"></a>그럼 어떤 트랜스파일러를 사용할 것인가</h2><p>어떤 프레임워크를 사용하는가에 따라서 트랜스파일러도 보통은 선택되는 상황이지만 크게 babel과 traceur 로 양분이 되는데 작년 기준이기는 하지만 거의 babel의 압승으로 끝나는 듯한 모습이다.</p><p><a href="https://www.reddit.com/r/javascript/comments/33c9la/which_es6_transpiler/" target="_blank" rel="noopener">https://www.reddit.com/r/javascript/comments/33c9la/which_es6_transpiler/</a></p><p>타입스크립트의 경우는 약간 다른 경우니까 나중에 다뤄보도록 하겠다.</p><h2 id="Linter를-사용할-것"><a href="#Linter를-사용할-것" class="headerlink" title="Linter를 사용할 것"></a>Linter를 사용할 것</h2><p>Linting이라고 하는 것은 기본적으로 버그가 날 수 있는 코드를 표시를 해주는 툴로써 이바닥의 요다인 Douglas 옹이 JSLint를 만들고 가장 많이 사용되는 툴은 ESLint  툴이다. 많은 에디터가 ESLint 플러그인을 제공하고 있으므로 꼭 설치하고 시작하는 것이 좋다.</p><p>Webstrom 관련된 내용은 기존의 아티클을 읽어보기를 추천한다.</p><p><a href="http://devpools.kr/2017/02/16/javascript-eslint-webstorm/" target="_blank" rel="noopener"><img src="/images/2017/03/20170306_070647.jpg" alt=""></a></p><p>&nbsp;</p><h2 id="스타일-가이드를-활용하자"><a href="#스타일-가이드를-활용하자" class="headerlink" title="스타일 가이드를 활용하자"></a>스타일 가이드를 활용하자</h2><p>JavaScript 관련해서 좋은 회사의 스타일 가이드들을 활용하는 것은 매우 추천할 만한 일이다. JavaScript관련해서 가장 핫한 스타일 가이드 중 하나는 airbnb의 스타일 가이드이고 이후 이어지는 글들은 상당히 많이 참조할 것이다.</p><p><a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">https://github.com/airbnb/javascript</a></p><h2 id="기존-프로젝트를-재활용"><a href="#기존-프로젝트를-재활용" class="headerlink" title="기존 프로젝트를 재활용"></a>기존 프로젝트를 재활용</h2><p>아무래도 이런 리팩토링은 legacy 프로젝트가 있어야 한다. 기존에 만들었던 서버리스 아키텍처 관련 프로젝트를 legacy로 리팩토링 해 보도록 하겠다.</p><p><a href="https://github.com/ehrudxo/standup" target="_blank" rel="noopener">https://github.com/ehrudxo/standup</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ES2015는 프론트엔드 개발자들에게 많은 화두를 던졌고 아주 진지하게 자바스크립트(JavaScript)가 세상을 집어삼킬 거라는 포부를 던지고 있다. 가지고 있던 언어적인 난해함을 벗어던지고 더 많은 개발자들이 좀 더 손쉽게 Java와 C 처럼
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.devpools.kr/categories/JavaScript/"/>
    
      <category term="ReactJs" scheme="http://www.devpools.kr/categories/JavaScript/ReactJs/"/>
    
      <category term="Refactoring" scheme="http://www.devpools.kr/categories/JavaScript/ReactJs/Refactoring/"/>
    
    
  </entry>
  
  <entry>
    <title>개발바보들 2화 – git “Stash”</title>
    <link href="http://www.devpools.kr/2017/02/27/%EA%B0%9C%EB%B0%9C%EB%B0%94%EB%B3%B4%EB%93%A4-2%ED%99%94-git-stash/"/>
    <id>http://www.devpools.kr/2017/02/27/개발바보들-2화-git-stash/</id>
    <published>2017-02-27T10:50:44.000Z</published>
    <updated>2018-01-07T06:42:35.334Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2017/02/01-e1488948109290.png" alt=""></p><p><img src="/images/2017/02/1-640x1024.png" alt=""></p><p><img src="/images/2017/02/20170313_082859.png" alt=""> <img src="/images/2017/02/20170313_082858-2.png" alt=""> <img src="/images/2017/02/20170313_082858-1.png" alt=""> <img src="/images/2017/02/20170313_082858.png" alt=""> <img src="/images/2017/02/20170313_082856.png" alt=""> <img src="/images/2017/02/20170313_082854.png" alt=""> <img src="/images/2017/02/20170313_082852.png" alt=""> <img src="/images/2017/02/20170313_082850.png" alt=""> <img src="/images/2017/02/20170313_082848.png" alt=""> <img src="/images/2017/02/20170313_082846.png" alt=""> <img src="/images/2017/02/20170313_082844.png" alt=""> 세상을 살아갈 때, 내가 계획한 대로 되는 일이 거의 없드시 개발도 마찮가지로, 다양한 상황을 겪게 됩니다. 이런 예상치 못한 일을 겪게 될 때, 유연하게 대처하는 방법 중 하나가  stash 입니다.  stash는 Git에서 사용하는 임시저장 명령입니다.</p><hr><p>다음과 같은 상황을 한번 생각해보세요.</p><ol><li>다음 버전의 신규 기능을 개발하고 있는데, 며칠 전 배포한 버전의 기능에서 문제가 생겨서, 긴급히 수정해야하는 상황.</li><li>코딩을 한참 했는데, 커밋을 하려고 보니 master 브랜치<del>( 헛!! )</del>인 상황.</li></ol><p>&nbsp;</p><p>1번의 경우라면 임시로 커밋하고 릴리즈 브랜치로 이동해서 버그 패치를 만들 수 있을텐데, 2번의 경우는 그마저도 좀 어렵죠. 네. 이미 예상하셨드시 stash를 사용하면 간단합니다. 그러면 stash에 대해서 좀 더 자세히 설명해 볼께요.</p><p>stash의 임시 저장은 저장하고 불러오고가 기본입니다. <code>git stash</code> 와 <code>git stash pop</code>만 아시면 되요. 임시 저장하고, 임시 저장된 내용을 가져오고 임시저장된 내용을 거죠. 쉽죠? 그런데 이렇게 하면 임시저장소를 하나만 사용하는 거예요. ( 그렇게 까지 사용하시지는 않겠지만) stash의 임시 저장공간 갯수는 제한이 없습니다.  그래서 pop 말고도 여러가지 명령이 있습니다.</p><ul><li><strong>저장하기 (SAVE)</strong> “<em>git stash save [메시지]</em>“<br>“<em>git stash</em>“ 명령은 save 옵션이 생략된 축약형입니다. 그대로만 사용하셔도 되지만, stash에 메시지를 지정할때는 save를 명시 해줘야 합니다.</li><li><strong>목록보기(LIST)</strong> “_git stash list”<br>_stash에 저장된 목록을 봅니다. stash@{숫자}의 형식으로 보여지게 되는데, 가장 최근에 stash된것이 0번이고, 이후로 저장하게 되면 순서가 밀리게 됩니다. 그래서 항상 0번이 최신이고 1,2 .. 순서로 밀려서 저장됩니다.</li><li><strong>불러오기(APPLY)</strong> “<em>git stash apply stash@{숫자}</em>“<br>지정된 stash를 불러옵니다. 이때, stash를 지정하지 않으면 가장 최신의( stash@{0}) 을 불러옵니다. stash될 때 인덱스에 추가된 상태로 적용하고 싶다면 –index 옵션을 주시면 됩니다.</li><li><strong>삭제하기(DROP)</strong> “<em>git stash drop [stash@{숫자}]</em>“<br>지정된 stash를 삭제합니다. 마찬가지로 stash를 지정하지 않으면 최신의 stash를 삭제합니다.</li><li><strong>불러오고 삭제하기(POP)</strong> “<em>git stash pop [stash@{숫자}]</em>“<br>apply와 drop을 한번에 수행합니다. 지정된 stash를 불러오고 삭제합니다. 마찬가지로 stash를 지정하지 않으면 최신의 stash를 삭제합니다.</li><li><strong>내용 보기(SHOW)</strong> “<em>git stash show[stash@{숫자}]</em>“<br>stash 된 내용을 확인합니다. 마찬가지로 stash를 지정하지 않으면 최신의 stash를 보여줍니다.</li><li><strong>브랜치로 만들기(BRANCH)</strong> “<em>git stash branch &lt;새로만들브랜치이름&gt; [stash@{숫자}]</em>“<br>stash 된 내용으로 새로운 브랜치를 만듭니다. 이때, pop과 마찬가지로 stash 된 내용은 삭제됩니다.</li></ul><p>&nbsp;</p><p>stash는 여러개를 저장할 수 있고, 그것들을 골라서 적용할 수 있다, 그리고 stash된 걸로 브랜치를 만들 수 있다라고 알아두세요. ( 어차피 커맨드로 안하시잖아요? )</p><p>그럼 다시 위의 상황을 다시 보시죠.</p><p>첫번째 경우에서는 <code>git stash</code>했다가 패치를 만들고 나서 다시 내 브랜치로 돌아와서 <code>git stash pop</code>하면 되고, 두번째 경우에서는 <code>git stash branch feature-mymy</code>처럼 브랜치를 생성하면 됩니다. 알고보니 참 쉽죠? <del>( 이제 임시커밋, 쩜 찍고 커밋 같은 걸로 혼나지 맙시다 ㅠㅠ )</del></p><p>&nbsp;</p><p><img src="/images/2017/02/2-1-640x1024.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/2017/02/01-e1488948109290.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2017/02/1-640x1024.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image
      
    
    </summary>
    
      <category term="Cartoon" scheme="http://www.devpools.kr/categories/Cartoon/"/>
    
    
  </entry>
  
  <entry>
    <title>[JavaScript] ESLint with WebStorm</title>
    <link href="http://www.devpools.kr/2017/02/16/javascript-eslint-webstorm/"/>
    <id>http://www.devpools.kr/2017/02/16/javascript-eslint-webstorm/</id>
    <published>2017-02-16T10:03:54.000Z</published>
    <updated>2018-01-07T06:42:35.409Z</updated>
    
    <content type="html"><![CDATA[<p>IntelliJ 의 웹 버전인 WebStorm을 사용할 때 ESLint를 사용하는 방법을 알아보겠습니다. 프로젝트에도 적용할 수 있겠지만 에디터에서 자동으로 문제가 있는 (혹은 버그를 생산하는) 코드를 미리 찾아 볼 수 있습니다.</p><h3 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h3><p>“Linting”이라는 행위는 버그가 날 수 있을 만한 코드를 찾아서 체크를 해 주는일을 의미합니다.</p><blockquote><p>In <a href="https://en.wikipedia.org/wiki/Computer_programming" title="Computer programming" target="_blank" rel="noopener">computer programming</a>, <strong>lint</strong> is a Unix utility that flags some <a href="https://en.wikipedia.org/wiki/C_(programming_language" target="_blank" rel="noopener">suspicious and non-portable constructs</a>#Language<em>tools “C (programming language)”) (likely to be bugs) in [C language](<a href="https://en.wikipedia.org/wiki/C" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/C</a></em>(programming_language) “C (programming language)”)<a href="https://en.wikipedia.org/wiki/Source_code" title="Source code" target="_blank" rel="noopener">source code</a>; generically, lint or a <strong>linter</strong> is any tool that flags suspicious usage in software written in any <a href="https://en.wikipedia.org/wiki/Computer_language" title="Computer language" target="_blank" rel="noopener">computer language</a>. The term <strong>lint-like behavior</strong> is sometimes applied to the process of flagging suspicious language usage. Lint-like tools generally perform <a href="https://en.wikipedia.org/wiki/Static_code_analysis" title="Static code analysis" target="_blank" rel="noopener">static analysis</a> of source code. - 위키피디아 <a href="https://en.wikipedia.org/wiki/Lint_%28software%29" target="_blank" rel="noopener">Lint</a></p></blockquote><p>JavaScript 에서 이 Lint라는 의미를 처음 얘기한 사람은 Douglas crockford 였고 그는 JsLint라는 툴을 만들어 냅니다. JavaScript Definite Guide  같은 책에서도 내용을 언급하고 있습니다.</p><p>[contentcards url=”<a href="http://www.jslint.com/" target="_blank" rel="noopener">http://www.jslint.com/</a>“ target=”_blank”]</p><p>하지만 최근의 대부분의 JavaScript 커뮤니티에서 사용하는 Lint  툴은 ESLint 툴입니다.</p><p>Nicholas Jakas에 의해 2013년에 나온 이 툴은 현재 여러 툴들에서 플러그인으로 사용되고 있습니다.</p><p>[contentcards url=”<a href="http://eslint.org/" target="_blank" rel="noopener">http://eslint.org/</a>“ target=”_blank”]</p><p>“JSX” 지원하는 것에 대해서 언급이 첫페이지에 있습니다.  React 와 JSX는 다르다고 하는군요.  아무래도 Pluggable한 아키텍처로 이루어져 있기에 오리지날인 JSLint에 비해 많이 쓰이는 거라고 보여집니다.</p><h3 id="webstorm"><a href="#webstorm" class="headerlink" title="webstorm"></a>webstorm</h3><p>웹스톰은 IntelliJ를 만든 Jetbrains에서 만든 웹 개발자용 IDE 입니다. 이클립스가 약간은 범용에 가깝다고 하면  이 웹 스톰은 JavaScript 최근 트렌드 및 개발 환경에 대한 이해가 큰 IDE 입니다. Node 모듈에 대한 이해도 가지고 있고 npm  을 기본적으로 작동시킬 수 있습니다. 유료 IDE기는 하지만 IntelliJ에 적응된 개발자들은 이webstorm의 여러가지 기능에 대해서 많이 만족하고 쓰고 있습니다. 최근 팝잇에 올라온 IntelliJ에 관한 글을 읽어보면 많은 인사이트들을 얻을 수 있습니다.</p><p>[contentcards url=”<a href="http://www.popit.kr/%EC%9D%B8%ED%85%94%EB%A6%ACj-%ED%99%9C%EC%9A%A9-%EA%BF%80%ED%8C%81-42%EA%B0%80%EC%A7%80-%EC%A0%95%EB%A6%AC/" target="_blank" rel="noopener">http://www.popit.kr/%EC%9D%B8%ED%85%94%EB%A6%ACj-%ED%99%9C%EC%9A%A9-%EA%BF%80%ED%8C%81-42%EA%B0%80%EC%A7%80-%EC%A0%95%EB%A6%AC/</a>“ target=”_blank”]</p><h3 id="WebStrom-ESLint"><a href="#WebStrom-ESLint" class="headerlink" title="WebStrom + ESLint"></a>WebStrom + ESLint</h3><p>이 WebStorm에서 ESLint를 설정하는 방법은 다음과 같습니다.</p><p>preference -&gt; Languges &amp; Framework -&gt; ESLint</p><p><img src="/images/2017/02/20170306_061320-1024x712.jpg" alt=""></p><p>두가지를 셋팅해 주셔야 하는데 하나는 Node 를 지정하는 것이고 또 다른 하나는 ESLint 폴더를 지정해 주는 것입니다. Node 는 각자의 환경을 정하면 될 것입니다.</p><p>ESLint 폴더를 지정할 때는</p><pre><span style="font-size: 12pt; font-family: terminal, monaco, monospace;">$ npm list -g|more </span></pre><p>옵션을 통해서 어디에 설치를 했는지 확인해 주시면 됩니다.</p><p>확인이 되셨으면</p><pre><span style="font-size: 12pt; font-family: terminal, monaco, monospace;">`$ npm install -g eslint`</span></pre><p>[contentcards url=”<a href="https://github.com/eslint/eslint" target="_blank" rel="noopener">https://github.com/eslint/eslint</a>“ target=”_blank”]</p><p>이후 몇가지 모듈을 더 설치해야 합니다.</p><pre><span style="font-family: terminal, monaco, monospace; font-size: 12pt;">$npm install eslint-plugin-react eslint-plugin-jsx-a11y eslint-plugin-import -g</span></pre><p>실행해 주고 나서 WebStorm을 다시 작동시키면 아래와 같은 좋은 예를 볼 수 있습니다.</p><p><img src="/images/2017/02/스크린샷-2017-02-16-오후-6.49.10.jpg" alt=""></p><p>&nbsp;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;IntelliJ 의 웹 버전인 WebStorm을 사용할 때 ESLint를 사용하는 방법을 알아보겠습니다. 프로젝트에도 적용할 수 있겠지만 에디터에서 자동으로 문제가 있는 (혹은 버그를 생산하는) 코드를 미리 찾아 볼 수 있습니다.&lt;/p&gt;
&lt;h3 
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.devpools.kr/categories/JavaScript/"/>
    
    
      <category term="ESLint" scheme="http://www.devpools.kr/tags/ESLint/"/>
    
      <category term="IntellisJ" scheme="http://www.devpools.kr/tags/IntellisJ/"/>
    
      <category term="WebStorm" scheme="http://www.devpools.kr/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title>[깃헙트렌드]Lottie</title>
    <link href="http://www.devpools.kr/2017/02/09/%EA%B9%83%ED%97%99%ED%8A%B8%EB%A0%8C%EB%93%9C-lottie/"/>
    <id>http://www.devpools.kr/2017/02/09/깃헙트렌드-lottie/</id>
    <published>2017-02-09T08:10:47.000Z</published>
    <updated>2018-01-07T06:42:35.334Z</updated>
    
    <content type="html"><![CDATA[<p>며칠간 깃헙과 프론트엔드 커뮤니티 들에서 Lottie 프로젝트가 들썩들썩 했죠.  오늘은 이  Lottie 에 대해서 알아보겠습니다.</p><p>[contentcards url=”<a href="http://airbnb.design/introducing-lottie/" target="_blank" rel="noopener">http://airbnb.design/introducing-lottie/</a>“ target=”_blank”]</p><p>버전은 플랫폼 별( iOS, android, react-native)로 크게 3가지가 있습니다. 모두 최근에 스타가 압도적으로 높아졌습니다. 무엇보다 Airbnb에 대한 기술적인 기대감들이 많이 반영되어 있는 듯 합니다.</p><p>[caption id=”attachment_803” align=”aligncenter” width=”648”]<img src="/images/2017/02/20170306_065204-1024x886.jpg" alt=""> 플랫폼 3대장?[/caption]</p><ul><li>iOS : <a href="https://github.com/airbnb/lottie-ios" target="_blank" rel="noopener">https://github.com/airbnb/lottie-ios</a></li><li>android : <a href="https://github.com/airbnb/lottie-android" target="_blank" rel="noopener">https://github.com/airbnb/lottie-android</a></li><li>react-native: <a href="https://github.com/airbnb/lottie-react-native" target="_blank" rel="noopener">https://github.com/airbnb/lottie-react-native</a></li></ul><h2 id="1-bodymovin"><a href="#1-bodymovin" class="headerlink" title="1. bodymovin"></a>1. bodymovin</h2><p>먼저 이 프로젝트를 이해하기 전에 이해해야 되는 프로젝트가 있습니다. 이름은 bodymovin인데 이 프로젝트는 이른바 디자이너와 개발자의 간격을 줄여주는 프로젝트입니다.</p><p>[contentcards url=”<a href="https://github.com/bodymovin/bodymovin" target="_blank" rel="noopener">https://github.com/bodymovin/bodymovin</a>“ target=”_blank”]</p><p>조금 더 설명을 하자면 비주얼 이펙트를 만드는 디자인 프로그램 중에 After Effect가 있습니다. 디자이너와 사이트나 앱 작업을 하다보면 움직이는 gif라던지 mov 파일로 받게 될 때가 있는데 이 프로젝트는 After Effect의 플러그인으로 설치를 할 수 있습니다.</p><p><strong>무엇을 하는 녀석인가요?</strong></p><p>After Effect로 비주얼 이펙트 작업을 하면 저장되는 파일 확장자는 .aep  이지만 gif나 mov로 저장을 할 수 있습니다. 그런데 bodymovin 은 그 움직임을 json 파일로 내려줍니다.</p><p><strong>JSON 파일로 내리면 어떻게 활용할 수 있나요?</strong></p><p>이 bodymovin 에는 플레이어가 존재하는데 웹에서 돌려볼 수 있도록 bodymovin.js 를 제공합니다.</p><p>예를 들어 data.json 이라는 형태로 변환을 해서 아래와 같이 코드를 짜면 실행시켜 볼 수가 있습니다.</p><pre>var animData = { wrapper: document.getElementById('bodymovin'), animType: 'html', loop: true, prerender: true, autoplay: true, path: 'data.json'}; var anim = bodymovin.loadAnimation(animData);</pre><p>&nbsp;</p><p>[caption id=”attachment_663” align=”aligncenter” width=”188”]<img src="/images/2017/02/prototype01.gif" alt=""> 하지만 이것은 하울의 움직이는 gif[/caption]</p><h2 id="2-Lottie"><a href="#2-Lottie" class="headerlink" title="2. Lottie"></a>2. Lottie</h2><p>Lottie는 이런 컨셉을 가지고 와서 모바일 App에서도 돌아갈 수 있도록 플레이어를 만들었습니다.</p><p>[caption id=”” align=”aligncenter” width=”443”]<img src="http://cfile3.uf.tistory.com/image/271D6A4753330BF92040F8" alt=""> 미안하다. 이 로티가 아니다.<del>4대악 근절 로티.</del>         출처 : 송파구청 <a href="http://smartsmpa.tistory.com/1263[/caption" target="_blank" rel="noopener">http://smartsmpa.tistory.com/1263[/caption</a>]</p><p>안드로이드 기준으로 실행을 한번 해 볼까요?</p><p>$git clone <a href="https://github.com/airbnb/lottie-android.git" target="_blank" rel="noopener">https://github.com/airbnb/lottie-android.git</a></p><p>git으로 내려받아서 실행을 시켜보면 샘플 프로젝트가 있다는 것을 확인해 볼 수 있습니다.</p><p>[caption id=”attachment_805” align=”aligncenter” width=”257”]<img src="/images/2017/02/20170306_065253.jpg" alt=""> Sample Project[/caption]</p><p>[caption id=”attachment_806” align=”aligncenter” width=”284”]<img src="/images/2017/02/20170306_065327.jpg" alt=""> 실행을 시켜봅시다.[/caption]</p><p>실행을 시켜보면 아주 경쾌한 화면이 실행됩니다.</p><p>[caption id=”attachment_667” align=”aligncenter” width=”176”]<img src="/images/2017/02/lottie-176x300.gif" alt=""> spring intro! gif로는 생략이 많이 되네요.[/caption]</p><p>Animation  Viewer로 미리 샘플로 등록된 JSON 파일들로 테스트를 해 볼 수 가 있습니다.</p><p><img src="/images/2017/02/lotties-pin-176x300.gif" alt=""></p><p>그리고 파일을 참조할 수도 있으니 외부 URL 같은 부분도 참조해서 서비스할 수 있습니다.</p><h2 id="3-그래서"><a href="#3-그래서" class="headerlink" title="3. 그래서?"></a>3. 그래서?</h2><p>이게 어떤 역할을 할 것인지 개발자로써는 사실 확실하지 않아서 “개발바보들 팀”으로 영입이 확실시 되는 UX 디자이너에게 보여주면서 물어봤더니 굉장히 재밌어 하면서 다음과 같은 결론을 내었습니다.</p><ol><li>디자이너와 개발자 사이의 협업의 간격이 한층 좁아질 것이다.(움직이는 gif나 mov포맷보다는 훨씬 유연해 질것으로 기대)</li><li>하지만 이벤트에 관련된 부분을 처리할 수 있도록 발전하지 않으면 어려울 거 같다.(현재 이벤트는 로딩 될때의 시계열 이벤트만 보입니다. 터치와 영역에 대한 인터페이스가 나오면 좋겠다)</li></ol><p>그리고 실제로 우리가 만들어서 JSON을 내보니 아직 레이어가 여러개 일때 처리하는 방법을 잘 모르겠다는 것등의 어려움이 보였습니다. 하지만 간단하게 움직이는 gif의 로고를 처리하는 용도로는 매우 잘 사용할 수 있어 보입니다.</p><p>이걸로 프로젝트를 한번 진행하게 되면서 좋은 영감이 떠오르게 되면 다시한번 리뷰해 보도록 하겠습니다.</p><p>&nbsp;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;며칠간 깃헙과 프론트엔드 커뮤니티 들에서 Lottie 프로젝트가 들썩들썩 했죠.  오늘은 이  Lottie 에 대해서 알아보겠습니다.&lt;/p&gt;
&lt;p&gt;[contentcards url=”&lt;a href=&quot;http://airbnb.design/introd
      
    
    </summary>
    
      <category term="GitHub-trend" scheme="http://www.devpools.kr/categories/GitHub-trend/"/>
    
    
      <category term="lottie" scheme="http://www.devpools.kr/tags/lottie/"/>
    
      <category term="airbnb" scheme="http://www.devpools.kr/tags/airbnb/"/>
    
      <category term="front-end" scheme="http://www.devpools.kr/tags/front-end/"/>
    
  </entry>
  
  <entry>
    <title>[팁] wordpress 에 https 적용하기</title>
    <link href="http://www.devpools.kr/2017/02/08/%ED%8C%81-wordpress-%EC%97%90-https-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/"/>
    <id>http://www.devpools.kr/2017/02/08/팁-wordpress-에-https-적용하기/</id>
    <published>2017-02-08T08:57:12.000Z</published>
    <updated>2018-01-07T06:42:35.378Z</updated>
    
    <content type="html"><![CDATA[<p>크롬이 https 사이트가 아니면 warning을 띄우게 되었다는 사실이 알려지면서 많은 설치형 블로거들이 난감해 하시는 분들이 있어서 포스팅 합니다.</p><p>[caption id=”attachment_612” align=”aligncenter” width=”648”]<img src="/images/2017/02/castle-265596_1920-1024x576.jpg" alt=""> 크롬 도금의 자물쇠…[/caption]</p><p>세 단계 정도로 나뉘어서 해야할 일들이 있을 것입니다. (세 단계 모두 지정된 플랫폼들이 있어서 해당사항이 아니신 분들도 있을 거 같습니다. )</p><ol><li>호스팅 서비스 port 설정( Amazon 기준)</li><li>웹서버 설정(  Ubuntu &amp; Apache2 설정 )</li><li>인증서 설치( Let’s Encrypt 설정)</li></ol><p>&nbsp;</p><h3 id="1-호스팅-서비스"><a href="#1-호스팅-서비스" class="headerlink" title="1. 호스팅 서비스"></a>1. 호스팅 서비스</h3><p>아마존의 경우는 아마존 콘솔로 들어가셔서</p><p>Network &amp; Security -&gt; Security Groups 에 들어가셔서 서비스가 가지고 있는 정책에 맞는 그룹을 선택하신 후에 Inbound Edit을 선택하시고 https 포트로 들어올 수 있도록 작업을 해 주셔야 합니다.</p><p>[caption id=”attachment_611” align=”aligncenter” width=”648”]<img src="/images/2017/02/https-devpools-00.jpg" alt=""> 어디서든 들어 올 수 있게[/caption]</p><p>&nbsp;</p><p>∴이후 아래 설명될 3번 항목만 진행해도 적용이 될 거 같지만 혹시 다른 방법이나 self signed 된 인증서를 통한 설정을 알고 싶은 사람들을 위해서 2번을 설명합니다.</p><h4 id="2-Let’s-Encrypt"><a href="#2-Let’s-Encrypt" class="headerlink" title="2. Let’s Encrypt"></a>2. Let’s Encrypt</h4><p>Let’s Encrypt는 무료라서 3개월에 한번씩 갱신해야 되지만 사용할 수 있는 인증서를 만들어 줍니다. 사이트에 들어가서 무언가를 다운로드 받아야 되나 살펴보면 Let’s Encrypt 에서 바로 제공하는 것은 없고 자동화해 주는 툴이 있는 링크를 제공해 줍니다.</p><h5 id="2-1-certbot"><a href="#2-1-certbot" class="headerlink" title="2.1. certbot"></a>2.1. certbot</h5><p>제가 찾아간 사이트는 바로 certbot이였습니다.</p><p><a href="https://certbot.eff.org/" target="_blank" rel="noopener">https://certbot.eff.org/</a></p><p>&nbsp;</p><p>여기서 작업을 하려면  ubuntu 버전 명령어를 통해 버전을 알아야 합니다.</p><pre>$cat /etc/*releaseDISTRIB_ID=UbuntuDISTRIB_RELEASE=14.04DISTRIB_CODENAME=trustyDISTRIB_DESCRIPTION="Ubuntu 14.04.3 LTS"NAME="Ubuntu"VERSION="14.04.3 LTS, Trusty Tahr"ID=ubuntuID_LIKE=debianPRETTY_NAME="Ubuntu 14.04.3 LTS"VERSION_ID="14.04"HOME_URL="http://www.ubuntu.com/"SUPPORT_URL="http://help.ubuntu.com/"BUG_REPORT_URL="http://bugs.launchpad.net/ubuntu/"</pre><p>&nbsp;</p><p>[caption id=”attachment_616” align=”alignnone” width=”561”]<img src="/images/2017/02/https-devpools-01.jpg" alt=""> certbot 좋아용[/caption]</p><p>&nbsp;</p><p>이렇게 선택하고 나면 해당 installation  페이지로 안내해 줍니다.</p><p>저의 경우는 다음 페이지가 되겠죠.</p><p><a href="https://certbot.eff.org/#ubuntutrusty-apache" target="_blank" rel="noopener">https://certbot.eff.org/#ubuntutrusty-apache</a></p><h5 id="2-2-인스톨"><a href="#2-2-인스톨" class="headerlink" title="2.2. 인스톨"></a>2.2. 인스톨</h5><p>2.3. 실행인스톨 하고 chmod로 실행할 수 있도록 만들어 줍니다.</p><pre>$ ./certbot-auto</pre><div class="get-started"></div><div class="get-started">그리고 저 명령어를 한번 실행해 주면 자동적으로 아파치를 찾아서 바꿔줘야 할 옵션들을 자동으로 찾아서 바꿔줍니다.</div><div class="get-started"><br><br>[caption id=”attachment_617” align=”alignnone” width=”648”]<img src="/images/2017/02/https-devpools-02.jpg" alt=""> 이런 형태의 아웃풋들이 출력됩니다. 설정들을 지속적으로 물어봅니다.[/caption]<br><br></div><div class="get-started"></div><div class="get-started">그러고 나면 warning 이 더 이상 뜨지 않습니다.</div><div class="get-started"></div><div class="get-started"><img src="/images/2017/02/https-devpools-03.jpg" alt=""></div><div class="get-started"></div><h5 id="2-4-갱신"><a href="#2-4-갱신" class="headerlink" title="2.4. 갱신"></a>2.4. 갱신</h5><div class="get-started">3개월에 한번씩 갱신하기 위해서는 아래의 명령어를 cron 잡에 등록해서 작업하시면 됩니다.</div><div class="get-started"><br><pre>$./path/to/certbot-auto renew –quiet –no-self-upgrade</pre><br></div><div class="get-started"></div><div class="get-started">아래 내용은 2번까지 하신 분들은 크게 필요하지 않을지도 모르지만 혹시라도 https 만 적용하기 위해서 필요하신 분들을 위해서 남겨둡니다. Self-signed 인증서를 쓰는 경우인데 크롬 버전이 올라가면 이 경우는 에러는 여전히 뜰 것으로 예상됩니다.</div><div class="get-started"></div><h3 id="3-웹서버-설정-Manually"><a href="#3-웹서버-설정-Manually" class="headerlink" title="3. 웹서버 설정(Manually)"></a>3. 웹서버 설정(Manually)</h3><p>우분투의 경우는 아파치, a2enmod등을 가지고 <del>생각보다 손쉽게</del> 작업을 진행할 수 있습니다.</p><p>아래의 명령어들은 혹시 권한이 필요한 경우가 생기면 sudo를 사용해서 진행하시면 됩니다.</p><h5 id="3-1-SSL-모듈-설치"><a href="#3-1-SSL-모듈-설치" class="headerlink" title="3.1. SSL 모듈 설치"></a>3.1. SSL 모듈 설치</h5><pre>$sudo a2enmod ssl$sudo service apache2 restart</pre><h5 id="3-2-Self-signed-인증서-만들기"><a href="#3-2-Self-signed-인증서-만들기" class="headerlink" title="3.2. Self-signed 인증서 만들기"></a>3.2. Self-signed 인증서 만들기</h5><p>a2enmod는 apache2 모듈설정을 자동화해주는 스크립트입니다. SSL을 설치하고 재시작해 줍니다.(<a href="http://man.he.net/man8/a2enmod" target="_blank" rel="noopener">http://man.he.net/man8/a2enmod</a>)</p><pre><code>$sudo mkdir /etc/apache2/ssl`&lt;/pre&gt;&lt;pre class=&quot;code-pre &quot;&gt;`$sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout   /etc/apache2/ssl/self_signed.key   -out /etc/apache2/ssl/``self_signed``.crt`&lt;/pre&gt;&amp;nbsp;##### 3.3\.  버추얼 호스트 설정파일 만들기&lt;pre class=&quot;code-pre &quot;&gt;`$sudo vi /etc/apache2/sites-available/default-ssl.conf</code></pre><p>로 파일을 열어서 아래와 같이 편집해 줍니다.</p><pre><span style="font-size: 8pt;">&lt;IfModule mod_ssl.c&gt;    &lt;VirtualHost _default_:443&gt;        ServerAdmin <span class="highlight">ehrudxo@gmail.com</span>        <span class="highlight">ServerName devpools.kr</span>        <span class="highlight">ServerAlias www.devpools.kr</span>        DocumentRoot <span class="highlight">/somewhere/</span>        ErrorLog ${APACHE_LOG_DIR}/error.log        CustomLog ${APACHE_LOG_DIR}/access.log combined        SSLEngine on        SSLCertificateFile <span class="highlight">/etc/apache2/ssl/self_signed.crt</span>        SSLCertificateKeyFile <span class="highlight">/etc/apache2/ssl/self_signed.key</span>        &lt;FilesMatch "\.(cgi|shtml|phtml|php)$"&gt;                        SSLOptions +StdEnvVars        &lt;/FilesMatch&gt;        &lt;Directory /usr/lib/cgi-bin&gt;                        SSLOptions +StdEnvVars        &lt;/Directory&gt;        BrowserMatch "MSIE [2-6]" \                        nokeepalive ssl-unclean-shutdown \                        downgrade-1.0 force-response-1.0        BrowserMatch "MSIE [17-9]" ssl-unclean-shutdown    &lt;/VirtualHost&gt;&lt;/IfModule&gt;</span></pre><h5 id="3-4-활성화-하기"><a href="#3-4-활성화-하기" class="headerlink" title="3.4.  활성화 하기"></a>3.4.  활성화 하기</h5><p>이제 다음 명령어로 활성화 하고 재 시작해 줍니다.</p><pre class="code-pre ">`$sudo a2ensite default-ssl.conf$`sudo service apache2 restart</pre><p>이제 접속해 보시면 잘 돌아가시는 걸 확인할 수 있습니다.</p><p>[caption id=”attachment_619” align=”alignnone” width=”648”]<img src="/images/2017/02/https-devpools-04.jpg" alt=""> 앗싸~[/caption]</p><p>&nbsp;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;크롬이 https 사이트가 아니면 warning을 띄우게 되었다는 사실이 알려지면서 많은 설치형 블로거들이 난감해 하시는 분들이 있어서 포스팅 합니다.&lt;/p&gt;
&lt;p&gt;[caption id=”attachment_612” align=”aligncent
      
    
    </summary>
    
      <category term="Dev-Tips" scheme="http://www.devpools.kr/categories/Dev-Tips/"/>
    
    
      <category term="https" scheme="http://www.devpools.kr/tags/https/"/>
    
      <category term="wordpress" scheme="http://www.devpools.kr/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>[간단팁] 시놀로지 NAS에 Let&amp;#039;s Encrypt 인증서 적용하기</title>
    <link href="http://www.devpools.kr/2017/02/05/%EA%B0%84%EB%8B%A8%ED%8C%81-%EC%8B%9C%EB%86%80%EB%A1%9C%EC%A7%80-nas%EC%97%90-lets-encrypt-%EC%9D%B8%EC%A6%9D%EC%84%9C-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/"/>
    <id>http://www.devpools.kr/2017/02/05/간단팁-시놀로지-nas에-lets-encrypt-인증서-적용하기/</id>
    <published>2017-02-05T10:22:46.000Z</published>
    <updated>2017-12-13T09:25:57.469Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://medium.com/@ikaruce/%EC%8B%9C%EB%86%80%EB%A1%9C%EC%A7%80-nas%EC%97%90-lets-encrypt-%EC%9D%B8%EC%A6%9D%EC%84%9C-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0-3d42d8f30c38#.q7qzs0ym9" target="_blank" rel="noopener">https://medium.com/@ikaruce/%EC%8B%9C%EB%86%80%EB%A1%9C%EC%A7%80-nas%EC%97%90-lets-encrypt-%EC%9D%B8%EC%A6%9D%EC%84%9C-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0-3d42d8f30c38#.q7qzs0ym9</a></p><p>시놀로지 NAS에 5분만에 인증서 적용하기.</p><p>( 이제 안전하지 않은 페이지여 안녕~!! )</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://medium.com/@ikaruce/%EC%8B%9C%EB%86%80%EB%A1%9C%EC%A7%80-nas%EC%97%90-lets-encrypt-%EC%9D%B8%EC%A6%9D%EC%84%9C-%EC%A0%81
      
    
    </summary>
    
      <category term="Small talk" scheme="http://www.devpools.kr/categories/Small-talk/"/>
    
    
      <category term="lets encrypt" scheme="http://www.devpools.kr/tags/lets-encrypt/"/>
    
      <category term="synology" scheme="http://www.devpools.kr/tags/synology/"/>
    
  </entry>
  
  <entry>
    <title>[초보용] Git 되돌리기( Reset, Revert )</title>
    <link href="http://www.devpools.kr/2017/02/05/%EC%B4%88%EB%B3%B4%EC%9A%A9-git-%EB%90%98%EB%8F%8C%EB%A6%AC%EA%B8%B0-reset-revert/"/>
    <id>http://www.devpools.kr/2017/02/05/초보용-git-되돌리기-reset-revert/</id>
    <published>2017-02-05T07:59:57.000Z</published>
    <updated>2018-01-07T06:42:35.334Z</updated>
    
    <content type="html"><![CDATA[<p>개발바보들 1화 <a href="http://devpools.kr/2017/01/31/%EA%B0%9C%EB%B0%9C%EB%B0%94%EB%B3%B4%EB%93%A4-1%ED%99%94-git-back-to-the-future/" target="_blank" rel="noopener">git “back to the future”</a>에서 설명한 Reset / Revert에 대한 글입니다.</p><p>&nbsp;</p><p>Git을 익히면서 헷갈렸던 것들 중의 하나가 이력을 되돌리기 입니다. Git에서 이력을 되돌리는 방법은 여러가지가 있지만, 그 중에 대표적인게 Reset과 Revert 입니다. 단어 의미만 보고는 둘 사이의 차이를 알기 쉽지 않은데, 풀어서 설명해보면 Reset은 시계를 다시 맞추드시 이력을 그 당시로 되돌리는 것이고, Revert는 이전 이력은 그대로 두고, 그 되돌릴 커밋의 코드만 원복시킵니다. 이 개념을 이리온님께서 만화로 설명해 주신게 있는데 참고하시면 이해하는데, 더 도움이 됩니다.</p><p>( <a href="http://devpools.kr/2017/01/31/%EA%B0%9C%EB%B0%9C%EB%B0%94%EB%B3%B4%EB%93%A4-1%ED%99%94-git-back-to-the-future/" target="_blank" rel="noopener">개발바보들 1화 — git “Back to the Future ”</a>)</p><p>&nbsp;</p><p><span style="font-size: 18pt;">1. Reset</span></p><p>앞에서 설명한대로 Reset은 시계를 다시 맞추는 것입니다. 돌아 가려는 커밋으로 리파지토리는 재설정되고, 해당 커밋 이후의 이력은 사라집니다. 예를 한번 들어볼까요? ( 일반적인 개발 이력과는 차이가 있지만, 이해가 쉽게 하기 위해 영화 “유주얼 서스펙트”를 이용했고 이에 대한 스포일러를 포함합니다. 하지만, 이미 보셨거나 들어보셨을 것이라 생각합니다. )</p><p><img src="/images/2017/02/1-XKvSxRueC2HYlGj1O72woA.png" alt="" title="그림1\. 기대했으나 스포일러 때문에 실망했던 이력"></p><p><span style="font-size: 10pt;">그림1. 기대했으나 스포일러 때문에 실망했던 이력</span></p><p>[그림1]을 보시면 기대했던 영화를 예매하였으나 스포일러 때문에 실망했던 이력을 볼 수 있습니다. 그래서 스포일러를 보기 전으로 이력을 되돌리기로 합니다. 마치 내가 기억하고 있는 내용을 변경하는 거죠. 커밋 a3bbb3c 이후의 기억은 지우고 싶습니다. Reset은 다음과 같이 사용합니다.</p><p>&nbsp;</p><pre id="5407" class="graf graf--pre graf-after--p">$ git reset &lt;옵션&gt; &lt;돌아가고싶은 커밋&gt;</pre><p>&nbsp;</p><p>여기에 옵션이 몇가지 있는데 자주 쓰는 것 hard, mixed, soft 세가지가 있습니다. 영화를 예매하고 검색한 이력인 a3bbb3c 이후에 발생했던 ( 표를 예매하고, 팝콘과 사이다를 구매 같은)변화에 대해서 어떻게 할지에 대한 것입니다.</p><p>&nbsp;</p><p>(1) hard</p><p>돌아가려는 이력이후의 모든 내용을 지워 버립니다. 이렇게 하면 표를 예매하고, 팝콘과 사이다를 구매했던 모든 것들이 지워지고 모든것이 초기화 됩니다.</p><p>&nbsp;</p><pre id="8053" class="graf graf--pre graf-after--p">$ git reset --hard  a3bbb3c</pre><p>&nbsp;</p><p><img src="/images/2017/02/2.png" alt=""></p><p><span style="font-size: 10pt;">그림2. hard 옵션으로 reset한 후의 이력</span></p><p>&nbsp;</p><p>(2) soft</p><p>돌아가려 했던 이력으로 되돌아 갔지만, 이후의 내용이 지워지지 않고, 해당 내용의 인덱스(또는 스테이지)도 그대로 있습니다. 바로 다시 커밋할 수 있는 상태로 남아있는 것입니다. 기억은 되돌려졌지만, 표와 팝콘과 사이다는 손에 들려있는 상태입니다.</p><p>&nbsp;</p><pre id="1778" class="graf graf--pre graf-after--p">$ git reset --sorf a2bbb3c</pre><p>&nbsp;</p><p><img src="/images/2017/02/3.png" alt=""></p><p><span style="font-size: 10pt;">그림3. soft옵션으로 reset한 후의 이력</span></p><p><img src="/images/2017/02/4.png" alt=""><span style="font-size: 10pt;">그림4. soft옵션으로 reset한 후의 파일 상태</span></p><figure id="fc29" class="graf graf--figure graf-after--figure"><figcaption class="imageCaption"></figcaption><p></p></figure><br>(3) mixed ( 옵션을 적지 않으면 mixed로 동작합니다. )<p></p><p>역시 이력은 되돌려집니다. 이후에 변경된 내용에 대해서는 남아있지만, 인덱스는 초기화 됩니다. 커밋을 하려면 다시 변경된 내용은 추가해야 하는 상태입니다. 기억도 되돌려 졌고, 표와 팝콘 그리고 사이다는 사야겠다는 마음만 남아있다고 할 수 있습니다.</p><p>&nbsp;</p><pre id="e6c8" class="graf graf--pre graf-after--p">$ git reset --mixed a2bbb3c</pre><p>&nbsp;</p><p><img src="/images/2017/02/5.png" alt=""></p><p><span style="font-size: 10pt;">그림5. mixed 옵션으로 reset한 후의 이력</span></p><p><img src="/images/2017/02/6.png" alt=""><span style="font-size: 10pt;">그림6. mixed 옵션으로 reset한 후의 파일 상태</span></p><p>&nbsp;</p><p>또 되돌아가는 커밋을 커밋 해쉬를 통해서 직접 지정할 수도 있고 현재부터 몇개의 커밋을 되돌릴 수도 있습니다 [그림1]에서 처럼 15413dc 부터 a3bbb3c로 돌아가려면</p><p>&nbsp;</p><pre id="bebd" class="graf graf--pre graf-after--p">$ git reset HEAD~6</pre><p>&nbsp;</p><p>위와 같이 현재부터 6개 이전 이력으로 돌아가라라고 상대적으로 지정할 수도 있습니다.</p><p>&nbsp;</p><p><span style="font-size: 18pt;">2. Revert</span></p><p>Revert는 상태를 되돌린다고 볼 수 있습니다. 스포를 당한 커밋을 revert하고 현재 작성중인 코드만 본다면 reset과 동일한 (hard 옵션 준거만 빼고) 결과를 가집니다. 하지만 이력은 같지 않습니다. 먼저 결과를 먼저 보고 이어가겠습니다. (reset과 동일하게 스포일러를 당한 것을 되돌립니다)</p><p><img src="/images/2017/02/7.png" alt=""></p><p><span style="font-size: 10pt;">그림7. 스포일러 당한 커밋을 되돌림</span></p><p>이전 이력은 그대로 있고, 스포일러를 당했던 커밋만을 되돌렸습니다. 마치 스포일러 당한것에 대한 것을 기억하고 있지만, 그 내용은 알지 못하는 것처럼 말이죠. ( 이 내용은 앞에서 언급했던 Devpools의 설명에 나온 모나리자 눈썹의 내용이 더 이해가 쉬울것 같습니다. )</p><p>revert 를 하는 방법과 스포일러 댓글의 커밋을 되돌리는 것은</p><p>&nbsp;</p><pre id="7a19" class="graf graf--pre graf-after--p"># git revert &lt;되돌릴 커밋&gt; git revert 2664ce8</pre><p>&nbsp;</p><p>이고 되돌릴 커밋이 여러개라면 범위를 주어서 여러개를 선택할 수도 있습니다. [그림1]에서 예를 들면 댓글을 읽은 것부터 영화관을 나설때까지 모두 되돌리려면 아래 코드처럼 범위를 주시면 됩니다.</p><p>&nbsp;</p><pre id="2860" class="graf graf--pre graf-after--p graf--last">git revert 2664ce8..15413dc</pre><p>&nbsp;</p><article class=" u-sizeViewHeightMin100 u-overflowHidden postArticle postArticle--full is-withAccentColors" lang="ko" data-scroll="native"><br><div class="postArticle-content js-postField js-notesSource js-trackedPost" data-post-id="d572b4cb0bd5" data-source="post_page" data-collection-id="32e8039ca279" data-tracking-context="postPage" data-scroll="native"><section class="section section--body section--last"><br><div class="section-content"><br><div class="section-inner sectionLayout--insetColumn"></div><br><div class="section-inner sectionLayout--insetColumn"><br><br>&nbsp;<br><br><span style="font-size: 18pt;">3. 언제 reset을 하고 언제 revert를 해야하나?</span><br><br>단순하게 생각하면 reset을 하는 것이 revert를 하는 것보다 이력을 더 단순하게 만들어주기 때문에 revert의 장점이 많지 않아 보입니다. 하지만 이력 중간에 로그 출력하도록 한 커밋이 있고 그 커밋만을 취소하려고 한다면 reset을 사용하여 이후의 이력을 모두 제거하는 것은 이후 이력을 모두 날려버리는 결과를 나을 것입니다. 이런 때 revert를 사용하여 해당 커밋의 내용만 되돌릴 수 있습니다. 또한 이미 원격 리파지토리에 push 를 한 상태라면 reset을 사용하면 reset 하기 이전으로 되돌리기 전까지는 push 할 수 없게됩니다. (물론 force라는 무시무시한 옵션이 있기는 합니다. ) 그래서 이미 push 한 코드라면 미련을 버리고 revert를 하셔야 합니다.<br><br>&nbsp;<br><br></div><br></div><br></section></div><br><footer class="u-paddingTop10"><br><div class="container u-maxWidth740"></div><br></footer></article>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;개발바보들 1화 &lt;a href=&quot;http://devpools.kr/2017/01/31/%EA%B0%9C%EB%B0%9C%EB%B0%94%EB%B3%B4%EB%93%A4-1%ED%99%94-git-back-to-the-future/&quot; target=
      
    
    </summary>
    
      <category term="Dev-Tips" scheme="http://www.devpools.kr/categories/Dev-Tips/"/>
    
    
      <category term="git" scheme="http://www.devpools.kr/tags/git/"/>
    
      <category term="reset" scheme="http://www.devpools.kr/tags/reset/"/>
    
      <category term="revert" scheme="http://www.devpools.kr/tags/revert/"/>
    
  </entry>
  
</feed>
